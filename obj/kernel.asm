
bin/kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 20 13 00 	lgdtl  0x132018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 20 13 c0       	mov    $0xc0132000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 04 00 00 00       	call   c010002c <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>
c010002a:	66 90                	xchg   %ax,%ax

c010002c <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002c:	55                   	push   %ebp
c010002d:	89 e5                	mov    %esp,%ebp
c010002f:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100032:	ba 4c 67 1c c0       	mov    $0xc01c674c,%edx
c0100037:	b8 f9 33 1c c0       	mov    $0xc01c33f9,%eax
c010003c:	89 d1                	mov    %edx,%ecx
c010003e:	29 c1                	sub    %eax,%ecx
c0100040:	89 c8                	mov    %ecx,%eax
c0100042:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100046:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010004d:	00 
c010004e:	c7 04 24 f9 33 1c c0 	movl   $0xc01c33f9,(%esp)
c0100055:	e8 ad d8 00 00       	call   c010d907 <memset>

    cons_init();                // init the console
c010005a:	e8 43 17 00 00       	call   c01017a2 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005f:	c7 45 f4 e0 da 10 c0 	movl   $0xc010dae0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100066:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100069:	89 44 24 04          	mov    %eax,0x4(%esp)
c010006d:	c7 04 24 fc da 10 c0 	movl   $0xc010dafc,(%esp)
c0100074:	e8 ea 02 00 00       	call   c0100363 <cprintf>

    print_kerninfo();
c0100079:	e8 22 09 00 00       	call   c01009a0 <print_kerninfo>

    grade_backtrace();
c010007e:	e8 a2 00 00 00       	call   c0100125 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100083:	e8 da 57 00 00       	call   c0105862 <pmm_init>

    pic_init();                 // init interrupt controller
c0100088:	e8 20 21 00 00       	call   c01021ad <pic_init>
    idt_init();                 // init interrupt descriptor table
c010008d:	e8 72 22 00 00       	call   c0102304 <idt_init>

    vmm_init();                 // init virtual memory management
c0100092:	e8 b8 86 00 00       	call   c010874f <vmm_init>
    sched_init();               // init scheduler
c0100097:	e8 1b c6 00 00       	call   c010c6b7 <sched_init>
    proc_init();                // init process table
c010009c:	e8 42 bf 00 00       	call   c010bfe3 <proc_init>
    
    ide_init();                 // init ide devices
c01000a1:	e8 39 18 00 00       	call   c01018df <ide_init>
    swap_init();                // init swap
c01000a6:	e8 9c 6e 00 00       	call   c0106f47 <swap_init>

    clock_init();               // init clock interrupt
c01000ab:	e8 04 0e 00 00       	call   c0100eb4 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b0:	e8 5f 20 00 00       	call   c0102114 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b5:	e8 e8 c0 00 00       	call   c010c1a2 <cpu_idle>

c01000ba <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000ba:	55                   	push   %ebp
c01000bb:	89 e5                	mov    %esp,%ebp
c01000bd:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c7:	00 
c01000c8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cf:	00 
c01000d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d7:	e8 04 0d 00 00       	call   c0100de0 <mon_backtrace>
}
c01000dc:	c9                   	leave  
c01000dd:	c3                   	ret    

c01000de <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000de:	55                   	push   %ebp
c01000df:	89 e5                	mov    %esp,%ebp
c01000e1:	53                   	push   %ebx
c01000e2:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e5:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000eb:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fd:	89 04 24             	mov    %eax,(%esp)
c0100100:	e8 b5 ff ff ff       	call   c01000ba <grade_backtrace2>
}
c0100105:	83 c4 14             	add    $0x14,%esp
c0100108:	5b                   	pop    %ebx
c0100109:	5d                   	pop    %ebp
c010010a:	c3                   	ret    

c010010b <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010b:	55                   	push   %ebp
c010010c:	89 e5                	mov    %esp,%ebp
c010010e:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100111:	8b 45 10             	mov    0x10(%ebp),%eax
c0100114:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100118:	8b 45 08             	mov    0x8(%ebp),%eax
c010011b:	89 04 24             	mov    %eax,(%esp)
c010011e:	e8 bb ff ff ff       	call   c01000de <grade_backtrace1>
}
c0100123:	c9                   	leave  
c0100124:	c3                   	ret    

c0100125 <grade_backtrace>:

void
grade_backtrace(void) {
c0100125:	55                   	push   %ebp
c0100126:	89 e5                	mov    %esp,%ebp
c0100128:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012b:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c0100130:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100137:	ff 
c0100138:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100143:	e8 c3 ff ff ff       	call   c010010b <grade_backtrace0>
}
c0100148:	c9                   	leave  
c0100149:	c3                   	ret    

c010014a <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014a:	55                   	push   %ebp
c010014b:	89 e5                	mov    %esp,%ebp
c010014d:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100150:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100153:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100156:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100159:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100160:	0f b7 c0             	movzwl %ax,%eax
c0100163:	89 c2                	mov    %eax,%edx
c0100165:	83 e2 03             	and    $0x3,%edx
c0100168:	a1 00 34 1c c0       	mov    0xc01c3400,%eax
c010016d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100171:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100175:	c7 04 24 01 db 10 c0 	movl   $0xc010db01,(%esp)
c010017c:	e8 e2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100181:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100185:	0f b7 d0             	movzwl %ax,%edx
c0100188:	a1 00 34 1c c0       	mov    0xc01c3400,%eax
c010018d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100191:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100195:	c7 04 24 0f db 10 c0 	movl   $0xc010db0f,(%esp)
c010019c:	e8 c2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a1:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a5:	0f b7 d0             	movzwl %ax,%edx
c01001a8:	a1 00 34 1c c0       	mov    0xc01c3400,%eax
c01001ad:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b5:	c7 04 24 1d db 10 c0 	movl   $0xc010db1d,(%esp)
c01001bc:	e8 a2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c5:	0f b7 d0             	movzwl %ax,%edx
c01001c8:	a1 00 34 1c c0       	mov    0xc01c3400,%eax
c01001cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d5:	c7 04 24 2b db 10 c0 	movl   $0xc010db2b,(%esp)
c01001dc:	e8 82 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e1:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e5:	0f b7 d0             	movzwl %ax,%edx
c01001e8:	a1 00 34 1c c0       	mov    0xc01c3400,%eax
c01001ed:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f5:	c7 04 24 39 db 10 c0 	movl   $0xc010db39,(%esp)
c01001fc:	e8 62 01 00 00       	call   c0100363 <cprintf>
    round ++;
c0100201:	a1 00 34 1c c0       	mov    0xc01c3400,%eax
c0100206:	83 c0 01             	add    $0x1,%eax
c0100209:	a3 00 34 1c c0       	mov    %eax,0xc01c3400
}
c010020e:	c9                   	leave  
c010020f:	c3                   	ret    

c0100210 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100210:	55                   	push   %ebp
c0100211:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100213:	5d                   	pop    %ebp
c0100214:	c3                   	ret    

c0100215 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100215:	55                   	push   %ebp
c0100216:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100218:	5d                   	pop    %ebp
c0100219:	c3                   	ret    

c010021a <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021a:	55                   	push   %ebp
c010021b:	89 e5                	mov    %esp,%ebp
c010021d:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100220:	e8 25 ff ff ff       	call   c010014a <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100225:	c7 04 24 48 db 10 c0 	movl   $0xc010db48,(%esp)
c010022c:	e8 32 01 00 00       	call   c0100363 <cprintf>
    lab1_switch_to_user();
c0100231:	e8 da ff ff ff       	call   c0100210 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100236:	e8 0f ff ff ff       	call   c010014a <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023b:	c7 04 24 68 db 10 c0 	movl   $0xc010db68,(%esp)
c0100242:	e8 1c 01 00 00       	call   c0100363 <cprintf>
    lab1_switch_to_kernel();
c0100247:	e8 c9 ff ff ff       	call   c0100215 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024c:	e8 f9 fe ff ff       	call   c010014a <lab1_print_cur_status>
}
c0100251:	c9                   	leave  
c0100252:	c3                   	ret    
c0100253:	90                   	nop

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 87 db 10 c0 	movl   $0xc010db87,(%esp)
c010026e:	e8 f0 00 00 00       	call   c0100363 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010027a:	eb 01                	jmp    c010027d <readline+0x29>
        else if (c == '\n' || c == '\r') {
            cputchar(c);
            buf[i] = '\0';
            return buf;
        }
    }
c010027c:	90                   	nop
    if (prompt != NULL) {
        cprintf("%s", prompt);
    }
    int i = 0, c;
    while (1) {
        c = getchar();
c010027d:	e8 6c 01 00 00       	call   c01003ee <getchar>
c0100282:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100285:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100289:	79 07                	jns    c0100292 <readline+0x3e>
            return NULL;
c010028b:	b8 00 00 00 00       	mov    $0x0,%eax
c0100290:	eb 79                	jmp    c010030b <readline+0xb7>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100292:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100296:	7e 28                	jle    c01002c0 <readline+0x6c>
c0100298:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029f:	7f 1f                	jg     c01002c0 <readline+0x6c>
            cputchar(c);
c01002a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a4:	89 04 24             	mov    %eax,(%esp)
c01002a7:	e8 dd 00 00 00       	call   c0100389 <cputchar>
            buf[i ++] = c;
c01002ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002b2:	81 c2 20 34 1c c0    	add    $0xc01c3420,%edx
c01002b8:	88 02                	mov    %al,(%edx)
c01002ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01002be:	eb 46                	jmp    c0100306 <readline+0xb2>
        }
        else if (c == '\b' && i > 0) {
c01002c0:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c4:	75 17                	jne    c01002dd <readline+0x89>
c01002c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ca:	7e 11                	jle    c01002dd <readline+0x89>
            cputchar(c);
c01002cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cf:	89 04 24             	mov    %eax,(%esp)
c01002d2:	e8 b2 00 00 00       	call   c0100389 <cputchar>
            i --;
c01002d7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002db:	eb 29                	jmp    c0100306 <readline+0xb2>
        }
        else if (c == '\n' || c == '\r') {
c01002dd:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002e1:	74 06                	je     c01002e9 <readline+0x95>
c01002e3:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e7:	75 93                	jne    c010027c <readline+0x28>
            cputchar(c);
c01002e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002ec:	89 04 24             	mov    %eax,(%esp)
c01002ef:	e8 95 00 00 00       	call   c0100389 <cputchar>
            buf[i] = '\0';
c01002f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f7:	05 20 34 1c c0       	add    $0xc01c3420,%eax
c01002fc:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002ff:	b8 20 34 1c c0       	mov    $0xc01c3420,%eax
c0100304:	eb 05                	jmp    c010030b <readline+0xb7>
        }
    }
c0100306:	e9 71 ff ff ff       	jmp    c010027c <readline+0x28>
}
c010030b:	c9                   	leave  
c010030c:	c3                   	ret    
c010030d:	66 90                	xchg   %ax,%ax
c010030f:	90                   	nop

c0100310 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100310:	55                   	push   %ebp
c0100311:	89 e5                	mov    %esp,%ebp
c0100313:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100316:	8b 45 08             	mov    0x8(%ebp),%eax
c0100319:	89 04 24             	mov    %eax,(%esp)
c010031c:	e8 ad 14 00 00       	call   c01017ce <cons_putc>
    (*cnt) ++;
c0100321:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100324:	8b 00                	mov    (%eax),%eax
c0100326:	8d 50 01             	lea    0x1(%eax),%edx
c0100329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010032c:	89 10                	mov    %edx,(%eax)
}
c010032e:	c9                   	leave  
c010032f:	c3                   	ret    

c0100330 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100330:	55                   	push   %ebp
c0100331:	89 e5                	mov    %esp,%ebp
c0100333:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010033d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100340:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100344:	8b 45 08             	mov    0x8(%ebp),%eax
c0100347:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010034e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100352:	c7 04 24 10 03 10 c0 	movl   $0xc0100310,(%esp)
c0100359:	e8 a2 cc 00 00       	call   c010d000 <vprintfmt>
    return cnt;
c010035e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100361:	c9                   	leave  
c0100362:	c3                   	ret    

c0100363 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100363:	55                   	push   %ebp
c0100364:	89 e5                	mov    %esp,%ebp
c0100366:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100369:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010036f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100372:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100376:	8b 45 08             	mov    0x8(%ebp),%eax
c0100379:	89 04 24             	mov    %eax,(%esp)
c010037c:	e8 af ff ff ff       	call   c0100330 <vcprintf>
c0100381:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100384:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100387:	c9                   	leave  
c0100388:	c3                   	ret    

c0100389 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c0100389:	55                   	push   %ebp
c010038a:	89 e5                	mov    %esp,%ebp
c010038c:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010038f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100392:	89 04 24             	mov    %eax,(%esp)
c0100395:	e8 34 14 00 00       	call   c01017ce <cons_putc>
}
c010039a:	c9                   	leave  
c010039b:	c3                   	ret    

c010039c <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039c:	55                   	push   %ebp
c010039d:	89 e5                	mov    %esp,%ebp
c010039f:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003a9:	eb 13                	jmp    c01003be <cputs+0x22>
        cputch(c, &cnt);
c01003ab:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003af:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b6:	89 04 24             	mov    %eax,(%esp)
c01003b9:	e8 52 ff ff ff       	call   c0100310 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003be:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c1:	0f b6 00             	movzbl (%eax),%eax
c01003c4:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c7:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003cb:	0f 95 c0             	setne  %al
c01003ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01003d2:	84 c0                	test   %al,%al
c01003d4:	75 d5                	jne    c01003ab <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d6:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dd:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e4:	e8 27 ff ff ff       	call   c0100310 <cputch>
    return cnt;
c01003e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003ec:	c9                   	leave  
c01003ed:	c3                   	ret    

c01003ee <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ee:	55                   	push   %ebp
c01003ef:	89 e5                	mov    %esp,%ebp
c01003f1:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f4:	e8 11 14 00 00       	call   c010180a <cons_getc>
c01003f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100400:	74 f2                	je     c01003f4 <getchar+0x6>
        /* do nothing */;
    return c;
c0100402:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100405:	c9                   	leave  
c0100406:	c3                   	ret    
c0100407:	90                   	nop

c0100408 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c0100408:	55                   	push   %ebp
c0100409:	89 e5                	mov    %esp,%ebp
c010040b:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c010040e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100411:	8b 00                	mov    (%eax),%eax
c0100413:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100416:	8b 45 10             	mov    0x10(%ebp),%eax
c0100419:	8b 00                	mov    (%eax),%eax
c010041b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010041e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100425:	e9 d2 00 00 00       	jmp    c01004fc <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010042a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010042d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100430:	01 d0                	add    %edx,%eax
c0100432:	89 c2                	mov    %eax,%edx
c0100434:	c1 ea 1f             	shr    $0x1f,%edx
c0100437:	01 d0                	add    %edx,%eax
c0100439:	d1 f8                	sar    %eax
c010043b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010043e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100441:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100444:	eb 04                	jmp    c010044a <stab_binsearch+0x42>
            m --;
c0100446:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010044a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010044d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100450:	7c 1f                	jl     c0100471 <stab_binsearch+0x69>
c0100452:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100455:	89 d0                	mov    %edx,%eax
c0100457:	01 c0                	add    %eax,%eax
c0100459:	01 d0                	add    %edx,%eax
c010045b:	c1 e0 02             	shl    $0x2,%eax
c010045e:	89 c2                	mov    %eax,%edx
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	01 d0                	add    %edx,%eax
c0100465:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100469:	0f b6 c0             	movzbl %al,%eax
c010046c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010046f:	75 d5                	jne    c0100446 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100471:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100474:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100477:	7d 0b                	jge    c0100484 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100479:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010047c:	83 c0 01             	add    $0x1,%eax
c010047f:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100482:	eb 78                	jmp    c01004fc <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100484:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010048b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010048e:	89 d0                	mov    %edx,%eax
c0100490:	01 c0                	add    %eax,%eax
c0100492:	01 d0                	add    %edx,%eax
c0100494:	c1 e0 02             	shl    $0x2,%eax
c0100497:	89 c2                	mov    %eax,%edx
c0100499:	8b 45 08             	mov    0x8(%ebp),%eax
c010049c:	01 d0                	add    %edx,%eax
c010049e:	8b 40 08             	mov    0x8(%eax),%eax
c01004a1:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004a4:	73 13                	jae    c01004b9 <stab_binsearch+0xb1>
            *region_left = m;
c01004a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ac:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c01004ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004b1:	83 c0 01             	add    $0x1,%eax
c01004b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004b7:	eb 43                	jmp    c01004fc <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004bc:	89 d0                	mov    %edx,%eax
c01004be:	01 c0                	add    %eax,%eax
c01004c0:	01 d0                	add    %edx,%eax
c01004c2:	c1 e0 02             	shl    $0x2,%eax
c01004c5:	89 c2                	mov    %eax,%edx
c01004c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01004ca:	01 d0                	add    %edx,%eax
c01004cc:	8b 40 08             	mov    0x8(%eax),%eax
c01004cf:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004d2:	76 16                	jbe    c01004ea <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004da:	8b 45 10             	mov    0x10(%ebp),%eax
c01004dd:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e2:	83 e8 01             	sub    $0x1,%eax
c01004e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e8:	eb 12                	jmp    c01004fc <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004f0:	89 10                	mov    %edx,(%eax)
            l = m;
c01004f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004f8:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004ff:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0100502:	0f 8e 22 ff ff ff    	jle    c010042a <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0100508:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010050c:	75 0f                	jne    c010051d <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c010050e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100516:	8b 45 10             	mov    0x10(%ebp),%eax
c0100519:	89 10                	mov    %edx,(%eax)
c010051b:	eb 3f                	jmp    c010055c <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010051d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100520:	8b 00                	mov    (%eax),%eax
c0100522:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100525:	eb 04                	jmp    c010052b <stab_binsearch+0x123>
c0100527:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010052b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010052e:	8b 00                	mov    (%eax),%eax
c0100530:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100533:	7d 1f                	jge    c0100554 <stab_binsearch+0x14c>
c0100535:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100538:	89 d0                	mov    %edx,%eax
c010053a:	01 c0                	add    %eax,%eax
c010053c:	01 d0                	add    %edx,%eax
c010053e:	c1 e0 02             	shl    $0x2,%eax
c0100541:	89 c2                	mov    %eax,%edx
c0100543:	8b 45 08             	mov    0x8(%ebp),%eax
c0100546:	01 d0                	add    %edx,%eax
c0100548:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010054c:	0f b6 c0             	movzbl %al,%eax
c010054f:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100552:	75 d3                	jne    c0100527 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100554:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100557:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010055a:	89 10                	mov    %edx,(%eax)
    }
}
c010055c:	c9                   	leave  
c010055d:	c3                   	ret    

c010055e <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010055e:	55                   	push   %ebp
c010055f:	89 e5                	mov    %esp,%ebp
c0100561:	53                   	push   %ebx
c0100562:	83 ec 54             	sub    $0x54,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100565:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100568:	c7 00 8c db 10 c0    	movl   $0xc010db8c,(%eax)
    info->eip_line = 0;
c010056e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100571:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100578:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057b:	c7 40 08 8c db 10 c0 	movl   $0xc010db8c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100582:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100585:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010058c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010058f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100592:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100595:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100598:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010059f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c01005a6:	76 21                	jbe    c01005c9 <debuginfo_eip+0x6b>
        stabs = __STAB_BEGIN__;
c01005a8:	c7 45 f4 c0 08 11 c0 	movl   $0xc01108c0,-0xc(%ebp)
        stab_end = __STAB_END__;
c01005af:	c7 45 f0 94 81 12 c0 	movl   $0xc0128194,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005b6:	c7 45 ec 95 81 12 c0 	movl   $0xc0128195,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005bd:	c7 45 e8 e9 f0 12 c0 	movl   $0xc012f0e9,-0x18(%ebp)
c01005c4:	e9 ec 00 00 00       	jmp    c01006b5 <debuginfo_eip+0x157>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005c9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005d0:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c01005d5:	85 c0                	test   %eax,%eax
c01005d7:	74 11                	je     c01005ea <debuginfo_eip+0x8c>
c01005d9:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c01005de:	8b 40 18             	mov    0x18(%eax),%eax
c01005e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005e4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005e8:	75 0a                	jne    c01005f4 <debuginfo_eip+0x96>
            return -1;
c01005ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005ef:	e9 a6 03 00 00       	jmp    c010099a <debuginfo_eip+0x43c>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005fe:	00 
c01005ff:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0100606:	00 
c0100607:	89 44 24 04          	mov    %eax,0x4(%esp)
c010060b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010060e:	89 04 24             	mov    %eax,(%esp)
c0100611:	e8 ab 88 00 00       	call   c0108ec1 <user_mem_check>
c0100616:	85 c0                	test   %eax,%eax
c0100618:	75 0a                	jne    c0100624 <debuginfo_eip+0xc6>
            return -1;
c010061a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010061f:	e9 76 03 00 00       	jmp    c010099a <debuginfo_eip+0x43c>
        }

        stabs = usd->stabs;
c0100624:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100627:	8b 00                	mov    (%eax),%eax
c0100629:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010062c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010062f:	8b 40 04             	mov    0x4(%eax),%eax
c0100632:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100635:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100638:	8b 40 08             	mov    0x8(%eax),%eax
c010063b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010063e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100641:	8b 40 0c             	mov    0xc(%eax),%eax
c0100644:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100647:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010064a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010064d:	29 c2                	sub    %eax,%edx
c010064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100652:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100659:	00 
c010065a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010065e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100662:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100665:	89 04 24             	mov    %eax,(%esp)
c0100668:	e8 54 88 00 00       	call   c0108ec1 <user_mem_check>
c010066d:	85 c0                	test   %eax,%eax
c010066f:	75 0a                	jne    c010067b <debuginfo_eip+0x11d>
            return -1;
c0100671:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100676:	e9 1f 03 00 00       	jmp    c010099a <debuginfo_eip+0x43c>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010067b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010067e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100681:	89 d1                	mov    %edx,%ecx
c0100683:	29 c1                	sub    %eax,%ecx
c0100685:	89 c8                	mov    %ecx,%eax
c0100687:	89 c2                	mov    %eax,%edx
c0100689:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010068c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100693:	00 
c0100694:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100698:	89 44 24 04          	mov    %eax,0x4(%esp)
c010069c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010069f:	89 04 24             	mov    %eax,(%esp)
c01006a2:	e8 1a 88 00 00       	call   c0108ec1 <user_mem_check>
c01006a7:	85 c0                	test   %eax,%eax
c01006a9:	75 0a                	jne    c01006b5 <debuginfo_eip+0x157>
            return -1;
c01006ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b0:	e9 e5 02 00 00       	jmp    c010099a <debuginfo_eip+0x43c>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006bb:	76 0d                	jbe    c01006ca <debuginfo_eip+0x16c>
c01006bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006c0:	83 e8 01             	sub    $0x1,%eax
c01006c3:	0f b6 00             	movzbl (%eax),%eax
c01006c6:	84 c0                	test   %al,%al
c01006c8:	74 0a                	je     c01006d4 <debuginfo_eip+0x176>
        return -1;
c01006ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cf:	e9 c6 02 00 00       	jmp    c010099a <debuginfo_eip+0x43c>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006d4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006db:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006e1:	89 d3                	mov    %edx,%ebx
c01006e3:	29 c3                	sub    %eax,%ebx
c01006e5:	89 d8                	mov    %ebx,%eax
c01006e7:	c1 f8 02             	sar    $0x2,%eax
c01006ea:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006f0:	83 e8 01             	sub    $0x1,%eax
c01006f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01006f9:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006fd:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c0100704:	00 
c0100705:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0100708:	89 44 24 08          	mov    %eax,0x8(%esp)
c010070c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010070f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100716:	89 04 24             	mov    %eax,(%esp)
c0100719:	e8 ea fc ff ff       	call   c0100408 <stab_binsearch>
    if (lfile == 0)
c010071e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100721:	85 c0                	test   %eax,%eax
c0100723:	75 0a                	jne    c010072f <debuginfo_eip+0x1d1>
        return -1;
c0100725:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010072a:	e9 6b 02 00 00       	jmp    c010099a <debuginfo_eip+0x43c>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010072f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100732:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100735:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100738:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c010073b:	8b 45 08             	mov    0x8(%ebp),%eax
c010073e:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100742:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100749:	00 
c010074a:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010074d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100751:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100754:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100758:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010075b:	89 04 24             	mov    %eax,(%esp)
c010075e:	e8 a5 fc ff ff       	call   c0100408 <stab_binsearch>

    if (lfun <= rfun) {
c0100763:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100766:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100769:	39 c2                	cmp    %eax,%edx
c010076b:	7f 7e                	jg     c01007eb <debuginfo_eip+0x28d>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c010076d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100770:	89 c2                	mov    %eax,%edx
c0100772:	89 d0                	mov    %edx,%eax
c0100774:	01 c0                	add    %eax,%eax
c0100776:	01 d0                	add    %edx,%eax
c0100778:	c1 e0 02             	shl    $0x2,%eax
c010077b:	89 c2                	mov    %eax,%edx
c010077d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100780:	01 d0                	add    %edx,%eax
c0100782:	8b 10                	mov    (%eax),%edx
c0100784:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100787:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010078a:	89 cb                	mov    %ecx,%ebx
c010078c:	29 c3                	sub    %eax,%ebx
c010078e:	89 d8                	mov    %ebx,%eax
c0100790:	39 c2                	cmp    %eax,%edx
c0100792:	73 22                	jae    c01007b6 <debuginfo_eip+0x258>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100794:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100797:	89 c2                	mov    %eax,%edx
c0100799:	89 d0                	mov    %edx,%eax
c010079b:	01 c0                	add    %eax,%eax
c010079d:	01 d0                	add    %edx,%eax
c010079f:	c1 e0 02             	shl    $0x2,%eax
c01007a2:	89 c2                	mov    %eax,%edx
c01007a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a7:	01 d0                	add    %edx,%eax
c01007a9:	8b 10                	mov    (%eax),%edx
c01007ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01007ae:	01 c2                	add    %eax,%edx
c01007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007b3:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007b9:	89 c2                	mov    %eax,%edx
c01007bb:	89 d0                	mov    %edx,%eax
c01007bd:	01 c0                	add    %eax,%eax
c01007bf:	01 d0                	add    %edx,%eax
c01007c1:	c1 e0 02             	shl    $0x2,%eax
c01007c4:	89 c2                	mov    %eax,%edx
c01007c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007c9:	01 d0                	add    %edx,%eax
c01007cb:	8b 50 08             	mov    0x8(%eax),%edx
c01007ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d1:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d7:	8b 40 10             	mov    0x10(%eax),%eax
c01007da:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007e0:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007e6:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007e9:	eb 15                	jmp    c0100800 <debuginfo_eip+0x2a2>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01007f1:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007fd:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100803:	8b 40 08             	mov    0x8(%eax),%eax
c0100806:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010080d:	00 
c010080e:	89 04 24             	mov    %eax,(%esp)
c0100811:	e8 65 cf 00 00       	call   c010d77b <strfind>
c0100816:	89 c2                	mov    %eax,%edx
c0100818:	8b 45 0c             	mov    0xc(%ebp),%eax
c010081b:	8b 40 08             	mov    0x8(%eax),%eax
c010081e:	29 c2                	sub    %eax,%edx
c0100820:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100823:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100826:	8b 45 08             	mov    0x8(%ebp),%eax
c0100829:	89 44 24 10          	mov    %eax,0x10(%esp)
c010082d:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c0100834:	00 
c0100835:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100838:	89 44 24 08          	mov    %eax,0x8(%esp)
c010083c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010083f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100846:	89 04 24             	mov    %eax,(%esp)
c0100849:	e8 ba fb ff ff       	call   c0100408 <stab_binsearch>
    if (lline <= rline) {
c010084e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100851:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100854:	39 c2                	cmp    %eax,%edx
c0100856:	7f 24                	jg     c010087c <debuginfo_eip+0x31e>
        info->eip_line = stabs[rline].n_desc;
c0100858:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010085b:	89 c2                	mov    %eax,%edx
c010085d:	89 d0                	mov    %edx,%eax
c010085f:	01 c0                	add    %eax,%eax
c0100861:	01 d0                	add    %edx,%eax
c0100863:	c1 e0 02             	shl    $0x2,%eax
c0100866:	89 c2                	mov    %eax,%edx
c0100868:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010086b:	01 d0                	add    %edx,%eax
c010086d:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100871:	0f b7 d0             	movzwl %ax,%edx
c0100874:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100877:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010087a:	eb 13                	jmp    c010088f <debuginfo_eip+0x331>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c010087c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100881:	e9 14 01 00 00       	jmp    c010099a <debuginfo_eip+0x43c>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100886:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100889:	83 e8 01             	sub    $0x1,%eax
c010088c:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010088f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100892:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100895:	39 c2                	cmp    %eax,%edx
c0100897:	7c 56                	jl     c01008ef <debuginfo_eip+0x391>
           && stabs[lline].n_type != N_SOL
c0100899:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	89 d0                	mov    %edx,%eax
c01008a0:	01 c0                	add    %eax,%eax
c01008a2:	01 d0                	add    %edx,%eax
c01008a4:	c1 e0 02             	shl    $0x2,%eax
c01008a7:	89 c2                	mov    %eax,%edx
c01008a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008ac:	01 d0                	add    %edx,%eax
c01008ae:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b2:	3c 84                	cmp    $0x84,%al
c01008b4:	74 39                	je     c01008ef <debuginfo_eip+0x391>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008b9:	89 c2                	mov    %eax,%edx
c01008bb:	89 d0                	mov    %edx,%eax
c01008bd:	01 c0                	add    %eax,%eax
c01008bf:	01 d0                	add    %edx,%eax
c01008c1:	c1 e0 02             	shl    $0x2,%eax
c01008c4:	89 c2                	mov    %eax,%edx
c01008c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008c9:	01 d0                	add    %edx,%eax
c01008cb:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008cf:	3c 64                	cmp    $0x64,%al
c01008d1:	75 b3                	jne    c0100886 <debuginfo_eip+0x328>
c01008d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008d6:	89 c2                	mov    %eax,%edx
c01008d8:	89 d0                	mov    %edx,%eax
c01008da:	01 c0                	add    %eax,%eax
c01008dc:	01 d0                	add    %edx,%eax
c01008de:	c1 e0 02             	shl    $0x2,%eax
c01008e1:	89 c2                	mov    %eax,%edx
c01008e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008e6:	01 d0                	add    %edx,%eax
c01008e8:	8b 40 08             	mov    0x8(%eax),%eax
c01008eb:	85 c0                	test   %eax,%eax
c01008ed:	74 97                	je     c0100886 <debuginfo_eip+0x328>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008ef:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008f5:	39 c2                	cmp    %eax,%edx
c01008f7:	7c 48                	jl     c0100941 <debuginfo_eip+0x3e3>
c01008f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008fc:	89 c2                	mov    %eax,%edx
c01008fe:	89 d0                	mov    %edx,%eax
c0100900:	01 c0                	add    %eax,%eax
c0100902:	01 d0                	add    %edx,%eax
c0100904:	c1 e0 02             	shl    $0x2,%eax
c0100907:	89 c2                	mov    %eax,%edx
c0100909:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010090c:	01 d0                	add    %edx,%eax
c010090e:	8b 10                	mov    (%eax),%edx
c0100910:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100913:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100916:	89 cb                	mov    %ecx,%ebx
c0100918:	29 c3                	sub    %eax,%ebx
c010091a:	89 d8                	mov    %ebx,%eax
c010091c:	39 c2                	cmp    %eax,%edx
c010091e:	73 21                	jae    c0100941 <debuginfo_eip+0x3e3>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100920:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100923:	89 c2                	mov    %eax,%edx
c0100925:	89 d0                	mov    %edx,%eax
c0100927:	01 c0                	add    %eax,%eax
c0100929:	01 d0                	add    %edx,%eax
c010092b:	c1 e0 02             	shl    $0x2,%eax
c010092e:	89 c2                	mov    %eax,%edx
c0100930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100933:	01 d0                	add    %edx,%eax
c0100935:	8b 10                	mov    (%eax),%edx
c0100937:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010093a:	01 c2                	add    %eax,%edx
c010093c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010093f:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100941:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100944:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100947:	39 c2                	cmp    %eax,%edx
c0100949:	7d 4a                	jge    c0100995 <debuginfo_eip+0x437>
        for (lline = lfun + 1;
c010094b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010094e:	83 c0 01             	add    $0x1,%eax
c0100951:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100954:	eb 18                	jmp    c010096e <debuginfo_eip+0x410>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100956:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100959:	8b 40 14             	mov    0x14(%eax),%eax
c010095c:	8d 50 01             	lea    0x1(%eax),%edx
c010095f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100962:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100965:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100968:	83 c0 01             	add    $0x1,%eax
c010096b:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c010096e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100971:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100974:	39 c2                	cmp    %eax,%edx
c0100976:	7d 1d                	jge    c0100995 <debuginfo_eip+0x437>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100978:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010097b:	89 c2                	mov    %eax,%edx
c010097d:	89 d0                	mov    %edx,%eax
c010097f:	01 c0                	add    %eax,%eax
c0100981:	01 d0                	add    %edx,%eax
c0100983:	c1 e0 02             	shl    $0x2,%eax
c0100986:	89 c2                	mov    %eax,%edx
c0100988:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010098b:	01 d0                	add    %edx,%eax
c010098d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100991:	3c a0                	cmp    $0xa0,%al
c0100993:	74 c1                	je     c0100956 <debuginfo_eip+0x3f8>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100995:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010099a:	83 c4 54             	add    $0x54,%esp
c010099d:	5b                   	pop    %ebx
c010099e:	5d                   	pop    %ebp
c010099f:	c3                   	ret    

c01009a0 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c01009a0:	55                   	push   %ebp
c01009a1:	89 e5                	mov    %esp,%ebp
c01009a3:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c01009a6:	c7 04 24 96 db 10 c0 	movl   $0xc010db96,(%esp)
c01009ad:	e8 b1 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c01009b2:	c7 44 24 04 2c 00 10 	movl   $0xc010002c,0x4(%esp)
c01009b9:	c0 
c01009ba:	c7 04 24 af db 10 c0 	movl   $0xc010dbaf,(%esp)
c01009c1:	e8 9d f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009c6:	c7 44 24 04 c2 da 10 	movl   $0xc010dac2,0x4(%esp)
c01009cd:	c0 
c01009ce:	c7 04 24 c7 db 10 c0 	movl   $0xc010dbc7,(%esp)
c01009d5:	e8 89 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009da:	c7 44 24 04 f9 33 1c 	movl   $0xc01c33f9,0x4(%esp)
c01009e1:	c0 
c01009e2:	c7 04 24 df db 10 c0 	movl   $0xc010dbdf,(%esp)
c01009e9:	e8 75 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009ee:	c7 44 24 04 4c 67 1c 	movl   $0xc01c674c,0x4(%esp)
c01009f5:	c0 
c01009f6:	c7 04 24 f7 db 10 c0 	movl   $0xc010dbf7,(%esp)
c01009fd:	e8 61 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a02:	b8 4c 67 1c c0       	mov    $0xc01c674c,%eax
c0100a07:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a0d:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c0100a12:	89 d1                	mov    %edx,%ecx
c0100a14:	29 c1                	sub    %eax,%ecx
c0100a16:	89 c8                	mov    %ecx,%eax
c0100a18:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a1e:	85 c0                	test   %eax,%eax
c0100a20:	0f 48 c2             	cmovs  %edx,%eax
c0100a23:	c1 f8 0a             	sar    $0xa,%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	c7 04 24 10 dc 10 c0 	movl   $0xc010dc10,(%esp)
c0100a31:	e8 2d f9 ff ff       	call   c0100363 <cprintf>
}
c0100a36:	c9                   	leave  
c0100a37:	c3                   	ret    

c0100a38 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a38:	55                   	push   %ebp
c0100a39:	89 e5                	mov    %esp,%ebp
c0100a3b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a41:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a4b:	89 04 24             	mov    %eax,(%esp)
c0100a4e:	e8 0b fb ff ff       	call   c010055e <debuginfo_eip>
c0100a53:	85 c0                	test   %eax,%eax
c0100a55:	74 15                	je     c0100a6c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a57:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a5e:	c7 04 24 3a dc 10 c0 	movl   $0xc010dc3a,(%esp)
c0100a65:	e8 f9 f8 ff ff       	call   c0100363 <cprintf>
c0100a6a:	eb 6d                	jmp    c0100ad9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a73:	eb 1c                	jmp    c0100a91 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a7b:	01 d0                	add    %edx,%eax
c0100a7d:	0f b6 00             	movzbl (%eax),%eax
c0100a80:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a89:	01 ca                	add    %ecx,%edx
c0100a8b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a8d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a97:	7f dc                	jg     c0100a75 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a99:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aa2:	01 d0                	add    %edx,%eax
c0100aa4:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100aa7:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100aaa:	8b 55 08             	mov    0x8(%ebp),%edx
c0100aad:	89 d1                	mov    %edx,%ecx
c0100aaf:	29 c1                	sub    %eax,%ecx
c0100ab1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100ab4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100ab7:	89 4c 24 10          	mov    %ecx,0x10(%esp)
                fnname, eip - info.eip_fn_addr);
c0100abb:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100ac1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100ac5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100ac9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100acd:	c7 04 24 56 dc 10 c0 	movl   $0xc010dc56,(%esp)
c0100ad4:	e8 8a f8 ff ff       	call   c0100363 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ad9:	c9                   	leave  
c0100ada:	c3                   	ret    

c0100adb <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100adb:	55                   	push   %ebp
c0100adc:	89 e5                	mov    %esp,%ebp
c0100ade:	53                   	push   %ebx
c0100adf:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ae2:	8b 5d 04             	mov    0x4(%ebp),%ebx
c0100ae5:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return eip;
c0100ae8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0100aeb:	83 c4 10             	add    $0x10,%esp
c0100aee:	5b                   	pop    %ebx
c0100aef:	5d                   	pop    %ebp
c0100af0:	c3                   	ret    

c0100af1 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100af1:	55                   	push   %ebp
c0100af2:	89 e5                	mov    %esp,%ebp
c0100af4:	53                   	push   %ebx
c0100af5:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100af8:	89 eb                	mov    %ebp,%ebx
c0100afa:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    return ebp;
c0100afd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
c0100b00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0100b03:	e8 d3 ff ff ff       	call   c0100adb <read_eip>
c0100b08:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i, j;
    for (i = 0; i <= STACKFRAME_DEPTH; i++) {
c0100b0b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b12:	e9 80 00 00 00       	jmp    c0100b97 <print_stackframe+0xa6>
	cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100b1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b25:	c7 04 24 68 dc 10 c0 	movl   $0xc010dc68,(%esp)
c0100b2c:	e8 32 f8 ff ff       	call   c0100363 <cprintf>
        for (j = 0; j <= 3; j ++)
c0100b31:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b38:	eb 26                	jmp    c0100b60 <print_stackframe+0x6f>
	    cprintf("0x%08x ", *(uint32_t *)(ebp + 8 + (j << 2)));
c0100b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b3d:	c1 e0 02             	shl    $0x2,%eax
c0100b40:	89 c2                	mov    %eax,%edx
c0100b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b45:	01 d0                	add    %edx,%eax
c0100b47:	83 c0 08             	add    $0x8,%eax
c0100b4a:	8b 00                	mov    (%eax),%eax
c0100b4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b50:	c7 04 24 84 dc 10 c0 	movl   $0xc010dc84,(%esp)
c0100b57:	e8 07 f8 ff ff       	call   c0100363 <cprintf>
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i, j;
    for (i = 0; i <= STACKFRAME_DEPTH; i++) {
	cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        for (j = 0; j <= 3; j ++)
c0100b5c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b60:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b64:	7e d4                	jle    c0100b3a <print_stackframe+0x49>
	    cprintf("0x%08x ", *(uint32_t *)(ebp + 8 + (j << 2)));
	cprintf("\n");
c0100b66:	c7 04 24 8c dc 10 c0 	movl   $0xc010dc8c,(%esp)
c0100b6d:	e8 f1 f7 ff ff       	call   c0100363 <cprintf>
	print_debuginfo(((uintptr_t)eip)-1); 
c0100b72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b75:	83 e8 01             	sub    $0x1,%eax
c0100b78:	89 04 24             	mov    %eax,(%esp)
c0100b7b:	e8 b8 fe ff ff       	call   c0100a38 <print_debuginfo>
        eip = *(uint32_t *)(ebp + 4);
c0100b80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b83:	83 c0 04             	add    $0x4,%eax
c0100b86:	8b 00                	mov    (%eax),%eax
c0100b88:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = *(uint32_t *)(ebp);
c0100b8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b8e:	8b 00                	mov    (%eax),%eax
c0100b90:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i, j;
    for (i = 0; i <= STACKFRAME_DEPTH; i++) {
c0100b93:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b97:	83 7d ec 14          	cmpl   $0x14,-0x14(%ebp)
c0100b9b:	0f 8e 76 ff ff ff    	jle    c0100b17 <print_stackframe+0x26>
	cprintf("\n");
	print_debuginfo(((uintptr_t)eip)-1); 
        eip = *(uint32_t *)(ebp + 4);
        ebp = *(uint32_t *)(ebp);
    }
}
c0100ba1:	83 c4 34             	add    $0x34,%esp
c0100ba4:	5b                   	pop    %ebx
c0100ba5:	5d                   	pop    %ebp
c0100ba6:	c3                   	ret    
c0100ba7:	90                   	nop

c0100ba8 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100ba8:	55                   	push   %ebp
c0100ba9:	89 e5                	mov    %esp,%ebp
c0100bab:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100bae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bb5:	eb 0d                	jmp    c0100bc4 <parse+0x1c>
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
c0100bb7:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bb8:	eb 0a                	jmp    c0100bc4 <parse+0x1c>
            *buf ++ = '\0';
c0100bba:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bbd:	c6 00 00             	movb   $0x0,(%eax)
c0100bc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bc7:	0f b6 00             	movzbl (%eax),%eax
c0100bca:	84 c0                	test   %al,%al
c0100bcc:	74 1d                	je     c0100beb <parse+0x43>
c0100bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd1:	0f b6 00             	movzbl (%eax),%eax
c0100bd4:	0f be c0             	movsbl %al,%eax
c0100bd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bdb:	c7 04 24 10 dd 10 c0 	movl   $0xc010dd10,(%esp)
c0100be2:	e8 61 cb 00 00       	call   c010d748 <strchr>
c0100be7:	85 c0                	test   %eax,%eax
c0100be9:	75 cf                	jne    c0100bba <parse+0x12>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100beb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bee:	0f b6 00             	movzbl (%eax),%eax
c0100bf1:	84 c0                	test   %al,%al
c0100bf3:	74 64                	je     c0100c59 <parse+0xb1>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bf5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bf9:	75 14                	jne    c0100c0f <parse+0x67>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bfb:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100c02:	00 
c0100c03:	c7 04 24 15 dd 10 c0 	movl   $0xc010dd15,(%esp)
c0100c0a:	e8 54 f7 ff ff       	call   c0100363 <cprintf>
        }
        argv[argc ++] = buf;
c0100c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c1c:	01 c2                	add    %eax,%edx
c0100c1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c21:	89 02                	mov    %eax,(%edx)
c0100c23:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c27:	eb 04                	jmp    c0100c2d <parse+0x85>
            buf ++;
c0100c29:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c30:	0f b6 00             	movzbl (%eax),%eax
c0100c33:	84 c0                	test   %al,%al
c0100c35:	74 80                	je     c0100bb7 <parse+0xf>
c0100c37:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c3a:	0f b6 00             	movzbl (%eax),%eax
c0100c3d:	0f be c0             	movsbl %al,%eax
c0100c40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c44:	c7 04 24 10 dd 10 c0 	movl   $0xc010dd10,(%esp)
c0100c4b:	e8 f8 ca 00 00       	call   c010d748 <strchr>
c0100c50:	85 c0                	test   %eax,%eax
c0100c52:	74 d5                	je     c0100c29 <parse+0x81>
            buf ++;
        }
    }
c0100c54:	e9 5e ff ff ff       	jmp    c0100bb7 <parse+0xf>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100c59:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c5d:	c9                   	leave  
c0100c5e:	c3                   	ret    

c0100c5f <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c5f:	55                   	push   %ebp
c0100c60:	89 e5                	mov    %esp,%ebp
c0100c62:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c65:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c6f:	89 04 24             	mov    %eax,(%esp)
c0100c72:	e8 31 ff ff ff       	call   c0100ba8 <parse>
c0100c77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c7e:	75 0a                	jne    c0100c8a <runcmd+0x2b>
        return 0;
c0100c80:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c85:	e9 85 00 00 00       	jmp    c0100d0f <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c91:	eb 5c                	jmp    c0100cef <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c93:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c96:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c99:	89 d0                	mov    %edx,%eax
c0100c9b:	01 c0                	add    %eax,%eax
c0100c9d:	01 d0                	add    %edx,%eax
c0100c9f:	c1 e0 02             	shl    $0x2,%eax
c0100ca2:	05 20 20 13 c0       	add    $0xc0132020,%eax
c0100ca7:	8b 00                	mov    (%eax),%eax
c0100ca9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100cad:	89 04 24             	mov    %eax,(%esp)
c0100cb0:	e8 ee c9 00 00       	call   c010d6a3 <strcmp>
c0100cb5:	85 c0                	test   %eax,%eax
c0100cb7:	75 32                	jne    c0100ceb <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100cb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100cbc:	89 d0                	mov    %edx,%eax
c0100cbe:	01 c0                	add    %eax,%eax
c0100cc0:	01 d0                	add    %edx,%eax
c0100cc2:	c1 e0 02             	shl    $0x2,%eax
c0100cc5:	05 20 20 13 c0       	add    $0xc0132020,%eax
c0100cca:	8b 40 08             	mov    0x8(%eax),%eax
c0100ccd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cd0:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cd3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cda:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cdd:	83 c2 04             	add    $0x4,%edx
c0100ce0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ce4:	89 0c 24             	mov    %ecx,(%esp)
c0100ce7:	ff d0                	call   *%eax
c0100ce9:	eb 24                	jmp    c0100d0f <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ceb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cf2:	83 f8 02             	cmp    $0x2,%eax
c0100cf5:	76 9c                	jbe    c0100c93 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cf7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cfe:	c7 04 24 33 dd 10 c0 	movl   $0xc010dd33,(%esp)
c0100d05:	e8 59 f6 ff ff       	call   c0100363 <cprintf>
    return 0;
c0100d0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d0f:	c9                   	leave  
c0100d10:	c3                   	ret    

c0100d11 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d11:	55                   	push   %ebp
c0100d12:	89 e5                	mov    %esp,%ebp
c0100d14:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d17:	c7 04 24 4c dd 10 c0 	movl   $0xc010dd4c,(%esp)
c0100d1e:	e8 40 f6 ff ff       	call   c0100363 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d23:	c7 04 24 74 dd 10 c0 	movl   $0xc010dd74,(%esp)
c0100d2a:	e8 34 f6 ff ff       	call   c0100363 <cprintf>

    if (tf != NULL) {
c0100d2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d33:	74 0e                	je     c0100d43 <kmonitor+0x32>
        print_trapframe(tf);
c0100d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d38:	89 04 24             	mov    %eax,(%esp)
c0100d3b:	e8 76 17 00 00       	call   c01024b6 <print_trapframe>
c0100d40:	eb 01                	jmp    c0100d43 <kmonitor+0x32>
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
            }
        }
    }
c0100d42:	90                   	nop
        print_trapframe(tf);
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d43:	c7 04 24 99 dd 10 c0 	movl   $0xc010dd99,(%esp)
c0100d4a:	e8 05 f5 ff ff       	call   c0100254 <readline>
c0100d4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d56:	74 ea                	je     c0100d42 <kmonitor+0x31>
            if (runcmd(buf, tf) < 0) {
c0100d58:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d62:	89 04 24             	mov    %eax,(%esp)
c0100d65:	e8 f5 fe ff ff       	call   c0100c5f <runcmd>
c0100d6a:	85 c0                	test   %eax,%eax
c0100d6c:	79 d4                	jns    c0100d42 <kmonitor+0x31>
                break;
c0100d6e:	90                   	nop
            }
        }
    }
}
c0100d6f:	c9                   	leave  
c0100d70:	c3                   	ret    

c0100d71 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d71:	55                   	push   %ebp
c0100d72:	89 e5                	mov    %esp,%ebp
c0100d74:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d7e:	eb 3f                	jmp    c0100dbf <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d80:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d83:	89 d0                	mov    %edx,%eax
c0100d85:	01 c0                	add    %eax,%eax
c0100d87:	01 d0                	add    %edx,%eax
c0100d89:	c1 e0 02             	shl    $0x2,%eax
c0100d8c:	05 20 20 13 c0       	add    $0xc0132020,%eax
c0100d91:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d97:	89 d0                	mov    %edx,%eax
c0100d99:	01 c0                	add    %eax,%eax
c0100d9b:	01 d0                	add    %edx,%eax
c0100d9d:	c1 e0 02             	shl    $0x2,%eax
c0100da0:	05 20 20 13 c0       	add    $0xc0132020,%eax
c0100da5:	8b 00                	mov    (%eax),%eax
c0100da7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100dab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100daf:	c7 04 24 9d dd 10 c0 	movl   $0xc010dd9d,(%esp)
c0100db6:	e8 a8 f5 ff ff       	call   c0100363 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dbb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc2:	83 f8 02             	cmp    $0x2,%eax
c0100dc5:	76 b9                	jbe    c0100d80 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100dc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dcc:	c9                   	leave  
c0100dcd:	c3                   	ret    

c0100dce <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100dce:	55                   	push   %ebp
c0100dcf:	89 e5                	mov    %esp,%ebp
c0100dd1:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dd4:	e8 c7 fb ff ff       	call   c01009a0 <print_kerninfo>
    return 0;
c0100dd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dde:	c9                   	leave  
c0100ddf:	c3                   	ret    

c0100de0 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100de0:	55                   	push   %ebp
c0100de1:	89 e5                	mov    %esp,%ebp
c0100de3:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100de6:	e8 06 fd ff ff       	call   c0100af1 <print_stackframe>
    return 0;
c0100deb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100df0:	c9                   	leave  
c0100df1:	c3                   	ret    
c0100df2:	66 90                	xchg   %ax,%ax

c0100df4 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100df4:	55                   	push   %ebp
c0100df5:	89 e5                	mov    %esp,%ebp
c0100df7:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100dfa:	a1 20 38 1c c0       	mov    0xc01c3820,%eax
c0100dff:	85 c0                	test   %eax,%eax
c0100e01:	75 4a                	jne    c0100e4d <__panic+0x59>
        goto panic_dead;
    }
    is_panic = 1;
c0100e03:	c7 05 20 38 1c c0 01 	movl   $0x1,0xc01c3820
c0100e0a:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100e0d:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100e13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e16:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e21:	c7 04 24 a6 dd 10 c0 	movl   $0xc010dda6,(%esp)
c0100e28:	e8 36 f5 ff ff       	call   c0100363 <cprintf>
    vcprintf(fmt, ap);
c0100e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e34:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e37:	89 04 24             	mov    %eax,(%esp)
c0100e3a:	e8 f1 f4 ff ff       	call   c0100330 <vcprintf>
    cprintf("\n");
c0100e3f:	c7 04 24 c2 dd 10 c0 	movl   $0xc010ddc2,(%esp)
c0100e46:	e8 18 f5 ff ff       	call   c0100363 <cprintf>
c0100e4b:	eb 01                	jmp    c0100e4e <__panic+0x5a>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100e4d:	90                   	nop
    vcprintf(fmt, ap);
    cprintf("\n");
    va_end(ap);

panic_dead:
    intr_disable();
c0100e4e:	e8 c7 12 00 00       	call   c010211a <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e53:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e5a:	e8 b2 fe ff ff       	call   c0100d11 <kmonitor>
    }
c0100e5f:	eb f2                	jmp    c0100e53 <__panic+0x5f>

c0100e61 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e61:	55                   	push   %ebp
c0100e62:	89 e5                	mov    %esp,%ebp
c0100e64:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e67:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e74:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e7b:	c7 04 24 c4 dd 10 c0 	movl   $0xc010ddc4,(%esp)
c0100e82:	e8 dc f4 ff ff       	call   c0100363 <cprintf>
    vcprintf(fmt, ap);
c0100e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e8e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e91:	89 04 24             	mov    %eax,(%esp)
c0100e94:	e8 97 f4 ff ff       	call   c0100330 <vcprintf>
    cprintf("\n");
c0100e99:	c7 04 24 c2 dd 10 c0 	movl   $0xc010ddc2,(%esp)
c0100ea0:	e8 be f4 ff ff       	call   c0100363 <cprintf>
    va_end(ap);
}
c0100ea5:	c9                   	leave  
c0100ea6:	c3                   	ret    

c0100ea7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100ea7:	55                   	push   %ebp
c0100ea8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100eaa:	a1 20 38 1c c0       	mov    0xc01c3820,%eax
}
c0100eaf:	5d                   	pop    %ebp
c0100eb0:	c3                   	ret    
c0100eb1:	66 90                	xchg   %ax,%ax
c0100eb3:	90                   	nop

c0100eb4 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100eb4:	55                   	push   %ebp
c0100eb5:	89 e5                	mov    %esp,%ebp
c0100eb7:	83 ec 28             	sub    $0x28,%esp
c0100eba:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100ec0:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ec4:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100ec8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100ecc:	ee                   	out    %al,(%dx)
c0100ecd:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100ed3:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100ed7:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100edb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100edf:	ee                   	out    %al,(%dx)
c0100ee0:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ee6:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100eea:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100eee:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ef2:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ef3:	c7 05 d8 64 1c c0 00 	movl   $0x0,0xc01c64d8
c0100efa:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100efd:	c7 04 24 e2 dd 10 c0 	movl   $0xc010dde2,(%esp)
c0100f04:	e8 5a f4 ff ff       	call   c0100363 <cprintf>
    pic_enable(IRQ_TIMER);
c0100f09:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f10:	e8 63 12 00 00       	call   c0102178 <pic_enable>
}
c0100f15:	c9                   	leave  
c0100f16:	c3                   	ret    
c0100f17:	90                   	nop

c0100f18 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100f18:	55                   	push   %ebp
c0100f19:	89 e5                	mov    %esp,%ebp
c0100f1b:	53                   	push   %ebx
c0100f1c:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100f1f:	9c                   	pushf  
c0100f20:	5b                   	pop    %ebx
c0100f21:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0100f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f27:	25 00 02 00 00       	and    $0x200,%eax
c0100f2c:	85 c0                	test   %eax,%eax
c0100f2e:	74 0c                	je     c0100f3c <__intr_save+0x24>
        intr_disable();
c0100f30:	e8 e5 11 00 00       	call   c010211a <intr_disable>
        return 1;
c0100f35:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f3a:	eb 05                	jmp    c0100f41 <__intr_save+0x29>
    }
    return 0;
c0100f3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f41:	83 c4 14             	add    $0x14,%esp
c0100f44:	5b                   	pop    %ebx
c0100f45:	5d                   	pop    %ebp
c0100f46:	c3                   	ret    

c0100f47 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f47:	55                   	push   %ebp
c0100f48:	89 e5                	mov    %esp,%ebp
c0100f4a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f51:	74 05                	je     c0100f58 <__intr_restore+0x11>
        intr_enable();
c0100f53:	e8 bc 11 00 00       	call   c0102114 <intr_enable>
    }
}
c0100f58:	c9                   	leave  
c0100f59:	c3                   	ret    

c0100f5a <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f5a:	55                   	push   %ebp
c0100f5b:	89 e5                	mov    %esp,%ebp
c0100f5d:	53                   	push   %ebx
c0100f5e:	83 ec 14             	sub    $0x14,%esp
c0100f61:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f67:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100f6b:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f6f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f73:	ec                   	in     (%dx),%al
c0100f74:	89 c3                	mov    %eax,%ebx
c0100f76:	88 5d f9             	mov    %bl,-0x7(%ebp)
c0100f79:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f7f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100f83:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f87:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f8b:	ec                   	in     (%dx),%al
c0100f8c:	89 c3                	mov    %eax,%ebx
c0100f8e:	88 5d f5             	mov    %bl,-0xb(%ebp)
c0100f91:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f97:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100f9b:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f9f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100fa3:	ec                   	in     (%dx),%al
c0100fa4:	89 c3                	mov    %eax,%ebx
c0100fa6:	88 5d f1             	mov    %bl,-0xf(%ebp)
c0100fa9:	66 c7 45 ee 84 00    	movw   $0x84,-0x12(%ebp)
c0100faf:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fb3:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100fb7:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100fbb:	ec                   	in     (%dx),%al
c0100fbc:	89 c3                	mov    %eax,%ebx
c0100fbe:	88 5d ed             	mov    %bl,-0x13(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100fc1:	83 c4 14             	add    $0x14,%esp
c0100fc4:	5b                   	pop    %ebx
c0100fc5:	5d                   	pop    %ebp
c0100fc6:	c3                   	ret    

c0100fc7 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100fc7:	55                   	push   %ebp
c0100fc8:	89 e5                	mov    %esp,%ebp
c0100fca:	53                   	push   %ebx
c0100fcb:	83 ec 24             	sub    $0x24,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100fce:	c7 45 f8 00 80 0b c0 	movl   $0xc00b8000,-0x8(%ebp)
    uint16_t was = *cp;
c0100fd5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fd8:	0f b7 00             	movzwl (%eax),%eax
c0100fdb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100fdf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fe2:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100fe7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fea:	0f b7 00             	movzwl (%eax),%eax
c0100fed:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100ff1:	74 12                	je     c0101005 <cga_init+0x3e>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100ff3:	c7 45 f8 00 00 0b c0 	movl   $0xc00b0000,-0x8(%ebp)
        addr_6845 = MONO_BASE;
c0100ffa:	66 c7 05 46 38 1c c0 	movw   $0x3b4,0xc01c3846
c0101001:	b4 03 
c0101003:	eb 13                	jmp    c0101018 <cga_init+0x51>
    } else {
        *cp = was;
c0101005:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101008:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010100c:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c010100f:	66 c7 05 46 38 1c c0 	movw   $0x3d4,0xc01c3846
c0101016:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0101018:	0f b7 05 46 38 1c c0 	movzwl 0xc01c3846,%eax
c010101f:	0f b7 c0             	movzwl %ax,%eax
c0101022:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101026:	c6 45 ed 0e          	movb   $0xe,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010102a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010102e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101032:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101033:	0f b7 05 46 38 1c c0 	movzwl 0xc01c3846,%eax
c010103a:	83 c0 01             	add    $0x1,%eax
c010103d:	0f b7 c0             	movzwl %ax,%eax
c0101040:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101044:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101048:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010104c:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	89 c3                	mov    %eax,%ebx
c0101053:	88 5d e9             	mov    %bl,-0x17(%ebp)
    return data;
c0101056:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010105a:	0f b6 c0             	movzbl %al,%eax
c010105d:	c1 e0 08             	shl    $0x8,%eax
c0101060:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(addr_6845, 15);
c0101063:	0f b7 05 46 38 1c c0 	movzwl 0xc01c3846,%eax
c010106a:	0f b7 c0             	movzwl %ax,%eax
c010106d:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c0101071:	c6 45 e5 0f          	movb   $0xf,-0x1b(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101075:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101079:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010107d:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010107e:	0f b7 05 46 38 1c c0 	movzwl 0xc01c3846,%eax
c0101085:	83 c0 01             	add    $0x1,%eax
c0101088:	0f b7 c0             	movzwl %ax,%eax
c010108b:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010108f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101093:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101097:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010109b:	ec                   	in     (%dx),%al
c010109c:	89 c3                	mov    %eax,%ebx
c010109e:	88 5d e1             	mov    %bl,-0x1f(%ebp)
    return data;
c01010a1:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010a5:	0f b6 c0             	movzbl %al,%eax
c01010a8:	09 45 f0             	or     %eax,-0x10(%ebp)

    crt_buf = (uint16_t*) cp;
c01010ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01010ae:	a3 40 38 1c c0       	mov    %eax,0xc01c3840
    crt_pos = pos;
c01010b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01010b6:	66 a3 44 38 1c c0    	mov    %ax,0xc01c3844
}
c01010bc:	83 c4 24             	add    $0x24,%esp
c01010bf:	5b                   	pop    %ebx
c01010c0:	5d                   	pop    %ebp
c01010c1:	c3                   	ret    

c01010c2 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01010c2:	55                   	push   %ebp
c01010c3:	89 e5                	mov    %esp,%ebp
c01010c5:	53                   	push   %ebx
c01010c6:	83 ec 54             	sub    $0x54,%esp
c01010c9:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01010cf:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d3:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01010d7:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01010db:	ee                   	out    %al,(%dx)
c01010dc:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01010e2:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01010e6:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010ea:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010ee:	ee                   	out    %al,(%dx)
c01010ef:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01010f5:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01010f9:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010fd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101101:	ee                   	out    %al,(%dx)
c0101102:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101108:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c010110c:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101110:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101114:	ee                   	out    %al,(%dx)
c0101115:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c010111b:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c010111f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101123:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101127:	ee                   	out    %al,(%dx)
c0101128:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c010112e:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c0101132:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101136:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010113a:	ee                   	out    %al,(%dx)
c010113b:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0101141:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101145:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101149:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010114d:	ee                   	out    %al,(%dx)
c010114e:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101154:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101158:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c010115c:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101160:	ec                   	in     (%dx),%al
c0101161:	89 c3                	mov    %eax,%ebx
c0101163:	88 5d d9             	mov    %bl,-0x27(%ebp)
    return data;
c0101166:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010116a:	3c ff                	cmp    $0xff,%al
c010116c:	0f 95 c0             	setne  %al
c010116f:	0f b6 c0             	movzbl %al,%eax
c0101172:	a3 48 38 1c c0       	mov    %eax,0xc01c3848
c0101177:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010117d:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101181:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101185:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101189:	ec                   	in     (%dx),%al
c010118a:	89 c3                	mov    %eax,%ebx
c010118c:	88 5d d5             	mov    %bl,-0x2b(%ebp)
c010118f:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101195:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101199:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c010119d:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c01011a1:	ec                   	in     (%dx),%al
c01011a2:	89 c3                	mov    %eax,%ebx
c01011a4:	88 5d d1             	mov    %bl,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c01011a7:	a1 48 38 1c c0       	mov    0xc01c3848,%eax
c01011ac:	85 c0                	test   %eax,%eax
c01011ae:	74 0c                	je     c01011bc <serial_init+0xfa>
        pic_enable(IRQ_COM1);
c01011b0:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01011b7:	e8 bc 0f 00 00       	call   c0102178 <pic_enable>
    }
}
c01011bc:	83 c4 54             	add    $0x54,%esp
c01011bf:	5b                   	pop    %ebx
c01011c0:	5d                   	pop    %ebp
c01011c1:	c3                   	ret    

c01011c2 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c01011c2:	55                   	push   %ebp
c01011c3:	89 e5                	mov    %esp,%ebp
c01011c5:	53                   	push   %ebx
c01011c6:	83 ec 24             	sub    $0x24,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01011c9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01011d0:	eb 09                	jmp    c01011db <lpt_putc_sub+0x19>
        delay();
c01011d2:	e8 83 fd ff ff       	call   c0100f5a <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01011d7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01011db:	66 c7 45 f6 79 03    	movw   $0x379,-0xa(%ebp)
c01011e1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01011e5:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01011e9:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01011ed:	ec                   	in     (%dx),%al
c01011ee:	89 c3                	mov    %eax,%ebx
c01011f0:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c01011f3:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01011f7:	84 c0                	test   %al,%al
c01011f9:	78 09                	js     c0101204 <lpt_putc_sub+0x42>
c01011fb:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c0101202:	7e ce                	jle    c01011d2 <lpt_putc_sub+0x10>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101204:	8b 45 08             	mov    0x8(%ebp),%eax
c0101207:	0f b6 c0             	movzbl %al,%eax
c010120a:	66 c7 45 f2 78 03    	movw   $0x378,-0xe(%ebp)
c0101210:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101213:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101217:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010121b:	ee                   	out    %al,(%dx)
c010121c:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c0101222:	c6 45 ed 0d          	movb   $0xd,-0x13(%ebp)
c0101226:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010122a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010122e:	ee                   	out    %al,(%dx)
c010122f:	66 c7 45 ea 7a 03    	movw   $0x37a,-0x16(%ebp)
c0101235:	c6 45 e9 08          	movb   $0x8,-0x17(%ebp)
c0101239:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010123d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101241:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101242:	83 c4 24             	add    $0x24,%esp
c0101245:	5b                   	pop    %ebx
c0101246:	5d                   	pop    %ebp
c0101247:	c3                   	ret    

c0101248 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101248:	55                   	push   %ebp
c0101249:	89 e5                	mov    %esp,%ebp
c010124b:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010124e:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101252:	74 0d                	je     c0101261 <lpt_putc+0x19>
        lpt_putc_sub(c);
c0101254:	8b 45 08             	mov    0x8(%ebp),%eax
c0101257:	89 04 24             	mov    %eax,(%esp)
c010125a:	e8 63 ff ff ff       	call   c01011c2 <lpt_putc_sub>
c010125f:	eb 24                	jmp    c0101285 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c0101261:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101268:	e8 55 ff ff ff       	call   c01011c2 <lpt_putc_sub>
        lpt_putc_sub(' ');
c010126d:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101274:	e8 49 ff ff ff       	call   c01011c2 <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101279:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101280:	e8 3d ff ff ff       	call   c01011c2 <lpt_putc_sub>
    }
}
c0101285:	c9                   	leave  
c0101286:	c3                   	ret    

c0101287 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101287:	55                   	push   %ebp
c0101288:	89 e5                	mov    %esp,%ebp
c010128a:	53                   	push   %ebx
c010128b:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c010128e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101291:	b0 00                	mov    $0x0,%al
c0101293:	85 c0                	test   %eax,%eax
c0101295:	75 07                	jne    c010129e <cga_putc+0x17>
        c |= 0x0700;
c0101297:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010129e:	8b 45 08             	mov    0x8(%ebp),%eax
c01012a1:	25 ff 00 00 00       	and    $0xff,%eax
c01012a6:	83 f8 0a             	cmp    $0xa,%eax
c01012a9:	74 4e                	je     c01012f9 <cga_putc+0x72>
c01012ab:	83 f8 0d             	cmp    $0xd,%eax
c01012ae:	74 59                	je     c0101309 <cga_putc+0x82>
c01012b0:	83 f8 08             	cmp    $0x8,%eax
c01012b3:	0f 85 8a 00 00 00    	jne    c0101343 <cga_putc+0xbc>
    case '\b':
        if (crt_pos > 0) {
c01012b9:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c01012c0:	66 85 c0             	test   %ax,%ax
c01012c3:	0f 84 9f 00 00 00    	je     c0101368 <cga_putc+0xe1>
            crt_pos --;
c01012c9:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c01012d0:	83 e8 01             	sub    $0x1,%eax
c01012d3:	66 a3 44 38 1c c0    	mov    %ax,0xc01c3844
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01012d9:	a1 40 38 1c c0       	mov    0xc01c3840,%eax
c01012de:	0f b7 15 44 38 1c c0 	movzwl 0xc01c3844,%edx
c01012e5:	0f b7 d2             	movzwl %dx,%edx
c01012e8:	01 d2                	add    %edx,%edx
c01012ea:	01 c2                	add    %eax,%edx
c01012ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01012ef:	b0 00                	mov    $0x0,%al
c01012f1:	83 c8 20             	or     $0x20,%eax
c01012f4:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01012f7:	eb 6f                	jmp    c0101368 <cga_putc+0xe1>
    case '\n':
        crt_pos += CRT_COLS;
c01012f9:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c0101300:	83 c0 50             	add    $0x50,%eax
c0101303:	66 a3 44 38 1c c0    	mov    %ax,0xc01c3844
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101309:	0f b7 1d 44 38 1c c0 	movzwl 0xc01c3844,%ebx
c0101310:	0f b7 0d 44 38 1c c0 	movzwl 0xc01c3844,%ecx
c0101317:	0f b7 c1             	movzwl %cx,%eax
c010131a:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101320:	c1 e8 10             	shr    $0x10,%eax
c0101323:	89 c2                	mov    %eax,%edx
c0101325:	66 c1 ea 06          	shr    $0x6,%dx
c0101329:	89 d0                	mov    %edx,%eax
c010132b:	c1 e0 02             	shl    $0x2,%eax
c010132e:	01 d0                	add    %edx,%eax
c0101330:	c1 e0 04             	shl    $0x4,%eax
c0101333:	89 ca                	mov    %ecx,%edx
c0101335:	29 c2                	sub    %eax,%edx
c0101337:	89 d8                	mov    %ebx,%eax
c0101339:	29 d0                	sub    %edx,%eax
c010133b:	66 a3 44 38 1c c0    	mov    %ax,0xc01c3844
        break;
c0101341:	eb 26                	jmp    c0101369 <cga_putc+0xe2>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101343:	8b 15 40 38 1c c0    	mov    0xc01c3840,%edx
c0101349:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c0101350:	0f b7 c8             	movzwl %ax,%ecx
c0101353:	01 c9                	add    %ecx,%ecx
c0101355:	01 d1                	add    %edx,%ecx
c0101357:	8b 55 08             	mov    0x8(%ebp),%edx
c010135a:	66 89 11             	mov    %dx,(%ecx)
c010135d:	83 c0 01             	add    $0x1,%eax
c0101360:	66 a3 44 38 1c c0    	mov    %ax,0xc01c3844
        break;
c0101366:	eb 01                	jmp    c0101369 <cga_putc+0xe2>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101368:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101369:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c0101370:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101374:	76 5b                	jbe    c01013d1 <cga_putc+0x14a>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101376:	a1 40 38 1c c0       	mov    0xc01c3840,%eax
c010137b:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101381:	a1 40 38 1c c0       	mov    0xc01c3840,%eax
c0101386:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010138d:	00 
c010138e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101392:	89 04 24             	mov    %eax,(%esp)
c0101395:	e8 b8 c5 00 00       	call   c010d952 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010139a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c01013a1:	eb 15                	jmp    c01013b8 <cga_putc+0x131>
            crt_buf[i] = 0x0700 | ' ';
c01013a3:	a1 40 38 1c c0       	mov    0xc01c3840,%eax
c01013a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01013ab:	01 d2                	add    %edx,%edx
c01013ad:	01 d0                	add    %edx,%eax
c01013af:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c01013b4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01013b8:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c01013bf:	7e e2                	jle    c01013a3 <cga_putc+0x11c>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c01013c1:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c01013c8:	83 e8 50             	sub    $0x50,%eax
c01013cb:	66 a3 44 38 1c c0    	mov    %ax,0xc01c3844
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c01013d1:	0f b7 05 46 38 1c c0 	movzwl 0xc01c3846,%eax
c01013d8:	0f b7 c0             	movzwl %ax,%eax
c01013db:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01013df:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01013e3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01013e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013eb:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01013ec:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c01013f3:	66 c1 e8 08          	shr    $0x8,%ax
c01013f7:	0f b6 c0             	movzbl %al,%eax
c01013fa:	0f b7 15 46 38 1c c0 	movzwl 0xc01c3846,%edx
c0101401:	83 c2 01             	add    $0x1,%edx
c0101404:	0f b7 d2             	movzwl %dx,%edx
c0101407:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010140b:	88 45 ed             	mov    %al,-0x13(%ebp)
c010140e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101412:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101416:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101417:	0f b7 05 46 38 1c c0 	movzwl 0xc01c3846,%eax
c010141e:	0f b7 c0             	movzwl %ax,%eax
c0101421:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101425:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101429:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010142d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101431:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101432:	0f b7 05 44 38 1c c0 	movzwl 0xc01c3844,%eax
c0101439:	0f b6 c0             	movzbl %al,%eax
c010143c:	0f b7 15 46 38 1c c0 	movzwl 0xc01c3846,%edx
c0101443:	83 c2 01             	add    $0x1,%edx
c0101446:	0f b7 d2             	movzwl %dx,%edx
c0101449:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010144d:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101450:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101454:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101458:	ee                   	out    %al,(%dx)
}
c0101459:	83 c4 34             	add    $0x34,%esp
c010145c:	5b                   	pop    %ebx
c010145d:	5d                   	pop    %ebp
c010145e:	c3                   	ret    

c010145f <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c010145f:	55                   	push   %ebp
c0101460:	89 e5                	mov    %esp,%ebp
c0101462:	53                   	push   %ebx
c0101463:	83 ec 14             	sub    $0x14,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101466:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010146d:	eb 09                	jmp    c0101478 <serial_putc_sub+0x19>
        delay();
c010146f:	e8 e6 fa ff ff       	call   c0100f5a <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101474:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0101478:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010147e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101482:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101486:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010148a:	ec                   	in     (%dx),%al
c010148b:	89 c3                	mov    %eax,%ebx
c010148d:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0101490:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101494:	0f b6 c0             	movzbl %al,%eax
c0101497:	83 e0 20             	and    $0x20,%eax
c010149a:	85 c0                	test   %eax,%eax
c010149c:	75 09                	jne    c01014a7 <serial_putc_sub+0x48>
c010149e:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c01014a5:	7e c8                	jle    c010146f <serial_putc_sub+0x10>
        delay();
    }
    outb(COM1 + COM_TX, c);
c01014a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01014aa:	0f b6 c0             	movzbl %al,%eax
c01014ad:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01014b3:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01014b6:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01014ba:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014be:	ee                   	out    %al,(%dx)
}
c01014bf:	83 c4 14             	add    $0x14,%esp
c01014c2:	5b                   	pop    %ebx
c01014c3:	5d                   	pop    %ebp
c01014c4:	c3                   	ret    

c01014c5 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c01014c5:	55                   	push   %ebp
c01014c6:	89 e5                	mov    %esp,%ebp
c01014c8:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01014cb:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01014cf:	74 0d                	je     c01014de <serial_putc+0x19>
        serial_putc_sub(c);
c01014d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01014d4:	89 04 24             	mov    %eax,(%esp)
c01014d7:	e8 83 ff ff ff       	call   c010145f <serial_putc_sub>
c01014dc:	eb 24                	jmp    c0101502 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01014de:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014e5:	e8 75 ff ff ff       	call   c010145f <serial_putc_sub>
        serial_putc_sub(' ');
c01014ea:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01014f1:	e8 69 ff ff ff       	call   c010145f <serial_putc_sub>
        serial_putc_sub('\b');
c01014f6:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014fd:	e8 5d ff ff ff       	call   c010145f <serial_putc_sub>
    }
}
c0101502:	c9                   	leave  
c0101503:	c3                   	ret    

c0101504 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101504:	55                   	push   %ebp
c0101505:	89 e5                	mov    %esp,%ebp
c0101507:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c010150a:	eb 32                	jmp    c010153e <cons_intr+0x3a>
        if (c != 0) {
c010150c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101510:	74 2c                	je     c010153e <cons_intr+0x3a>
            cons.buf[cons.wpos ++] = c;
c0101512:	a1 64 3a 1c c0       	mov    0xc01c3a64,%eax
c0101517:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010151a:	88 90 60 38 1c c0    	mov    %dl,-0x3fe3c7a0(%eax)
c0101520:	83 c0 01             	add    $0x1,%eax
c0101523:	a3 64 3a 1c c0       	mov    %eax,0xc01c3a64
            if (cons.wpos == CONSBUFSIZE) {
c0101528:	a1 64 3a 1c c0       	mov    0xc01c3a64,%eax
c010152d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101532:	75 0a                	jne    c010153e <cons_intr+0x3a>
                cons.wpos = 0;
c0101534:	c7 05 64 3a 1c c0 00 	movl   $0x0,0xc01c3a64
c010153b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010153e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101541:	ff d0                	call   *%eax
c0101543:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101546:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c010154a:	75 c0                	jne    c010150c <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c010154c:	c9                   	leave  
c010154d:	c3                   	ret    

c010154e <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c010154e:	55                   	push   %ebp
c010154f:	89 e5                	mov    %esp,%ebp
c0101551:	53                   	push   %ebx
c0101552:	83 ec 14             	sub    $0x14,%esp
c0101555:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010155b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010155f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101563:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101567:	ec                   	in     (%dx),%al
c0101568:	89 c3                	mov    %eax,%ebx
c010156a:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c010156d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101571:	0f b6 c0             	movzbl %al,%eax
c0101574:	83 e0 01             	and    $0x1,%eax
c0101577:	85 c0                	test   %eax,%eax
c0101579:	75 07                	jne    c0101582 <serial_proc_data+0x34>
        return -1;
c010157b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101580:	eb 32                	jmp    c01015b4 <serial_proc_data+0x66>
c0101582:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101588:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158c:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101590:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101594:	ec                   	in     (%dx),%al
c0101595:	89 c3                	mov    %eax,%ebx
c0101597:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c010159a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c010159e:	0f b6 c0             	movzbl %al,%eax
c01015a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (c == 127) {
c01015a4:	83 7d f8 7f          	cmpl   $0x7f,-0x8(%ebp)
c01015a8:	75 07                	jne    c01015b1 <serial_proc_data+0x63>
        c = '\b';
c01015aa:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
    }
    return c;
c01015b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01015b4:	83 c4 14             	add    $0x14,%esp
c01015b7:	5b                   	pop    %ebx
c01015b8:	5d                   	pop    %ebp
c01015b9:	c3                   	ret    

c01015ba <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c01015ba:	55                   	push   %ebp
c01015bb:	89 e5                	mov    %esp,%ebp
c01015bd:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c01015c0:	a1 48 38 1c c0       	mov    0xc01c3848,%eax
c01015c5:	85 c0                	test   %eax,%eax
c01015c7:	74 0c                	je     c01015d5 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c01015c9:	c7 04 24 4e 15 10 c0 	movl   $0xc010154e,(%esp)
c01015d0:	e8 2f ff ff ff       	call   c0101504 <cons_intr>
    }
}
c01015d5:	c9                   	leave  
c01015d6:	c3                   	ret    

c01015d7 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01015d7:	55                   	push   %ebp
c01015d8:	89 e5                	mov    %esp,%ebp
c01015da:	53                   	push   %ebx
c01015db:	83 ec 44             	sub    $0x44,%esp
c01015de:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015e4:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01015e8:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01015ec:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01015f0:	ec                   	in     (%dx),%al
c01015f1:	89 c3                	mov    %eax,%ebx
c01015f3:	88 5d ef             	mov    %bl,-0x11(%ebp)
    return data;
c01015f6:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01015fa:	0f b6 c0             	movzbl %al,%eax
c01015fd:	83 e0 01             	and    $0x1,%eax
c0101600:	85 c0                	test   %eax,%eax
c0101602:	75 0a                	jne    c010160e <kbd_proc_data+0x37>
        return -1;
c0101604:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101609:	e9 61 01 00 00       	jmp    c010176f <kbd_proc_data+0x198>
c010160e:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101614:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101618:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c010161c:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101620:	ec                   	in     (%dx),%al
c0101621:	89 c3                	mov    %eax,%ebx
c0101623:	88 5d eb             	mov    %bl,-0x15(%ebp)
    return data;
c0101626:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c010162a:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010162d:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101631:	75 17                	jne    c010164a <kbd_proc_data+0x73>
        // E0 escape character
        shift |= E0ESC;
c0101633:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c0101638:	83 c8 40             	or     $0x40,%eax
c010163b:	a3 68 3a 1c c0       	mov    %eax,0xc01c3a68
        return 0;
c0101640:	b8 00 00 00 00       	mov    $0x0,%eax
c0101645:	e9 25 01 00 00       	jmp    c010176f <kbd_proc_data+0x198>
    } else if (data & 0x80) {
c010164a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010164e:	84 c0                	test   %al,%al
c0101650:	79 47                	jns    c0101699 <kbd_proc_data+0xc2>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101652:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c0101657:	83 e0 40             	and    $0x40,%eax
c010165a:	85 c0                	test   %eax,%eax
c010165c:	75 09                	jne    c0101667 <kbd_proc_data+0x90>
c010165e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101662:	83 e0 7f             	and    $0x7f,%eax
c0101665:	eb 04                	jmp    c010166b <kbd_proc_data+0x94>
c0101667:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010166b:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c010166e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101672:	0f b6 80 60 20 13 c0 	movzbl -0x3fecdfa0(%eax),%eax
c0101679:	83 c8 40             	or     $0x40,%eax
c010167c:	0f b6 c0             	movzbl %al,%eax
c010167f:	f7 d0                	not    %eax
c0101681:	89 c2                	mov    %eax,%edx
c0101683:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c0101688:	21 d0                	and    %edx,%eax
c010168a:	a3 68 3a 1c c0       	mov    %eax,0xc01c3a68
        return 0;
c010168f:	b8 00 00 00 00       	mov    $0x0,%eax
c0101694:	e9 d6 00 00 00       	jmp    c010176f <kbd_proc_data+0x198>
    } else if (shift & E0ESC) {
c0101699:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c010169e:	83 e0 40             	and    $0x40,%eax
c01016a1:	85 c0                	test   %eax,%eax
c01016a3:	74 11                	je     c01016b6 <kbd_proc_data+0xdf>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016a5:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016a9:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c01016ae:	83 e0 bf             	and    $0xffffffbf,%eax
c01016b1:	a3 68 3a 1c c0       	mov    %eax,0xc01c3a68
    }

    shift |= shiftcode[data];
c01016b6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ba:	0f b6 80 60 20 13 c0 	movzbl -0x3fecdfa0(%eax),%eax
c01016c1:	0f b6 d0             	movzbl %al,%edx
c01016c4:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c01016c9:	09 d0                	or     %edx,%eax
c01016cb:	a3 68 3a 1c c0       	mov    %eax,0xc01c3a68
    shift ^= togglecode[data];
c01016d0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016d4:	0f b6 80 60 21 13 c0 	movzbl -0x3fecdea0(%eax),%eax
c01016db:	0f b6 d0             	movzbl %al,%edx
c01016de:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c01016e3:	31 d0                	xor    %edx,%eax
c01016e5:	a3 68 3a 1c c0       	mov    %eax,0xc01c3a68

    c = charcode[shift & (CTL | SHIFT)][data];
c01016ea:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c01016ef:	83 e0 03             	and    $0x3,%eax
c01016f2:	8b 14 85 60 25 13 c0 	mov    -0x3fecdaa0(,%eax,4),%edx
c01016f9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016fd:	01 d0                	add    %edx,%eax
c01016ff:	0f b6 00             	movzbl (%eax),%eax
c0101702:	0f b6 c0             	movzbl %al,%eax
c0101705:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101708:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c010170d:	83 e0 08             	and    $0x8,%eax
c0101710:	85 c0                	test   %eax,%eax
c0101712:	74 22                	je     c0101736 <kbd_proc_data+0x15f>
        if ('a' <= c && c <= 'z')
c0101714:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101718:	7e 0c                	jle    c0101726 <kbd_proc_data+0x14f>
c010171a:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c010171e:	7f 06                	jg     c0101726 <kbd_proc_data+0x14f>
            c += 'A' - 'a';
c0101720:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101724:	eb 10                	jmp    c0101736 <kbd_proc_data+0x15f>
        else if ('A' <= c && c <= 'Z')
c0101726:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c010172a:	7e 0a                	jle    c0101736 <kbd_proc_data+0x15f>
c010172c:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101730:	7f 04                	jg     c0101736 <kbd_proc_data+0x15f>
            c += 'a' - 'A';
c0101732:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101736:	a1 68 3a 1c c0       	mov    0xc01c3a68,%eax
c010173b:	f7 d0                	not    %eax
c010173d:	83 e0 06             	and    $0x6,%eax
c0101740:	85 c0                	test   %eax,%eax
c0101742:	75 28                	jne    c010176c <kbd_proc_data+0x195>
c0101744:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c010174b:	75 1f                	jne    c010176c <kbd_proc_data+0x195>
        cprintf("Rebooting!\n");
c010174d:	c7 04 24 fd dd 10 c0 	movl   $0xc010ddfd,(%esp)
c0101754:	e8 0a ec ff ff       	call   c0100363 <cprintf>
c0101759:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010175f:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101763:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101767:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010176b:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c010176c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010176f:	83 c4 44             	add    $0x44,%esp
c0101772:	5b                   	pop    %ebx
c0101773:	5d                   	pop    %ebp
c0101774:	c3                   	ret    

c0101775 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101775:	55                   	push   %ebp
c0101776:	89 e5                	mov    %esp,%ebp
c0101778:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c010177b:	c7 04 24 d7 15 10 c0 	movl   $0xc01015d7,(%esp)
c0101782:	e8 7d fd ff ff       	call   c0101504 <cons_intr>
}
c0101787:	c9                   	leave  
c0101788:	c3                   	ret    

c0101789 <kbd_init>:

static void
kbd_init(void) {
c0101789:	55                   	push   %ebp
c010178a:	89 e5                	mov    %esp,%ebp
c010178c:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c010178f:	e8 e1 ff ff ff       	call   c0101775 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101794:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010179b:	e8 d8 09 00 00       	call   c0102178 <pic_enable>
}
c01017a0:	c9                   	leave  
c01017a1:	c3                   	ret    

c01017a2 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017a2:	55                   	push   %ebp
c01017a3:	89 e5                	mov    %esp,%ebp
c01017a5:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017a8:	e8 1a f8 ff ff       	call   c0100fc7 <cga_init>
    serial_init();
c01017ad:	e8 10 f9 ff ff       	call   c01010c2 <serial_init>
    kbd_init();
c01017b2:	e8 d2 ff ff ff       	call   c0101789 <kbd_init>
    if (!serial_exists) {
c01017b7:	a1 48 38 1c c0       	mov    0xc01c3848,%eax
c01017bc:	85 c0                	test   %eax,%eax
c01017be:	75 0c                	jne    c01017cc <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017c0:	c7 04 24 09 de 10 c0 	movl   $0xc010de09,(%esp)
c01017c7:	e8 97 eb ff ff       	call   c0100363 <cprintf>
    }
}
c01017cc:	c9                   	leave  
c01017cd:	c3                   	ret    

c01017ce <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c01017ce:	55                   	push   %ebp
c01017cf:	89 e5                	mov    %esp,%ebp
c01017d1:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01017d4:	e8 3f f7 ff ff       	call   c0100f18 <__intr_save>
c01017d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c01017dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01017df:	89 04 24             	mov    %eax,(%esp)
c01017e2:	e8 61 fa ff ff       	call   c0101248 <lpt_putc>
        cga_putc(c);
c01017e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ea:	89 04 24             	mov    %eax,(%esp)
c01017ed:	e8 95 fa ff ff       	call   c0101287 <cga_putc>
        serial_putc(c);
c01017f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01017f5:	89 04 24             	mov    %eax,(%esp)
c01017f8:	e8 c8 fc ff ff       	call   c01014c5 <serial_putc>
    }
    local_intr_restore(intr_flag);
c01017fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101800:	89 04 24             	mov    %eax,(%esp)
c0101803:	e8 3f f7 ff ff       	call   c0100f47 <__intr_restore>
}
c0101808:	c9                   	leave  
c0101809:	c3                   	ret    

c010180a <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c010180a:	55                   	push   %ebp
c010180b:	89 e5                	mov    %esp,%ebp
c010180d:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101810:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101817:	e8 fc f6 ff ff       	call   c0100f18 <__intr_save>
c010181c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010181f:	e8 96 fd ff ff       	call   c01015ba <serial_intr>
        kbd_intr();
c0101824:	e8 4c ff ff ff       	call   c0101775 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101829:	8b 15 60 3a 1c c0    	mov    0xc01c3a60,%edx
c010182f:	a1 64 3a 1c c0       	mov    0xc01c3a64,%eax
c0101834:	39 c2                	cmp    %eax,%edx
c0101836:	74 30                	je     c0101868 <cons_getc+0x5e>
            c = cons.buf[cons.rpos ++];
c0101838:	a1 60 3a 1c c0       	mov    0xc01c3a60,%eax
c010183d:	0f b6 90 60 38 1c c0 	movzbl -0x3fe3c7a0(%eax),%edx
c0101844:	0f b6 d2             	movzbl %dl,%edx
c0101847:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010184a:	83 c0 01             	add    $0x1,%eax
c010184d:	a3 60 3a 1c c0       	mov    %eax,0xc01c3a60
            if (cons.rpos == CONSBUFSIZE) {
c0101852:	a1 60 3a 1c c0       	mov    0xc01c3a60,%eax
c0101857:	3d 00 02 00 00       	cmp    $0x200,%eax
c010185c:	75 0a                	jne    c0101868 <cons_getc+0x5e>
                cons.rpos = 0;
c010185e:	c7 05 60 3a 1c c0 00 	movl   $0x0,0xc01c3a60
c0101865:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101868:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010186b:	89 04 24             	mov    %eax,(%esp)
c010186e:	e8 d4 f6 ff ff       	call   c0100f47 <__intr_restore>
    return c;
c0101873:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101876:	c9                   	leave  
c0101877:	c3                   	ret    

c0101878 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0101878:	55                   	push   %ebp
c0101879:	89 e5                	mov    %esp,%ebp
c010187b:	53                   	push   %ebx
c010187c:	83 ec 14             	sub    $0x14,%esp
c010187f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101882:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0101886:	90                   	nop
c0101887:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c010188b:	83 c0 07             	add    $0x7,%eax
c010188e:	0f b7 c0             	movzwl %ax,%eax
c0101891:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101895:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101899:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010189d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01018a1:	ec                   	in     (%dx),%al
c01018a2:	89 c3                	mov    %eax,%ebx
c01018a4:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c01018a7:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01018ab:	0f b6 c0             	movzbl %al,%eax
c01018ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01018b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01018b4:	25 80 00 00 00       	and    $0x80,%eax
c01018b9:	85 c0                	test   %eax,%eax
c01018bb:	75 ca                	jne    c0101887 <ide_wait_ready+0xf>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018c1:	74 11                	je     c01018d4 <ide_wait_ready+0x5c>
c01018c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01018c6:	83 e0 21             	and    $0x21,%eax
c01018c9:	85 c0                	test   %eax,%eax
c01018cb:	74 07                	je     c01018d4 <ide_wait_ready+0x5c>
        return -1;
c01018cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01018d2:	eb 05                	jmp    c01018d9 <ide_wait_ready+0x61>
    }
    return 0;
c01018d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01018d9:	83 c4 14             	add    $0x14,%esp
c01018dc:	5b                   	pop    %ebx
c01018dd:	5d                   	pop    %ebp
c01018de:	c3                   	ret    

c01018df <ide_init>:

void
ide_init(void) {
c01018df:	55                   	push   %ebp
c01018e0:	89 e5                	mov    %esp,%ebp
c01018e2:	57                   	push   %edi
c01018e3:	56                   	push   %esi
c01018e4:	53                   	push   %ebx
c01018e5:	81 ec 6c 02 00 00    	sub    $0x26c,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01018eb:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
c01018f1:	e9 e4 02 00 00       	jmp    c0101bda <ide_init+0x2fb>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c01018f6:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01018fa:	c1 e0 03             	shl    $0x3,%eax
c01018fd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101904:	29 c2                	sub    %eax,%edx
c0101906:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c010190c:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c010190f:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101913:	66 d1 e8             	shr    %ax
c0101916:	0f b7 c0             	movzwl %ax,%eax
c0101919:	0f b7 04 85 28 de 10 	movzwl -0x3fef21d8(,%eax,4),%eax
c0101920:	c0 
c0101921:	66 89 45 da          	mov    %ax,-0x26(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101925:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101929:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101930:	00 
c0101931:	89 04 24             	mov    %eax,(%esp)
c0101934:	e8 3f ff ff ff       	call   c0101878 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101939:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010193d:	83 e0 01             	and    $0x1,%eax
c0101940:	c1 e0 04             	shl    $0x4,%eax
c0101943:	83 c8 e0             	or     $0xffffffe0,%eax
c0101946:	0f b6 c0             	movzbl %al,%eax
c0101949:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010194d:	83 c2 06             	add    $0x6,%edx
c0101950:	0f b7 d2             	movzwl %dx,%edx
c0101953:	66 89 55 c2          	mov    %dx,-0x3e(%ebp)
c0101957:	88 45 c1             	mov    %al,-0x3f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010195a:	0f b6 45 c1          	movzbl -0x3f(%ebp),%eax
c010195e:	0f b7 55 c2          	movzwl -0x3e(%ebp),%edx
c0101962:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101963:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101967:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010196e:	00 
c010196f:	89 04 24             	mov    %eax,(%esp)
c0101972:	e8 01 ff ff ff       	call   c0101878 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101977:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010197b:	83 c0 07             	add    $0x7,%eax
c010197e:	0f b7 c0             	movzwl %ax,%eax
c0101981:	66 89 45 be          	mov    %ax,-0x42(%ebp)
c0101985:	c6 45 bd ec          	movb   $0xec,-0x43(%ebp)
c0101989:	0f b6 45 bd          	movzbl -0x43(%ebp),%eax
c010198d:	0f b7 55 be          	movzwl -0x42(%ebp),%edx
c0101991:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101992:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101996:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010199d:	00 
c010199e:	89 04 24             	mov    %eax,(%esp)
c01019a1:	e8 d2 fe ff ff       	call   c0101878 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019a6:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019aa:	83 c0 07             	add    $0x7,%eax
c01019ad:	0f b7 c0             	movzwl %ax,%eax
c01019b0:	66 89 45 ba          	mov    %ax,-0x46(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019b4:	0f b7 55 ba          	movzwl -0x46(%ebp),%edx
c01019b8:	66 89 95 a6 fd ff ff 	mov    %dx,-0x25a(%ebp)
c01019bf:	0f b7 95 a6 fd ff ff 	movzwl -0x25a(%ebp),%edx
c01019c6:	ec                   	in     (%dx),%al
c01019c7:	89 c3                	mov    %eax,%ebx
c01019c9:	88 5d b9             	mov    %bl,-0x47(%ebp)
    return data;
c01019cc:	0f b6 45 b9          	movzbl -0x47(%ebp),%eax
c01019d0:	84 c0                	test   %al,%al
c01019d2:	0f 84 fd 01 00 00    	je     c0101bd5 <ide_init+0x2f6>
c01019d8:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019dc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019e3:	00 
c01019e4:	89 04 24             	mov    %eax,(%esp)
c01019e7:	e8 8c fe ff ff       	call   c0101878 <ide_wait_ready>
c01019ec:	85 c0                	test   %eax,%eax
c01019ee:	0f 85 e1 01 00 00    	jne    c0101bd5 <ide_init+0x2f6>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01019f4:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01019f8:	c1 e0 03             	shl    $0x3,%eax
c01019fb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a02:	29 c2                	sub    %eax,%edx
c0101a04:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101a0a:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a0d:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101a11:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0101a14:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0101a1a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0101a1d:	c7 45 ac 80 00 00 00 	movl   $0x80,-0x54(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a24:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0101a27:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0101a2a:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0101a2d:	89 ce                	mov    %ecx,%esi
c0101a2f:	89 d3                	mov    %edx,%ebx
c0101a31:	89 f7                	mov    %esi,%edi
c0101a33:	89 d9                	mov    %ebx,%ecx
c0101a35:	89 c2                	mov    %eax,%edx
c0101a37:	fc                   	cld    
c0101a38:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a3a:	89 cb                	mov    %ecx,%ebx
c0101a3c:	89 fe                	mov    %edi,%esi
c0101a3e:	89 75 b0             	mov    %esi,-0x50(%ebp)
c0101a41:	89 5d ac             	mov    %ebx,-0x54(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a44:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0101a4a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a4d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a50:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a56:	89 45 d0             	mov    %eax,-0x30(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a59:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101a5c:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a61:	85 c0                	test   %eax,%eax
c0101a63:	74 0e                	je     c0101a73 <ide_init+0x194>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a65:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a68:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a6e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101a71:	eb 09                	jmp    c0101a7c <ide_init+0x19d>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a76:	8b 40 78             	mov    0x78(%eax),%eax
c0101a79:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a7c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a80:	c1 e0 03             	shl    $0x3,%eax
c0101a83:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a8a:	29 c2                	sub    %eax,%edx
c0101a8c:	81 c2 80 3a 1c c0    	add    $0xc01c3a80,%edx
c0101a92:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101a95:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101a98:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a9c:	c1 e0 03             	shl    $0x3,%eax
c0101a9f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa6:	29 c2                	sub    %eax,%edx
c0101aa8:	81 c2 80 3a 1c c0    	add    $0xc01c3a80,%edx
c0101aae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101ab1:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101ab4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101ab7:	83 c0 62             	add    $0x62,%eax
c0101aba:	0f b7 00             	movzwl (%eax),%eax
c0101abd:	0f b7 c0             	movzwl %ax,%eax
c0101ac0:	25 00 02 00 00       	and    $0x200,%eax
c0101ac5:	85 c0                	test   %eax,%eax
c0101ac7:	75 24                	jne    c0101aed <ide_init+0x20e>
c0101ac9:	c7 44 24 0c 30 de 10 	movl   $0xc010de30,0xc(%esp)
c0101ad0:	c0 
c0101ad1:	c7 44 24 08 73 de 10 	movl   $0xc010de73,0x8(%esp)
c0101ad8:	c0 
c0101ad9:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101ae0:	00 
c0101ae1:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0101ae8:	e8 07 f3 ff ff       	call   c0100df4 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101aed:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101af1:	c1 e0 03             	shl    $0x3,%eax
c0101af4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101afb:	29 c2                	sub    %eax,%edx
c0101afd:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101b03:	83 c0 0c             	add    $0xc,%eax
c0101b06:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101b09:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b0c:	83 c0 36             	add    $0x36,%eax
c0101b0f:	89 45 c8             	mov    %eax,-0x38(%ebp)
        unsigned int i, length = 40;
c0101b12:	c7 45 c4 28 00 00 00 	movl   $0x28,-0x3c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b19:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101b20:	eb 34                	jmp    c0101b56 <ide_init+0x277>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b25:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b28:	01 c2                	add    %eax,%edx
c0101b2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b2d:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b30:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101b33:	01 c8                	add    %ecx,%eax
c0101b35:	0f b6 00             	movzbl (%eax),%eax
c0101b38:	88 02                	mov    %al,(%edx)
c0101b3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b3d:	8d 50 01             	lea    0x1(%eax),%edx
c0101b40:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101b43:	01 c2                	add    %eax,%edx
c0101b45:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b48:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0101b4b:	01 c8                	add    %ecx,%eax
c0101b4d:	0f b6 00             	movzbl (%eax),%eax
c0101b50:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b52:	83 45 dc 02          	addl   $0x2,-0x24(%ebp)
c0101b56:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b59:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0101b5c:	72 c4                	jb     c0101b22 <ide_init+0x243>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b61:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b64:	01 d0                	add    %edx,%eax
c0101b66:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b69:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0101b6d:	0f 95 c0             	setne  %al
c0101b70:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
c0101b74:	84 c0                	test   %al,%al
c0101b76:	74 0f                	je     c0101b87 <ide_init+0x2a8>
c0101b78:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b7b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b7e:	01 d0                	add    %edx,%eax
c0101b80:	0f b6 00             	movzbl (%eax),%eax
c0101b83:	3c 20                	cmp    $0x20,%al
c0101b85:	74 d7                	je     c0101b5e <ide_init+0x27f>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b87:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b8b:	c1 e0 03             	shl    $0x3,%eax
c0101b8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b95:	29 c2                	sub    %eax,%edx
c0101b97:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101b9d:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101ba0:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101ba4:	c1 e0 03             	shl    $0x3,%eax
c0101ba7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bae:	29 c2                	sub    %eax,%edx
c0101bb0:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101bb6:	8b 50 08             	mov    0x8(%eax),%edx
c0101bb9:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101bbd:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bc1:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bc5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bc9:	c7 04 24 9a de 10 c0 	movl   $0xc010de9a,(%esp)
c0101bd0:	e8 8e e7 ff ff       	call   c0100363 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bd5:	66 83 45 e6 01       	addw   $0x1,-0x1a(%ebp)
c0101bda:	66 83 7d e6 03       	cmpw   $0x3,-0x1a(%ebp)
c0101bdf:	0f 86 11 fd ff ff    	jbe    c01018f6 <ide_init+0x17>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101be5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101bec:	e8 87 05 00 00       	call   c0102178 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101bf1:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101bf8:	e8 7b 05 00 00       	call   c0102178 <pic_enable>
}
c0101bfd:	81 c4 6c 02 00 00    	add    $0x26c,%esp
c0101c03:	5b                   	pop    %ebx
c0101c04:	5e                   	pop    %esi
c0101c05:	5f                   	pop    %edi
c0101c06:	5d                   	pop    %ebp
c0101c07:	c3                   	ret    

c0101c08 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c08:	55                   	push   %ebp
c0101c09:	89 e5                	mov    %esp,%ebp
c0101c0b:	83 ec 04             	sub    $0x4,%esp
c0101c0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c11:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c15:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c1a:	77 24                	ja     c0101c40 <ide_device_valid+0x38>
c0101c1c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c20:	c1 e0 03             	shl    $0x3,%eax
c0101c23:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c2a:	29 c2                	sub    %eax,%edx
c0101c2c:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101c32:	0f b6 00             	movzbl (%eax),%eax
c0101c35:	84 c0                	test   %al,%al
c0101c37:	74 07                	je     c0101c40 <ide_device_valid+0x38>
c0101c39:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c3e:	eb 05                	jmp    c0101c45 <ide_device_valid+0x3d>
c0101c40:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c45:	c9                   	leave  
c0101c46:	c3                   	ret    

c0101c47 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c47:	55                   	push   %ebp
c0101c48:	89 e5                	mov    %esp,%ebp
c0101c4a:	83 ec 08             	sub    $0x8,%esp
c0101c4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c50:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c54:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c58:	89 04 24             	mov    %eax,(%esp)
c0101c5b:	e8 a8 ff ff ff       	call   c0101c08 <ide_device_valid>
c0101c60:	85 c0                	test   %eax,%eax
c0101c62:	74 1b                	je     c0101c7f <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c64:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c68:	c1 e0 03             	shl    $0x3,%eax
c0101c6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c72:	29 c2                	sub    %eax,%edx
c0101c74:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101c7a:	8b 40 08             	mov    0x8(%eax),%eax
c0101c7d:	eb 05                	jmp    c0101c84 <ide_device_size+0x3d>
    }
    return 0;
c0101c7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c84:	c9                   	leave  
c0101c85:	c3                   	ret    

c0101c86 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101c86:	55                   	push   %ebp
c0101c87:	89 e5                	mov    %esp,%ebp
c0101c89:	57                   	push   %edi
c0101c8a:	56                   	push   %esi
c0101c8b:	53                   	push   %ebx
c0101c8c:	83 ec 5c             	sub    $0x5c,%esp
c0101c8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c92:	66 89 45 b4          	mov    %ax,-0x4c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101c96:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101c9d:	77 24                	ja     c0101cc3 <ide_read_secs+0x3d>
c0101c9f:	66 83 7d b4 03       	cmpw   $0x3,-0x4c(%ebp)
c0101ca4:	77 1d                	ja     c0101cc3 <ide_read_secs+0x3d>
c0101ca6:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101caa:	c1 e0 03             	shl    $0x3,%eax
c0101cad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101cb4:	29 c2                	sub    %eax,%edx
c0101cb6:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101cbc:	0f b6 00             	movzbl (%eax),%eax
c0101cbf:	84 c0                	test   %al,%al
c0101cc1:	75 24                	jne    c0101ce7 <ide_read_secs+0x61>
c0101cc3:	c7 44 24 0c b8 de 10 	movl   $0xc010deb8,0xc(%esp)
c0101cca:	c0 
c0101ccb:	c7 44 24 08 73 de 10 	movl   $0xc010de73,0x8(%esp)
c0101cd2:	c0 
c0101cd3:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101cda:	00 
c0101cdb:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0101ce2:	e8 0d f1 ff ff       	call   c0100df4 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101ce7:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101cee:	77 0f                	ja     c0101cff <ide_read_secs+0x79>
c0101cf0:	8b 45 14             	mov    0x14(%ebp),%eax
c0101cf3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101cf6:	01 d0                	add    %edx,%eax
c0101cf8:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101cfd:	76 24                	jbe    c0101d23 <ide_read_secs+0x9d>
c0101cff:	c7 44 24 0c e0 de 10 	movl   $0xc010dee0,0xc(%esp)
c0101d06:	c0 
c0101d07:	c7 44 24 08 73 de 10 	movl   $0xc010de73,0x8(%esp)
c0101d0e:	c0 
c0101d0f:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d16:	00 
c0101d17:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0101d1e:	e8 d1 f0 ff ff       	call   c0100df4 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d23:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101d27:	66 d1 e8             	shr    %ax
c0101d2a:	0f b7 c0             	movzwl %ax,%eax
c0101d2d:	0f b7 04 85 28 de 10 	movzwl -0x3fef21d8(,%eax,4),%eax
c0101d34:	c0 
c0101d35:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
c0101d39:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101d3d:	66 d1 e8             	shr    %ax
c0101d40:	0f b7 c0             	movzwl %ax,%eax
c0101d43:	0f b7 04 85 2a de 10 	movzwl -0x3fef21d6(,%eax,4),%eax
c0101d4a:	c0 
c0101d4b:	66 89 45 e0          	mov    %ax,-0x20(%ebp)

    ide_wait_ready(iobase, 0);
c0101d4f:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101d53:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d5a:	00 
c0101d5b:	89 04 24             	mov    %eax,(%esp)
c0101d5e:	e8 15 fb ff ff       	call   c0101878 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d63:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0101d67:	83 c0 02             	add    $0x2,%eax
c0101d6a:	0f b7 c0             	movzwl %ax,%eax
c0101d6d:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101d71:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d75:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d79:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d7d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d7e:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d81:	0f b6 c0             	movzbl %al,%eax
c0101d84:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d88:	83 c2 02             	add    $0x2,%edx
c0101d8b:	0f b7 d2             	movzwl %dx,%edx
c0101d8e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d92:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d95:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d99:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d9d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101d9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da1:	0f b6 c0             	movzbl %al,%eax
c0101da4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101da8:	83 c2 03             	add    $0x3,%edx
c0101dab:	0f b7 d2             	movzwl %dx,%edx
c0101dae:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c0101db2:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101db5:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101db9:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101dbd:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc1:	c1 e8 08             	shr    $0x8,%eax
c0101dc4:	0f b6 c0             	movzbl %al,%eax
c0101dc7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101dcb:	83 c2 04             	add    $0x4,%edx
c0101dce:	0f b7 d2             	movzwl %dx,%edx
c0101dd1:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101dd5:	88 45 d1             	mov    %al,-0x2f(%ebp)
c0101dd8:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101ddc:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101de0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101de1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de4:	c1 e8 10             	shr    $0x10,%eax
c0101de7:	0f b6 c0             	movzbl %al,%eax
c0101dea:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101dee:	83 c2 05             	add    $0x5,%edx
c0101df1:	0f b7 d2             	movzwl %dx,%edx
c0101df4:	66 89 55 ce          	mov    %dx,-0x32(%ebp)
c0101df8:	88 45 cd             	mov    %al,-0x33(%ebp)
c0101dfb:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0101dff:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0101e03:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e04:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101e08:	83 e0 01             	and    $0x1,%eax
c0101e0b:	89 c2                	mov    %eax,%edx
c0101e0d:	c1 e2 04             	shl    $0x4,%edx
c0101e10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e13:	c1 e8 18             	shr    $0x18,%eax
c0101e16:	83 e0 0f             	and    $0xf,%eax
c0101e19:	09 d0                	or     %edx,%eax
c0101e1b:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e1e:	0f b6 c0             	movzbl %al,%eax
c0101e21:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e25:	83 c2 06             	add    $0x6,%edx
c0101e28:	0f b7 d2             	movzwl %dx,%edx
c0101e2b:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
c0101e2f:	88 45 c9             	mov    %al,-0x37(%ebp)
c0101e32:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101e36:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0101e3a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e3b:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e3f:	83 c0 07             	add    $0x7,%eax
c0101e42:	0f b7 c0             	movzwl %ax,%eax
c0101e45:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
c0101e49:	c6 45 c5 20          	movb   $0x20,-0x3b(%ebp)
c0101e4d:	0f b6 45 c5          	movzbl -0x3b(%ebp),%eax
c0101e51:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101e55:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e56:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e5d:	eb 5c                	jmp    c0101ebb <ide_read_secs+0x235>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e5f:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e63:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e6a:	00 
c0101e6b:	89 04 24             	mov    %eax,(%esp)
c0101e6e:	e8 05 fa ff ff       	call   c0101878 <ide_wait_ready>
c0101e73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0101e76:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0101e7a:	75 47                	jne    c0101ec3 <ide_read_secs+0x23d>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e7c:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e80:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101e83:	8b 45 10             	mov    0x10(%ebp),%eax
c0101e86:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0101e89:	c7 45 b8 80 00 00 00 	movl   $0x80,-0x48(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101e90:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0101e93:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0101e96:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0101e99:	89 ce                	mov    %ecx,%esi
c0101e9b:	89 d3                	mov    %edx,%ebx
c0101e9d:	89 f7                	mov    %esi,%edi
c0101e9f:	89 d9                	mov    %ebx,%ecx
c0101ea1:	89 c2                	mov    %eax,%edx
c0101ea3:	fc                   	cld    
c0101ea4:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ea6:	89 cb                	mov    %ecx,%ebx
c0101ea8:	89 fe                	mov    %edi,%esi
c0101eaa:	89 75 bc             	mov    %esi,-0x44(%ebp)
c0101ead:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101eb0:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101eb4:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ebb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ebf:	75 9e                	jne    c0101e5f <ide_read_secs+0x1d9>
c0101ec1:	eb 01                	jmp    c0101ec4 <ide_read_secs+0x23e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101ec3:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ec4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0101ec7:	83 c4 5c             	add    $0x5c,%esp
c0101eca:	5b                   	pop    %ebx
c0101ecb:	5e                   	pop    %esi
c0101ecc:	5f                   	pop    %edi
c0101ecd:	5d                   	pop    %ebp
c0101ece:	c3                   	ret    

c0101ecf <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101ecf:	55                   	push   %ebp
c0101ed0:	89 e5                	mov    %esp,%ebp
c0101ed2:	56                   	push   %esi
c0101ed3:	53                   	push   %ebx
c0101ed4:	83 ec 50             	sub    $0x50,%esp
c0101ed7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eda:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ede:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ee5:	77 24                	ja     c0101f0b <ide_write_secs+0x3c>
c0101ee7:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101eec:	77 1d                	ja     c0101f0b <ide_write_secs+0x3c>
c0101eee:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ef2:	c1 e0 03             	shl    $0x3,%eax
c0101ef5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101efc:	29 c2                	sub    %eax,%edx
c0101efe:	8d 82 80 3a 1c c0    	lea    -0x3fe3c580(%edx),%eax
c0101f04:	0f b6 00             	movzbl (%eax),%eax
c0101f07:	84 c0                	test   %al,%al
c0101f09:	75 24                	jne    c0101f2f <ide_write_secs+0x60>
c0101f0b:	c7 44 24 0c b8 de 10 	movl   $0xc010deb8,0xc(%esp)
c0101f12:	c0 
c0101f13:	c7 44 24 08 73 de 10 	movl   $0xc010de73,0x8(%esp)
c0101f1a:	c0 
c0101f1b:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f22:	00 
c0101f23:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0101f2a:	e8 c5 ee ff ff       	call   c0100df4 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f2f:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f36:	77 0f                	ja     c0101f47 <ide_write_secs+0x78>
c0101f38:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f3b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f3e:	01 d0                	add    %edx,%eax
c0101f40:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f45:	76 24                	jbe    c0101f6b <ide_write_secs+0x9c>
c0101f47:	c7 44 24 0c e0 de 10 	movl   $0xc010dee0,0xc(%esp)
c0101f4e:	c0 
c0101f4f:	c7 44 24 08 73 de 10 	movl   $0xc010de73,0x8(%esp)
c0101f56:	c0 
c0101f57:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f5e:	00 
c0101f5f:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0101f66:	e8 89 ee ff ff       	call   c0100df4 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f6b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f6f:	66 d1 e8             	shr    %ax
c0101f72:	0f b7 c0             	movzwl %ax,%eax
c0101f75:	0f b7 04 85 28 de 10 	movzwl -0x3fef21d8(,%eax,4),%eax
c0101f7c:	c0 
c0101f7d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f81:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f85:	66 d1 e8             	shr    %ax
c0101f88:	0f b7 c0             	movzwl %ax,%eax
c0101f8b:	0f b7 04 85 2a de 10 	movzwl -0x3fef21d6(,%eax,4),%eax
c0101f92:	c0 
c0101f93:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101f97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f9b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fa2:	00 
c0101fa3:	89 04 24             	mov    %eax,(%esp)
c0101fa6:	e8 cd f8 ff ff       	call   c0101878 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fab:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101faf:	83 c0 02             	add    $0x2,%eax
c0101fb2:	0f b7 c0             	movzwl %ax,%eax
c0101fb5:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fb9:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fbd:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fc1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fc5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101fc6:	8b 45 14             	mov    0x14(%ebp),%eax
c0101fc9:	0f b6 c0             	movzbl %al,%eax
c0101fcc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fd0:	83 c2 02             	add    $0x2,%edx
c0101fd3:	0f b7 d2             	movzwl %dx,%edx
c0101fd6:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fda:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101fdd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101fe1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101fe5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101fe6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fe9:	0f b6 c0             	movzbl %al,%eax
c0101fec:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ff0:	83 c2 03             	add    $0x3,%edx
c0101ff3:	0f b7 d2             	movzwl %dx,%edx
c0101ff6:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101ffa:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101ffd:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102001:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102005:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102006:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102009:	c1 e8 08             	shr    $0x8,%eax
c010200c:	0f b6 c0             	movzbl %al,%eax
c010200f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102013:	83 c2 04             	add    $0x4,%edx
c0102016:	0f b7 d2             	movzwl %dx,%edx
c0102019:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c010201d:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102020:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102024:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102028:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0102029:	8b 45 0c             	mov    0xc(%ebp),%eax
c010202c:	c1 e8 10             	shr    $0x10,%eax
c010202f:	0f b6 c0             	movzbl %al,%eax
c0102032:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102036:	83 c2 05             	add    $0x5,%edx
c0102039:	0f b7 d2             	movzwl %dx,%edx
c010203c:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102040:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102043:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102047:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010204b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010204c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102050:	83 e0 01             	and    $0x1,%eax
c0102053:	89 c2                	mov    %eax,%edx
c0102055:	c1 e2 04             	shl    $0x4,%edx
c0102058:	8b 45 0c             	mov    0xc(%ebp),%eax
c010205b:	c1 e8 18             	shr    $0x18,%eax
c010205e:	83 e0 0f             	and    $0xf,%eax
c0102061:	09 d0                	or     %edx,%eax
c0102063:	83 c8 e0             	or     $0xffffffe0,%eax
c0102066:	0f b6 c0             	movzbl %al,%eax
c0102069:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010206d:	83 c2 06             	add    $0x6,%edx
c0102070:	0f b7 d2             	movzwl %dx,%edx
c0102073:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102077:	88 45 d9             	mov    %al,-0x27(%ebp)
c010207a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010207e:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102082:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102083:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102087:	83 c0 07             	add    $0x7,%eax
c010208a:	0f b7 c0             	movzwl %ax,%eax
c010208d:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0102091:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0102095:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102099:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010209d:	ee                   	out    %al,(%dx)

    int ret = 0;
c010209e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020a5:	eb 58                	jmp    c01020ff <ide_write_secs+0x230>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020a7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020ab:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020b2:	00 
c01020b3:	89 04 24             	mov    %eax,(%esp)
c01020b6:	e8 bd f7 ff ff       	call   c0101878 <ide_wait_ready>
c01020bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020c2:	75 43                	jne    c0102107 <ide_write_secs+0x238>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020c4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01020ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020d1:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01020db:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020de:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01020e1:	89 ce                	mov    %ecx,%esi
c01020e3:	89 d3                	mov    %edx,%ebx
c01020e5:	89 d9                	mov    %ebx,%ecx
c01020e7:	89 c2                	mov    %eax,%edx
c01020e9:	fc                   	cld    
c01020ea:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020ec:	89 cb                	mov    %ecx,%ebx
c01020ee:	89 75 cc             	mov    %esi,-0x34(%ebp)
c01020f1:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020f4:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01020f8:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01020ff:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102103:	75 a2                	jne    c01020a7 <ide_write_secs+0x1d8>
c0102105:	eb 01                	jmp    c0102108 <ide_write_secs+0x239>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0102107:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102108:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010210b:	83 c4 50             	add    $0x50,%esp
c010210e:	5b                   	pop    %ebx
c010210f:	5e                   	pop    %esi
c0102110:	5d                   	pop    %ebp
c0102111:	c3                   	ret    
c0102112:	66 90                	xchg   %ax,%ax

c0102114 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102114:	55                   	push   %ebp
c0102115:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102117:	fb                   	sti    
    sti();
}
c0102118:	5d                   	pop    %ebp
c0102119:	c3                   	ret    

c010211a <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010211a:	55                   	push   %ebp
c010211b:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010211d:	fa                   	cli    
    cli();
}
c010211e:	5d                   	pop    %ebp
c010211f:	c3                   	ret    

c0102120 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102120:	55                   	push   %ebp
c0102121:	89 e5                	mov    %esp,%ebp
c0102123:	83 ec 14             	sub    $0x14,%esp
c0102126:	8b 45 08             	mov    0x8(%ebp),%eax
c0102129:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010212d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102131:	66 a3 70 25 13 c0    	mov    %ax,0xc0132570
    if (did_init) {
c0102137:	a1 60 3b 1c c0       	mov    0xc01c3b60,%eax
c010213c:	85 c0                	test   %eax,%eax
c010213e:	74 36                	je     c0102176 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102140:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102144:	0f b6 c0             	movzbl %al,%eax
c0102147:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010214d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102150:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102154:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102158:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102159:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010215d:	66 c1 e8 08          	shr    $0x8,%ax
c0102161:	0f b6 c0             	movzbl %al,%eax
c0102164:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010216a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010216d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102171:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102175:	ee                   	out    %al,(%dx)
    }
}
c0102176:	c9                   	leave  
c0102177:	c3                   	ret    

c0102178 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102178:	55                   	push   %ebp
c0102179:	89 e5                	mov    %esp,%ebp
c010217b:	53                   	push   %ebx
c010217c:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010217f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102182:	ba 01 00 00 00       	mov    $0x1,%edx
c0102187:	89 d3                	mov    %edx,%ebx
c0102189:	89 c1                	mov    %eax,%ecx
c010218b:	d3 e3                	shl    %cl,%ebx
c010218d:	89 d8                	mov    %ebx,%eax
c010218f:	89 c2                	mov    %eax,%edx
c0102191:	f7 d2                	not    %edx
c0102193:	0f b7 05 70 25 13 c0 	movzwl 0xc0132570,%eax
c010219a:	21 d0                	and    %edx,%eax
c010219c:	0f b7 c0             	movzwl %ax,%eax
c010219f:	89 04 24             	mov    %eax,(%esp)
c01021a2:	e8 79 ff ff ff       	call   c0102120 <pic_setmask>
}
c01021a7:	83 c4 04             	add    $0x4,%esp
c01021aa:	5b                   	pop    %ebx
c01021ab:	5d                   	pop    %ebp
c01021ac:	c3                   	ret    

c01021ad <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021ad:	55                   	push   %ebp
c01021ae:	89 e5                	mov    %esp,%ebp
c01021b0:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021b3:	c7 05 60 3b 1c c0 01 	movl   $0x1,0xc01c3b60
c01021ba:	00 00 00 
c01021bd:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021c3:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021c7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021cb:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021cf:	ee                   	out    %al,(%dx)
c01021d0:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021d6:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021da:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021de:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021e2:	ee                   	out    %al,(%dx)
c01021e3:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021e9:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021ed:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021f1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021f5:	ee                   	out    %al,(%dx)
c01021f6:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c01021fc:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102200:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102204:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102208:	ee                   	out    %al,(%dx)
c0102209:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010220f:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102213:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102217:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010221b:	ee                   	out    %al,(%dx)
c010221c:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102222:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102226:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010222a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010222e:	ee                   	out    %al,(%dx)
c010222f:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102235:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102239:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010223d:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102241:	ee                   	out    %al,(%dx)
c0102242:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102248:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010224c:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102250:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102254:	ee                   	out    %al,(%dx)
c0102255:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010225b:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010225f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102263:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102267:	ee                   	out    %al,(%dx)
c0102268:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010226e:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102272:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102276:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010227a:	ee                   	out    %al,(%dx)
c010227b:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102281:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102285:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102289:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010228d:	ee                   	out    %al,(%dx)
c010228e:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0102294:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0102298:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010229c:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022a0:	ee                   	out    %al,(%dx)
c01022a1:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022a7:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022ab:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022af:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022b3:	ee                   	out    %al,(%dx)
c01022b4:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022ba:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022be:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022c2:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022c6:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022c7:	0f b7 05 70 25 13 c0 	movzwl 0xc0132570,%eax
c01022ce:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022d2:	74 12                	je     c01022e6 <pic_init+0x139>
        pic_setmask(irq_mask);
c01022d4:	0f b7 05 70 25 13 c0 	movzwl 0xc0132570,%eax
c01022db:	0f b7 c0             	movzwl %ax,%eax
c01022de:	89 04 24             	mov    %eax,(%esp)
c01022e1:	e8 3a fe ff ff       	call   c0102120 <pic_setmask>
    }
}
c01022e6:	c9                   	leave  
c01022e7:	c3                   	ret    

c01022e8 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022e8:	55                   	push   %ebp
c01022e9:	89 e5                	mov    %esp,%ebp
c01022eb:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022ee:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022f5:	00 
c01022f6:	c7 04 24 20 df 10 c0 	movl   $0xc010df20,(%esp)
c01022fd:	e8 61 e0 ff ff       	call   c0100363 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102302:	c9                   	leave  
c0102303:	c3                   	ret    

c0102304 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102304:	55                   	push   %ebp
c0102305:	89 e5                	mov    %esp,%ebp
c0102307:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here

      extern uintptr_t __vectors[];
      int i;
      for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++)
c010230a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102311:	e9 c0 00 00 00       	jmp    c01023d6 <idt_init+0xd2>
	  SETGATE(idt[i], 1, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102316:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102319:	8b 04 85 00 26 13 c0 	mov    -0x3fecda00(,%eax,4),%eax
c0102320:	89 c2                	mov    %eax,%edx
c0102322:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102325:	66 89 14 c5 80 3b 1c 	mov    %dx,-0x3fe3c480(,%eax,8)
c010232c:	c0 
c010232d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102330:	66 c7 04 c5 82 3b 1c 	movw   $0x8,-0x3fe3c47e(,%eax,8)
c0102337:	c0 08 00 
c010233a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010233d:	0f b6 14 c5 84 3b 1c 	movzbl -0x3fe3c47c(,%eax,8),%edx
c0102344:	c0 
c0102345:	83 e2 e0             	and    $0xffffffe0,%edx
c0102348:	88 14 c5 84 3b 1c c0 	mov    %dl,-0x3fe3c47c(,%eax,8)
c010234f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102352:	0f b6 14 c5 84 3b 1c 	movzbl -0x3fe3c47c(,%eax,8),%edx
c0102359:	c0 
c010235a:	83 e2 1f             	and    $0x1f,%edx
c010235d:	88 14 c5 84 3b 1c c0 	mov    %dl,-0x3fe3c47c(,%eax,8)
c0102364:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102367:	0f b6 14 c5 85 3b 1c 	movzbl -0x3fe3c47b(,%eax,8),%edx
c010236e:	c0 
c010236f:	83 ca 0f             	or     $0xf,%edx
c0102372:	88 14 c5 85 3b 1c c0 	mov    %dl,-0x3fe3c47b(,%eax,8)
c0102379:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010237c:	0f b6 14 c5 85 3b 1c 	movzbl -0x3fe3c47b(,%eax,8),%edx
c0102383:	c0 
c0102384:	83 e2 ef             	and    $0xffffffef,%edx
c0102387:	88 14 c5 85 3b 1c c0 	mov    %dl,-0x3fe3c47b(,%eax,8)
c010238e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102391:	0f b6 14 c5 85 3b 1c 	movzbl -0x3fe3c47b(,%eax,8),%edx
c0102398:	c0 
c0102399:	83 e2 9f             	and    $0xffffff9f,%edx
c010239c:	88 14 c5 85 3b 1c c0 	mov    %dl,-0x3fe3c47b(,%eax,8)
c01023a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023a6:	0f b6 14 c5 85 3b 1c 	movzbl -0x3fe3c47b(,%eax,8),%edx
c01023ad:	c0 
c01023ae:	83 ca 80             	or     $0xffffff80,%edx
c01023b1:	88 14 c5 85 3b 1c c0 	mov    %dl,-0x3fe3c47b(,%eax,8)
c01023b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023bb:	8b 04 85 00 26 13 c0 	mov    -0x3fecda00(,%eax,4),%eax
c01023c2:	c1 e8 10             	shr    $0x10,%eax
c01023c5:	89 c2                	mov    %eax,%edx
c01023c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ca:	66 89 14 c5 86 3b 1c 	mov    %dx,-0x3fe3c47a(,%eax,8)
c01023d1:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here

      extern uintptr_t __vectors[];
      int i;
      for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++)
c01023d2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d9:	3d ff 00 00 00       	cmp    $0xff,%eax
c01023de:	0f 86 32 ff ff ff    	jbe    c0102316 <idt_init+0x12>
	  SETGATE(idt[i], 1, GD_KTEXT, __vectors[i], DPL_KERNEL);
      SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c01023e4:	a1 00 28 13 c0       	mov    0xc0132800,%eax
c01023e9:	66 a3 80 3f 1c c0    	mov    %ax,0xc01c3f80
c01023ef:	66 c7 05 82 3f 1c c0 	movw   $0x8,0xc01c3f82
c01023f6:	08 00 
c01023f8:	0f b6 05 84 3f 1c c0 	movzbl 0xc01c3f84,%eax
c01023ff:	83 e0 e0             	and    $0xffffffe0,%eax
c0102402:	a2 84 3f 1c c0       	mov    %al,0xc01c3f84
c0102407:	0f b6 05 84 3f 1c c0 	movzbl 0xc01c3f84,%eax
c010240e:	83 e0 1f             	and    $0x1f,%eax
c0102411:	a2 84 3f 1c c0       	mov    %al,0xc01c3f84
c0102416:	0f b6 05 85 3f 1c c0 	movzbl 0xc01c3f85,%eax
c010241d:	83 c8 0f             	or     $0xf,%eax
c0102420:	a2 85 3f 1c c0       	mov    %al,0xc01c3f85
c0102425:	0f b6 05 85 3f 1c c0 	movzbl 0xc01c3f85,%eax
c010242c:	83 e0 ef             	and    $0xffffffef,%eax
c010242f:	a2 85 3f 1c c0       	mov    %al,0xc01c3f85
c0102434:	0f b6 05 85 3f 1c c0 	movzbl 0xc01c3f85,%eax
c010243b:	83 c8 60             	or     $0x60,%eax
c010243e:	a2 85 3f 1c c0       	mov    %al,0xc01c3f85
c0102443:	0f b6 05 85 3f 1c c0 	movzbl 0xc01c3f85,%eax
c010244a:	83 c8 80             	or     $0xffffff80,%eax
c010244d:	a2 85 3f 1c c0       	mov    %al,0xc01c3f85
c0102452:	a1 00 28 13 c0       	mov    0xc0132800,%eax
c0102457:	c1 e8 10             	shr    $0x10,%eax
c010245a:	66 a3 86 3f 1c c0    	mov    %ax,0xc01c3f86
c0102460:	c7 45 f8 80 25 13 c0 	movl   $0xc0132580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102467:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010246a:	0f 01 18             	lidtl  (%eax)
      lidt(&idt_pd);
}
c010246d:	c9                   	leave  
c010246e:	c3                   	ret    

c010246f <trapname>:

static const char *
trapname(int trapno) {
c010246f:	55                   	push   %ebp
c0102470:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102472:	8b 45 08             	mov    0x8(%ebp),%eax
c0102475:	83 f8 13             	cmp    $0x13,%eax
c0102478:	77 0c                	ja     c0102486 <trapname+0x17>
        return excnames[trapno];
c010247a:	8b 45 08             	mov    0x8(%ebp),%eax
c010247d:	8b 04 85 a0 e3 10 c0 	mov    -0x3fef1c60(,%eax,4),%eax
c0102484:	eb 18                	jmp    c010249e <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102486:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010248a:	7e 0d                	jle    c0102499 <trapname+0x2a>
c010248c:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102490:	7f 07                	jg     c0102499 <trapname+0x2a>
        return "Hardware Interrupt";
c0102492:	b8 2a df 10 c0       	mov    $0xc010df2a,%eax
c0102497:	eb 05                	jmp    c010249e <trapname+0x2f>
    }
    return "(unknown trap)";
c0102499:	b8 3d df 10 c0       	mov    $0xc010df3d,%eax
}
c010249e:	5d                   	pop    %ebp
c010249f:	c3                   	ret    

c01024a0 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024a0:	55                   	push   %ebp
c01024a1:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a6:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024aa:	66 83 f8 08          	cmp    $0x8,%ax
c01024ae:	0f 94 c0             	sete   %al
c01024b1:	0f b6 c0             	movzbl %al,%eax
}
c01024b4:	5d                   	pop    %ebp
c01024b5:	c3                   	ret    

c01024b6 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024b6:	55                   	push   %ebp
c01024b7:	89 e5                	mov    %esp,%ebp
c01024b9:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01024bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024c3:	c7 04 24 7e df 10 c0 	movl   $0xc010df7e,(%esp)
c01024ca:	e8 94 de ff ff       	call   c0100363 <cprintf>
    print_regs(&tf->tf_regs);
c01024cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d2:	89 04 24             	mov    %eax,(%esp)
c01024d5:	e8 a1 01 00 00       	call   c010267b <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024da:	8b 45 08             	mov    0x8(%ebp),%eax
c01024dd:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024e1:	0f b7 c0             	movzwl %ax,%eax
c01024e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024e8:	c7 04 24 8f df 10 c0 	movl   $0xc010df8f,(%esp)
c01024ef:	e8 6f de ff ff       	call   c0100363 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01024f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f7:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01024fb:	0f b7 c0             	movzwl %ax,%eax
c01024fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102502:	c7 04 24 a2 df 10 c0 	movl   $0xc010dfa2,(%esp)
c0102509:	e8 55 de ff ff       	call   c0100363 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010250e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102511:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102515:	0f b7 c0             	movzwl %ax,%eax
c0102518:	89 44 24 04          	mov    %eax,0x4(%esp)
c010251c:	c7 04 24 b5 df 10 c0 	movl   $0xc010dfb5,(%esp)
c0102523:	e8 3b de ff ff       	call   c0100363 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102528:	8b 45 08             	mov    0x8(%ebp),%eax
c010252b:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010252f:	0f b7 c0             	movzwl %ax,%eax
c0102532:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102536:	c7 04 24 c8 df 10 c0 	movl   $0xc010dfc8,(%esp)
c010253d:	e8 21 de ff ff       	call   c0100363 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102542:	8b 45 08             	mov    0x8(%ebp),%eax
c0102545:	8b 40 30             	mov    0x30(%eax),%eax
c0102548:	89 04 24             	mov    %eax,(%esp)
c010254b:	e8 1f ff ff ff       	call   c010246f <trapname>
c0102550:	8b 55 08             	mov    0x8(%ebp),%edx
c0102553:	8b 52 30             	mov    0x30(%edx),%edx
c0102556:	89 44 24 08          	mov    %eax,0x8(%esp)
c010255a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010255e:	c7 04 24 db df 10 c0 	movl   $0xc010dfdb,(%esp)
c0102565:	e8 f9 dd ff ff       	call   c0100363 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010256a:	8b 45 08             	mov    0x8(%ebp),%eax
c010256d:	8b 40 34             	mov    0x34(%eax),%eax
c0102570:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102574:	c7 04 24 ed df 10 c0 	movl   $0xc010dfed,(%esp)
c010257b:	e8 e3 dd ff ff       	call   c0100363 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102580:	8b 45 08             	mov    0x8(%ebp),%eax
c0102583:	8b 40 38             	mov    0x38(%eax),%eax
c0102586:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258a:	c7 04 24 fc df 10 c0 	movl   $0xc010dffc,(%esp)
c0102591:	e8 cd dd ff ff       	call   c0100363 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102596:	8b 45 08             	mov    0x8(%ebp),%eax
c0102599:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010259d:	0f b7 c0             	movzwl %ax,%eax
c01025a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a4:	c7 04 24 0b e0 10 c0 	movl   $0xc010e00b,(%esp)
c01025ab:	e8 b3 dd ff ff       	call   c0100363 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b3:	8b 40 40             	mov    0x40(%eax),%eax
c01025b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ba:	c7 04 24 1e e0 10 c0 	movl   $0xc010e01e,(%esp)
c01025c1:	e8 9d dd ff ff       	call   c0100363 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025cd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025d4:	eb 3e                	jmp    c0102614 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d9:	8b 50 40             	mov    0x40(%eax),%edx
c01025dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025df:	21 d0                	and    %edx,%eax
c01025e1:	85 c0                	test   %eax,%eax
c01025e3:	74 28                	je     c010260d <print_trapframe+0x157>
c01025e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025e8:	8b 04 85 a0 25 13 c0 	mov    -0x3fecda60(,%eax,4),%eax
c01025ef:	85 c0                	test   %eax,%eax
c01025f1:	74 1a                	je     c010260d <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01025f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f6:	8b 04 85 a0 25 13 c0 	mov    -0x3fecda60(,%eax,4),%eax
c01025fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102601:	c7 04 24 2d e0 10 c0 	movl   $0xc010e02d,(%esp)
c0102608:	e8 56 dd ff ff       	call   c0100363 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010260d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102611:	d1 65 f0             	shll   -0x10(%ebp)
c0102614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102617:	83 f8 17             	cmp    $0x17,%eax
c010261a:	76 ba                	jbe    c01025d6 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010261c:	8b 45 08             	mov    0x8(%ebp),%eax
c010261f:	8b 40 40             	mov    0x40(%eax),%eax
c0102622:	25 00 30 00 00       	and    $0x3000,%eax
c0102627:	c1 e8 0c             	shr    $0xc,%eax
c010262a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262e:	c7 04 24 31 e0 10 c0 	movl   $0xc010e031,(%esp)
c0102635:	e8 29 dd ff ff       	call   c0100363 <cprintf>

    if (!trap_in_kernel(tf)) {
c010263a:	8b 45 08             	mov    0x8(%ebp),%eax
c010263d:	89 04 24             	mov    %eax,(%esp)
c0102640:	e8 5b fe ff ff       	call   c01024a0 <trap_in_kernel>
c0102645:	85 c0                	test   %eax,%eax
c0102647:	75 30                	jne    c0102679 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102649:	8b 45 08             	mov    0x8(%ebp),%eax
c010264c:	8b 40 44             	mov    0x44(%eax),%eax
c010264f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102653:	c7 04 24 3a e0 10 c0 	movl   $0xc010e03a,(%esp)
c010265a:	e8 04 dd ff ff       	call   c0100363 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010265f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102662:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102666:	0f b7 c0             	movzwl %ax,%eax
c0102669:	89 44 24 04          	mov    %eax,0x4(%esp)
c010266d:	c7 04 24 49 e0 10 c0 	movl   $0xc010e049,(%esp)
c0102674:	e8 ea dc ff ff       	call   c0100363 <cprintf>
    }
}
c0102679:	c9                   	leave  
c010267a:	c3                   	ret    

c010267b <print_regs>:

void
print_regs(struct pushregs *regs) {
c010267b:	55                   	push   %ebp
c010267c:	89 e5                	mov    %esp,%ebp
c010267e:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102681:	8b 45 08             	mov    0x8(%ebp),%eax
c0102684:	8b 00                	mov    (%eax),%eax
c0102686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010268a:	c7 04 24 5c e0 10 c0 	movl   $0xc010e05c,(%esp)
c0102691:	e8 cd dc ff ff       	call   c0100363 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102696:	8b 45 08             	mov    0x8(%ebp),%eax
c0102699:	8b 40 04             	mov    0x4(%eax),%eax
c010269c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a0:	c7 04 24 6b e0 10 c0 	movl   $0xc010e06b,(%esp)
c01026a7:	e8 b7 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01026af:	8b 40 08             	mov    0x8(%eax),%eax
c01026b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026b6:	c7 04 24 7a e0 10 c0 	movl   $0xc010e07a,(%esp)
c01026bd:	e8 a1 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01026c5:	8b 40 0c             	mov    0xc(%eax),%eax
c01026c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026cc:	c7 04 24 89 e0 10 c0 	movl   $0xc010e089,(%esp)
c01026d3:	e8 8b dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026db:	8b 40 10             	mov    0x10(%eax),%eax
c01026de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e2:	c7 04 24 98 e0 10 c0 	movl   $0xc010e098,(%esp)
c01026e9:	e8 75 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f1:	8b 40 14             	mov    0x14(%eax),%eax
c01026f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f8:	c7 04 24 a7 e0 10 c0 	movl   $0xc010e0a7,(%esp)
c01026ff:	e8 5f dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102704:	8b 45 08             	mov    0x8(%ebp),%eax
c0102707:	8b 40 18             	mov    0x18(%eax),%eax
c010270a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010270e:	c7 04 24 b6 e0 10 c0 	movl   $0xc010e0b6,(%esp)
c0102715:	e8 49 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010271a:	8b 45 08             	mov    0x8(%ebp),%eax
c010271d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102720:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102724:	c7 04 24 c5 e0 10 c0 	movl   $0xc010e0c5,(%esp)
c010272b:	e8 33 dc ff ff       	call   c0100363 <cprintf>
}
c0102730:	c9                   	leave  
c0102731:	c3                   	ret    

c0102732 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102732:	55                   	push   %ebp
c0102733:	89 e5                	mov    %esp,%ebp
c0102735:	53                   	push   %ebx
c0102736:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102739:	8b 45 08             	mov    0x8(%ebp),%eax
c010273c:	8b 40 34             	mov    0x34(%eax),%eax
c010273f:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102742:	85 c0                	test   %eax,%eax
c0102744:	74 07                	je     c010274d <print_pgfault+0x1b>
c0102746:	b9 d4 e0 10 c0       	mov    $0xc010e0d4,%ecx
c010274b:	eb 05                	jmp    c0102752 <print_pgfault+0x20>
c010274d:	b9 e5 e0 10 c0       	mov    $0xc010e0e5,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102752:	8b 45 08             	mov    0x8(%ebp),%eax
c0102755:	8b 40 34             	mov    0x34(%eax),%eax
c0102758:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010275b:	85 c0                	test   %eax,%eax
c010275d:	74 07                	je     c0102766 <print_pgfault+0x34>
c010275f:	ba 57 00 00 00       	mov    $0x57,%edx
c0102764:	eb 05                	jmp    c010276b <print_pgfault+0x39>
c0102766:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010276b:	8b 45 08             	mov    0x8(%ebp),%eax
c010276e:	8b 40 34             	mov    0x34(%eax),%eax
c0102771:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102774:	85 c0                	test   %eax,%eax
c0102776:	74 07                	je     c010277f <print_pgfault+0x4d>
c0102778:	b8 55 00 00 00       	mov    $0x55,%eax
c010277d:	eb 05                	jmp    c0102784 <print_pgfault+0x52>
c010277f:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102784:	0f 20 d3             	mov    %cr2,%ebx
c0102787:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c010278a:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010278d:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102791:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102795:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102799:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010279d:	c7 04 24 f4 e0 10 c0 	movl   $0xc010e0f4,(%esp)
c01027a4:	e8 ba db ff ff       	call   c0100363 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027a9:	83 c4 34             	add    $0x34,%esp
c01027ac:	5b                   	pop    %ebx
c01027ad:	5d                   	pop    %ebp
c01027ae:	c3                   	ret    

c01027af <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027af:	55                   	push   %ebp
c01027b0:	89 e5                	mov    %esp,%ebp
c01027b2:	53                   	push   %ebx
c01027b3:	83 ec 24             	sub    $0x24,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027b6:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c01027bb:	85 c0                	test   %eax,%eax
c01027bd:	74 0b                	je     c01027ca <pgfault_handler+0x1b>
            print_pgfault(tf);
c01027bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01027c2:	89 04 24             	mov    %eax,(%esp)
c01027c5:	e8 68 ff ff ff       	call   c0102732 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027ca:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c01027cf:	85 c0                	test   %eax,%eax
c01027d1:	74 3d                	je     c0102810 <pgfault_handler+0x61>
        assert(current == idleproc);
c01027d3:	8b 15 48 44 1c c0    	mov    0xc01c4448,%edx
c01027d9:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c01027de:	39 c2                	cmp    %eax,%edx
c01027e0:	74 24                	je     c0102806 <pgfault_handler+0x57>
c01027e2:	c7 44 24 0c 17 e1 10 	movl   $0xc010e117,0xc(%esp)
c01027e9:	c0 
c01027ea:	c7 44 24 08 2b e1 10 	movl   $0xc010e12b,0x8(%esp)
c01027f1:	c0 
c01027f2:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c01027f9:	00 
c01027fa:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c0102801:	e8 ee e5 ff ff       	call   c0100df4 <__panic>
        mm = check_mm_struct;
c0102806:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c010280b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010280e:	eb 46                	jmp    c0102856 <pgfault_handler+0xa7>
    }
    else {
        if (current == NULL) {
c0102810:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102815:	85 c0                	test   %eax,%eax
c0102817:	75 32                	jne    c010284b <pgfault_handler+0x9c>
            print_trapframe(tf);
c0102819:	8b 45 08             	mov    0x8(%ebp),%eax
c010281c:	89 04 24             	mov    %eax,(%esp)
c010281f:	e8 92 fc ff ff       	call   c01024b6 <print_trapframe>
            print_pgfault(tf);
c0102824:	8b 45 08             	mov    0x8(%ebp),%eax
c0102827:	89 04 24             	mov    %eax,(%esp)
c010282a:	e8 03 ff ff ff       	call   c0102732 <print_pgfault>
            panic("unhandled page fault.\n");
c010282f:	c7 44 24 08 51 e1 10 	movl   $0xc010e151,0x8(%esp)
c0102836:	c0 
c0102837:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010283e:	00 
c010283f:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c0102846:	e8 a9 e5 ff ff       	call   c0100df4 <__panic>
        }
        mm = current->mm;
c010284b:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102850:	8b 40 18             	mov    0x18(%eax),%eax
c0102853:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102856:	0f 20 d3             	mov    %cr2,%ebx
c0102859:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr2;
c010285c:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010285f:	89 c2                	mov    %eax,%edx
c0102861:	8b 45 08             	mov    0x8(%ebp),%eax
c0102864:	8b 40 34             	mov    0x34(%eax),%eax
c0102867:	89 54 24 08          	mov    %edx,0x8(%esp)
c010286b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010286f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102872:	89 04 24             	mov    %eax,(%esp)
c0102875:	e8 61 64 00 00       	call   c0108cdb <do_pgfault>
}
c010287a:	83 c4 24             	add    $0x24,%esp
c010287d:	5b                   	pop    %ebx
c010287e:	5d                   	pop    %ebp
c010287f:	c3                   	ret    

c0102880 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102880:	55                   	push   %ebp
c0102881:	89 e5                	mov    %esp,%ebp
c0102883:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0102886:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c010288d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102890:	8b 40 30             	mov    0x30(%eax),%eax
c0102893:	83 f8 2f             	cmp    $0x2f,%eax
c0102896:	77 38                	ja     c01028d0 <trap_dispatch+0x50>
c0102898:	83 f8 2e             	cmp    $0x2e,%eax
c010289b:	0f 83 d5 01 00 00    	jae    c0102a76 <trap_dispatch+0x1f6>
c01028a1:	83 f8 20             	cmp    $0x20,%eax
c01028a4:	0f 84 02 01 00 00    	je     c01029ac <trap_dispatch+0x12c>
c01028aa:	83 f8 20             	cmp    $0x20,%eax
c01028ad:	77 0a                	ja     c01028b9 <trap_dispatch+0x39>
c01028af:	83 f8 0e             	cmp    $0xe,%eax
c01028b2:	74 3e                	je     c01028f2 <trap_dispatch+0x72>
c01028b4:	e9 75 01 00 00       	jmp    c0102a2e <trap_dispatch+0x1ae>
c01028b9:	83 f8 21             	cmp    $0x21,%eax
c01028bc:	0f 84 2a 01 00 00    	je     c01029ec <trap_dispatch+0x16c>
c01028c2:	83 f8 24             	cmp    $0x24,%eax
c01028c5:	0f 84 f8 00 00 00    	je     c01029c3 <trap_dispatch+0x143>
c01028cb:	e9 5e 01 00 00       	jmp    c0102a2e <trap_dispatch+0x1ae>
c01028d0:	83 f8 78             	cmp    $0x78,%eax
c01028d3:	0f 82 55 01 00 00    	jb     c0102a2e <trap_dispatch+0x1ae>
c01028d9:	83 f8 79             	cmp    $0x79,%eax
c01028dc:	0f 86 30 01 00 00    	jbe    c0102a12 <trap_dispatch+0x192>
c01028e2:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028e7:	0f 84 b5 00 00 00    	je     c01029a2 <trap_dispatch+0x122>
c01028ed:	e9 3c 01 00 00       	jmp    c0102a2e <trap_dispatch+0x1ae>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01028f5:	89 04 24             	mov    %eax,(%esp)
c01028f8:	e8 b2 fe ff ff       	call   c01027af <pgfault_handler>
c01028fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102900:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102904:	0f 84 6f 01 00 00    	je     c0102a79 <trap_dispatch+0x1f9>
            print_trapframe(tf);
c010290a:	8b 45 08             	mov    0x8(%ebp),%eax
c010290d:	89 04 24             	mov    %eax,(%esp)
c0102910:	e8 a1 fb ff ff       	call   c01024b6 <print_trapframe>
            if (current == NULL) {
c0102915:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010291a:	85 c0                	test   %eax,%eax
c010291c:	75 23                	jne    c0102941 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010291e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102921:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102925:	c7 44 24 08 68 e1 10 	movl   $0xc010e168,0x8(%esp)
c010292c:	c0 
c010292d:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102934:	00 
c0102935:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c010293c:	e8 b3 e4 ff ff       	call   c0100df4 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102941:	8b 45 08             	mov    0x8(%ebp),%eax
c0102944:	89 04 24             	mov    %eax,(%esp)
c0102947:	e8 54 fb ff ff       	call   c01024a0 <trap_in_kernel>
c010294c:	85 c0                	test   %eax,%eax
c010294e:	74 23                	je     c0102973 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102950:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102953:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102957:	c7 44 24 08 88 e1 10 	movl   $0xc010e188,0x8(%esp)
c010295e:	c0 
c010295f:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0102966:	00 
c0102967:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c010296e:	e8 81 e4 ff ff       	call   c0100df4 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102973:	c7 04 24 b6 e1 10 c0 	movl   $0xc010e1b6,(%esp)
c010297a:	e8 e4 d9 ff ff       	call   c0100363 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010297f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102982:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102986:	c7 44 24 08 cc e1 10 	movl   $0xc010e1cc,0x8(%esp)
c010298d:	c0 
c010298e:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0102995:	00 
c0102996:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c010299d:	e8 52 e4 ff ff       	call   c0100df4 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c01029a2:	e8 60 a3 00 00       	call   c010cd07 <syscall>
        break;
c01029a7:	e9 ce 00 00 00       	jmp    c0102a7a <trap_dispatch+0x1fa>
	if (++ticks == TICK_NUM) {
	    //print_ticks();
	    ticks = 0;
            current->need_resched = 1;
	}*/
        ++ticks;
c01029ac:	a1 d8 64 1c c0       	mov    0xc01c64d8,%eax
c01029b1:	83 c0 01             	add    $0x1,%eax
c01029b4:	a3 d8 64 1c c0       	mov    %eax,0xc01c64d8
        run_timer_list();
c01029b9:	e8 8f a0 00 00       	call   c010ca4d <run_timer_list>

        break;
c01029be:	e9 b7 00 00 00       	jmp    c0102a7a <trap_dispatch+0x1fa>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c01029c3:	e8 42 ee ff ff       	call   c010180a <cons_getc>
c01029c8:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01029cb:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029cf:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029d3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01029d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029db:	c7 04 24 f5 e1 10 c0 	movl   $0xc010e1f5,(%esp)
c01029e2:	e8 7c d9 ff ff       	call   c0100363 <cprintf>
        break;
c01029e7:	e9 8e 00 00 00       	jmp    c0102a7a <trap_dispatch+0x1fa>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01029ec:	e8 19 ee ff ff       	call   c010180a <cons_getc>
c01029f1:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c01029f4:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029f8:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029fc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102a00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a04:	c7 04 24 07 e2 10 c0 	movl   $0xc010e207,(%esp)
c0102a0b:	e8 53 d9 ff ff       	call   c0100363 <cprintf>
        break;
c0102a10:	eb 68                	jmp    c0102a7a <trap_dispatch+0x1fa>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a12:	c7 44 24 08 16 e2 10 	movl   $0xc010e216,0x8(%esp)
c0102a19:	c0 
c0102a1a:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c0102a21:	00 
c0102a22:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c0102a29:	e8 c6 e3 ff ff       	call   c0100df4 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a31:	89 04 24             	mov    %eax,(%esp)
c0102a34:	e8 7d fa ff ff       	call   c01024b6 <print_trapframe>
        if (current != NULL) {
c0102a39:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102a3e:	85 c0                	test   %eax,%eax
c0102a40:	74 18                	je     c0102a5a <trap_dispatch+0x1da>
            cprintf("unhandled trap.\n");
c0102a42:	c7 04 24 26 e2 10 c0 	movl   $0xc010e226,(%esp)
c0102a49:	e8 15 d9 ff ff       	call   c0100363 <cprintf>
            do_exit(-E_KILLED);
c0102a4e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a55:	e8 8a 87 00 00       	call   c010b1e4 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a5a:	c7 44 24 08 37 e2 10 	movl   $0xc010e237,0x8(%esp)
c0102a61:	c0 
c0102a62:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c0102a69:	00 
c0102a6a:	c7 04 24 40 e1 10 c0 	movl   $0xc010e140,(%esp)
c0102a71:	e8 7e e3 ff ff       	call   c0100df4 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a76:	90                   	nop
c0102a77:	eb 01                	jmp    c0102a7a <trap_dispatch+0x1fa>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a79:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a7a:	c9                   	leave  
c0102a7b:	c3                   	ret    

c0102a7c <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a7c:	55                   	push   %ebp
c0102a7d:	89 e5                	mov    %esp,%ebp
c0102a7f:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a82:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102a87:	85 c0                	test   %eax,%eax
c0102a89:	75 0d                	jne    c0102a98 <trap+0x1c>
        trap_dispatch(tf);
c0102a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a8e:	89 04 24             	mov    %eax,(%esp)
c0102a91:	e8 ea fd ff ff       	call   c0102880 <trap_dispatch>
c0102a96:	eb 6c                	jmp    c0102b04 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a98:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102a9d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102aa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102aa3:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102aa8:	8b 55 08             	mov    0x8(%ebp),%edx
c0102aab:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102aae:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab1:	89 04 24             	mov    %eax,(%esp)
c0102ab4:	e8 e7 f9 ff ff       	call   c01024a0 <trap_in_kernel>
c0102ab9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0102abf:	89 04 24             	mov    %eax,(%esp)
c0102ac2:	e8 b9 fd ff ff       	call   c0102880 <trap_dispatch>
    
        current->tf = otf;
c0102ac7:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102acc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102acf:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102ad2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ad6:	75 2c                	jne    c0102b04 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102ad8:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102add:	8b 40 44             	mov    0x44(%eax),%eax
c0102ae0:	83 e0 01             	and    $0x1,%eax
c0102ae3:	85 c0                	test   %eax,%eax
c0102ae5:	74 0c                	je     c0102af3 <trap+0x77>
                do_exit(-E_KILLED);
c0102ae7:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102aee:	e8 f1 86 00 00       	call   c010b1e4 <do_exit>
            }
            if (current->need_resched) {
c0102af3:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c0102af8:	8b 40 10             	mov    0x10(%eax),%eax
c0102afb:	85 c0                	test   %eax,%eax
c0102afd:	74 05                	je     c0102b04 <trap+0x88>
                schedule();
c0102aff:	e8 bc 9c 00 00       	call   c010c7c0 <schedule>
            }
        }
    }
}
c0102b04:	c9                   	leave  
c0102b05:	c3                   	ret    
c0102b06:	66 90                	xchg   %ax,%ax

c0102b08 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b08:	1e                   	push   %ds
    pushl %es
c0102b09:	06                   	push   %es
    pushl %fs
c0102b0a:	0f a0                	push   %fs
    pushl %gs
c0102b0c:	0f a8                	push   %gs
    pushal
c0102b0e:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b0f:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b14:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b16:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b18:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b19:	e8 5e ff ff ff       	call   c0102a7c <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b1e:	5c                   	pop    %esp

c0102b1f <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b1f:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b20:	0f a9                	pop    %gs
    popl %fs
c0102b22:	0f a1                	pop    %fs
    popl %es
c0102b24:	07                   	pop    %es
    popl %ds
c0102b25:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b26:	83 c4 08             	add    $0x8,%esp
    iret
c0102b29:	cf                   	iret   

c0102b2a <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b2a:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b2e:	e9 ec ff ff ff       	jmp    c0102b1f <__trapret>
c0102b33:	90                   	nop

c0102b34 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b34:	6a 00                	push   $0x0
  pushl $0
c0102b36:	6a 00                	push   $0x0
  jmp __alltraps
c0102b38:	e9 cb ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b3d <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b3d:	6a 00                	push   $0x0
  pushl $1
c0102b3f:	6a 01                	push   $0x1
  jmp __alltraps
c0102b41:	e9 c2 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b46 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b46:	6a 00                	push   $0x0
  pushl $2
c0102b48:	6a 02                	push   $0x2
  jmp __alltraps
c0102b4a:	e9 b9 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b4f <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b4f:	6a 00                	push   $0x0
  pushl $3
c0102b51:	6a 03                	push   $0x3
  jmp __alltraps
c0102b53:	e9 b0 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b58 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $4
c0102b5a:	6a 04                	push   $0x4
  jmp __alltraps
c0102b5c:	e9 a7 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b61 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $5
c0102b63:	6a 05                	push   $0x5
  jmp __alltraps
c0102b65:	e9 9e ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b6a <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $6
c0102b6c:	6a 06                	push   $0x6
  jmp __alltraps
c0102b6e:	e9 95 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b73 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b73:	6a 00                	push   $0x0
  pushl $7
c0102b75:	6a 07                	push   $0x7
  jmp __alltraps
c0102b77:	e9 8c ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b7c <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b7c:	6a 08                	push   $0x8
  jmp __alltraps
c0102b7e:	e9 85 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b83 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b83:	6a 09                	push   $0x9
  jmp __alltraps
c0102b85:	e9 7e ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b8a <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b8a:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b8c:	e9 77 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b91 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b91:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b93:	e9 70 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b98 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b98:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b9a:	e9 69 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b9f <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b9f:	6a 0d                	push   $0xd
  jmp __alltraps
c0102ba1:	e9 62 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102ba6 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102ba6:	6a 0e                	push   $0xe
  jmp __alltraps
c0102ba8:	e9 5b ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bad <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bad:	6a 00                	push   $0x0
  pushl $15
c0102baf:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bb1:	e9 52 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bb6 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bb6:	6a 00                	push   $0x0
  pushl $16
c0102bb8:	6a 10                	push   $0x10
  jmp __alltraps
c0102bba:	e9 49 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bbf <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bbf:	6a 11                	push   $0x11
  jmp __alltraps
c0102bc1:	e9 42 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bc6 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bc6:	6a 00                	push   $0x0
  pushl $18
c0102bc8:	6a 12                	push   $0x12
  jmp __alltraps
c0102bca:	e9 39 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bcf <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bcf:	6a 00                	push   $0x0
  pushl $19
c0102bd1:	6a 13                	push   $0x13
  jmp __alltraps
c0102bd3:	e9 30 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bd8 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bd8:	6a 00                	push   $0x0
  pushl $20
c0102bda:	6a 14                	push   $0x14
  jmp __alltraps
c0102bdc:	e9 27 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102be1 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102be1:	6a 00                	push   $0x0
  pushl $21
c0102be3:	6a 15                	push   $0x15
  jmp __alltraps
c0102be5:	e9 1e ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bea <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bea:	6a 00                	push   $0x0
  pushl $22
c0102bec:	6a 16                	push   $0x16
  jmp __alltraps
c0102bee:	e9 15 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bf3 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bf3:	6a 00                	push   $0x0
  pushl $23
c0102bf5:	6a 17                	push   $0x17
  jmp __alltraps
c0102bf7:	e9 0c ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bfc <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bfc:	6a 00                	push   $0x0
  pushl $24
c0102bfe:	6a 18                	push   $0x18
  jmp __alltraps
c0102c00:	e9 03 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102c05 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c05:	6a 00                	push   $0x0
  pushl $25
c0102c07:	6a 19                	push   $0x19
  jmp __alltraps
c0102c09:	e9 fa fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c0e <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c0e:	6a 00                	push   $0x0
  pushl $26
c0102c10:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c12:	e9 f1 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c17 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c17:	6a 00                	push   $0x0
  pushl $27
c0102c19:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c1b:	e9 e8 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c20 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c20:	6a 00                	push   $0x0
  pushl $28
c0102c22:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c24:	e9 df fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c29 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c29:	6a 00                	push   $0x0
  pushl $29
c0102c2b:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c2d:	e9 d6 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c32 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c32:	6a 00                	push   $0x0
  pushl $30
c0102c34:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c36:	e9 cd fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c3b <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c3b:	6a 00                	push   $0x0
  pushl $31
c0102c3d:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c3f:	e9 c4 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c44 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c44:	6a 00                	push   $0x0
  pushl $32
c0102c46:	6a 20                	push   $0x20
  jmp __alltraps
c0102c48:	e9 bb fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c4d <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c4d:	6a 00                	push   $0x0
  pushl $33
c0102c4f:	6a 21                	push   $0x21
  jmp __alltraps
c0102c51:	e9 b2 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c56 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c56:	6a 00                	push   $0x0
  pushl $34
c0102c58:	6a 22                	push   $0x22
  jmp __alltraps
c0102c5a:	e9 a9 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c5f <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c5f:	6a 00                	push   $0x0
  pushl $35
c0102c61:	6a 23                	push   $0x23
  jmp __alltraps
c0102c63:	e9 a0 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c68 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c68:	6a 00                	push   $0x0
  pushl $36
c0102c6a:	6a 24                	push   $0x24
  jmp __alltraps
c0102c6c:	e9 97 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c71 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c71:	6a 00                	push   $0x0
  pushl $37
c0102c73:	6a 25                	push   $0x25
  jmp __alltraps
c0102c75:	e9 8e fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c7a <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c7a:	6a 00                	push   $0x0
  pushl $38
c0102c7c:	6a 26                	push   $0x26
  jmp __alltraps
c0102c7e:	e9 85 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c83 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c83:	6a 00                	push   $0x0
  pushl $39
c0102c85:	6a 27                	push   $0x27
  jmp __alltraps
c0102c87:	e9 7c fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c8c <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c8c:	6a 00                	push   $0x0
  pushl $40
c0102c8e:	6a 28                	push   $0x28
  jmp __alltraps
c0102c90:	e9 73 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c95 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c95:	6a 00                	push   $0x0
  pushl $41
c0102c97:	6a 29                	push   $0x29
  jmp __alltraps
c0102c99:	e9 6a fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c9e <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c9e:	6a 00                	push   $0x0
  pushl $42
c0102ca0:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102ca2:	e9 61 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102ca7 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102ca7:	6a 00                	push   $0x0
  pushl $43
c0102ca9:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cab:	e9 58 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cb0 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cb0:	6a 00                	push   $0x0
  pushl $44
c0102cb2:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cb4:	e9 4f fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cb9 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cb9:	6a 00                	push   $0x0
  pushl $45
c0102cbb:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cbd:	e9 46 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cc2 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cc2:	6a 00                	push   $0x0
  pushl $46
c0102cc4:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cc6:	e9 3d fe ff ff       	jmp    c0102b08 <__alltraps>

c0102ccb <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ccb:	6a 00                	push   $0x0
  pushl $47
c0102ccd:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102ccf:	e9 34 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cd4 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cd4:	6a 00                	push   $0x0
  pushl $48
c0102cd6:	6a 30                	push   $0x30
  jmp __alltraps
c0102cd8:	e9 2b fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cdd <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cdd:	6a 00                	push   $0x0
  pushl $49
c0102cdf:	6a 31                	push   $0x31
  jmp __alltraps
c0102ce1:	e9 22 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102ce6 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102ce6:	6a 00                	push   $0x0
  pushl $50
c0102ce8:	6a 32                	push   $0x32
  jmp __alltraps
c0102cea:	e9 19 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cef <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cef:	6a 00                	push   $0x0
  pushl $51
c0102cf1:	6a 33                	push   $0x33
  jmp __alltraps
c0102cf3:	e9 10 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cf8 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cf8:	6a 00                	push   $0x0
  pushl $52
c0102cfa:	6a 34                	push   $0x34
  jmp __alltraps
c0102cfc:	e9 07 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102d01 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d01:	6a 00                	push   $0x0
  pushl $53
c0102d03:	6a 35                	push   $0x35
  jmp __alltraps
c0102d05:	e9 fe fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d0a <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d0a:	6a 00                	push   $0x0
  pushl $54
c0102d0c:	6a 36                	push   $0x36
  jmp __alltraps
c0102d0e:	e9 f5 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d13 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d13:	6a 00                	push   $0x0
  pushl $55
c0102d15:	6a 37                	push   $0x37
  jmp __alltraps
c0102d17:	e9 ec fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d1c <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d1c:	6a 00                	push   $0x0
  pushl $56
c0102d1e:	6a 38                	push   $0x38
  jmp __alltraps
c0102d20:	e9 e3 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d25 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d25:	6a 00                	push   $0x0
  pushl $57
c0102d27:	6a 39                	push   $0x39
  jmp __alltraps
c0102d29:	e9 da fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d2e <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d2e:	6a 00                	push   $0x0
  pushl $58
c0102d30:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d32:	e9 d1 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d37 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d37:	6a 00                	push   $0x0
  pushl $59
c0102d39:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d3b:	e9 c8 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d40 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d40:	6a 00                	push   $0x0
  pushl $60
c0102d42:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d44:	e9 bf fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d49 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d49:	6a 00                	push   $0x0
  pushl $61
c0102d4b:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d4d:	e9 b6 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d52 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d52:	6a 00                	push   $0x0
  pushl $62
c0102d54:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d56:	e9 ad fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d5b <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d5b:	6a 00                	push   $0x0
  pushl $63
c0102d5d:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d5f:	e9 a4 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d64 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d64:	6a 00                	push   $0x0
  pushl $64
c0102d66:	6a 40                	push   $0x40
  jmp __alltraps
c0102d68:	e9 9b fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d6d <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d6d:	6a 00                	push   $0x0
  pushl $65
c0102d6f:	6a 41                	push   $0x41
  jmp __alltraps
c0102d71:	e9 92 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d76 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d76:	6a 00                	push   $0x0
  pushl $66
c0102d78:	6a 42                	push   $0x42
  jmp __alltraps
c0102d7a:	e9 89 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d7f <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d7f:	6a 00                	push   $0x0
  pushl $67
c0102d81:	6a 43                	push   $0x43
  jmp __alltraps
c0102d83:	e9 80 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d88 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d88:	6a 00                	push   $0x0
  pushl $68
c0102d8a:	6a 44                	push   $0x44
  jmp __alltraps
c0102d8c:	e9 77 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d91 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d91:	6a 00                	push   $0x0
  pushl $69
c0102d93:	6a 45                	push   $0x45
  jmp __alltraps
c0102d95:	e9 6e fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d9a <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d9a:	6a 00                	push   $0x0
  pushl $70
c0102d9c:	6a 46                	push   $0x46
  jmp __alltraps
c0102d9e:	e9 65 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102da3 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102da3:	6a 00                	push   $0x0
  pushl $71
c0102da5:	6a 47                	push   $0x47
  jmp __alltraps
c0102da7:	e9 5c fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dac <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dac:	6a 00                	push   $0x0
  pushl $72
c0102dae:	6a 48                	push   $0x48
  jmp __alltraps
c0102db0:	e9 53 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102db5 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102db5:	6a 00                	push   $0x0
  pushl $73
c0102db7:	6a 49                	push   $0x49
  jmp __alltraps
c0102db9:	e9 4a fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dbe <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dbe:	6a 00                	push   $0x0
  pushl $74
c0102dc0:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dc2:	e9 41 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dc7 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dc7:	6a 00                	push   $0x0
  pushl $75
c0102dc9:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dcb:	e9 38 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dd0 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dd0:	6a 00                	push   $0x0
  pushl $76
c0102dd2:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dd4:	e9 2f fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dd9 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dd9:	6a 00                	push   $0x0
  pushl $77
c0102ddb:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ddd:	e9 26 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102de2 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102de2:	6a 00                	push   $0x0
  pushl $78
c0102de4:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102de6:	e9 1d fd ff ff       	jmp    c0102b08 <__alltraps>

c0102deb <vector79>:
.globl vector79
vector79:
  pushl $0
c0102deb:	6a 00                	push   $0x0
  pushl $79
c0102ded:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102def:	e9 14 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102df4 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102df4:	6a 00                	push   $0x0
  pushl $80
c0102df6:	6a 50                	push   $0x50
  jmp __alltraps
c0102df8:	e9 0b fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dfd <vector81>:
.globl vector81
vector81:
  pushl $0
c0102dfd:	6a 00                	push   $0x0
  pushl $81
c0102dff:	6a 51                	push   $0x51
  jmp __alltraps
c0102e01:	e9 02 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102e06 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e06:	6a 00                	push   $0x0
  pushl $82
c0102e08:	6a 52                	push   $0x52
  jmp __alltraps
c0102e0a:	e9 f9 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e0f <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e0f:	6a 00                	push   $0x0
  pushl $83
c0102e11:	6a 53                	push   $0x53
  jmp __alltraps
c0102e13:	e9 f0 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e18 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e18:	6a 00                	push   $0x0
  pushl $84
c0102e1a:	6a 54                	push   $0x54
  jmp __alltraps
c0102e1c:	e9 e7 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e21 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e21:	6a 00                	push   $0x0
  pushl $85
c0102e23:	6a 55                	push   $0x55
  jmp __alltraps
c0102e25:	e9 de fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e2a <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e2a:	6a 00                	push   $0x0
  pushl $86
c0102e2c:	6a 56                	push   $0x56
  jmp __alltraps
c0102e2e:	e9 d5 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e33 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e33:	6a 00                	push   $0x0
  pushl $87
c0102e35:	6a 57                	push   $0x57
  jmp __alltraps
c0102e37:	e9 cc fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e3c <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e3c:	6a 00                	push   $0x0
  pushl $88
c0102e3e:	6a 58                	push   $0x58
  jmp __alltraps
c0102e40:	e9 c3 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e45 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e45:	6a 00                	push   $0x0
  pushl $89
c0102e47:	6a 59                	push   $0x59
  jmp __alltraps
c0102e49:	e9 ba fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e4e <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e4e:	6a 00                	push   $0x0
  pushl $90
c0102e50:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e52:	e9 b1 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e57 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e57:	6a 00                	push   $0x0
  pushl $91
c0102e59:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e5b:	e9 a8 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e60 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e60:	6a 00                	push   $0x0
  pushl $92
c0102e62:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e64:	e9 9f fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e69 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e69:	6a 00                	push   $0x0
  pushl $93
c0102e6b:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e6d:	e9 96 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e72 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e72:	6a 00                	push   $0x0
  pushl $94
c0102e74:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e76:	e9 8d fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e7b <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e7b:	6a 00                	push   $0x0
  pushl $95
c0102e7d:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e7f:	e9 84 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e84 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e84:	6a 00                	push   $0x0
  pushl $96
c0102e86:	6a 60                	push   $0x60
  jmp __alltraps
c0102e88:	e9 7b fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e8d <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e8d:	6a 00                	push   $0x0
  pushl $97
c0102e8f:	6a 61                	push   $0x61
  jmp __alltraps
c0102e91:	e9 72 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e96 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e96:	6a 00                	push   $0x0
  pushl $98
c0102e98:	6a 62                	push   $0x62
  jmp __alltraps
c0102e9a:	e9 69 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e9f <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e9f:	6a 00                	push   $0x0
  pushl $99
c0102ea1:	6a 63                	push   $0x63
  jmp __alltraps
c0102ea3:	e9 60 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ea8 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102ea8:	6a 00                	push   $0x0
  pushl $100
c0102eaa:	6a 64                	push   $0x64
  jmp __alltraps
c0102eac:	e9 57 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102eb1 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102eb1:	6a 00                	push   $0x0
  pushl $101
c0102eb3:	6a 65                	push   $0x65
  jmp __alltraps
c0102eb5:	e9 4e fc ff ff       	jmp    c0102b08 <__alltraps>

c0102eba <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eba:	6a 00                	push   $0x0
  pushl $102
c0102ebc:	6a 66                	push   $0x66
  jmp __alltraps
c0102ebe:	e9 45 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ec3 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ec3:	6a 00                	push   $0x0
  pushl $103
c0102ec5:	6a 67                	push   $0x67
  jmp __alltraps
c0102ec7:	e9 3c fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ecc <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ecc:	6a 00                	push   $0x0
  pushl $104
c0102ece:	6a 68                	push   $0x68
  jmp __alltraps
c0102ed0:	e9 33 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ed5 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ed5:	6a 00                	push   $0x0
  pushl $105
c0102ed7:	6a 69                	push   $0x69
  jmp __alltraps
c0102ed9:	e9 2a fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ede <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ede:	6a 00                	push   $0x0
  pushl $106
c0102ee0:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ee2:	e9 21 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ee7 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ee7:	6a 00                	push   $0x0
  pushl $107
c0102ee9:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102eeb:	e9 18 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ef0 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ef0:	6a 00                	push   $0x0
  pushl $108
c0102ef2:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102ef4:	e9 0f fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ef9 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ef9:	6a 00                	push   $0x0
  pushl $109
c0102efb:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102efd:	e9 06 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102f02 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f02:	6a 00                	push   $0x0
  pushl $110
c0102f04:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f06:	e9 fd fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f0b <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f0b:	6a 00                	push   $0x0
  pushl $111
c0102f0d:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f0f:	e9 f4 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f14 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f14:	6a 00                	push   $0x0
  pushl $112
c0102f16:	6a 70                	push   $0x70
  jmp __alltraps
c0102f18:	e9 eb fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f1d <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f1d:	6a 00                	push   $0x0
  pushl $113
c0102f1f:	6a 71                	push   $0x71
  jmp __alltraps
c0102f21:	e9 e2 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f26 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f26:	6a 00                	push   $0x0
  pushl $114
c0102f28:	6a 72                	push   $0x72
  jmp __alltraps
c0102f2a:	e9 d9 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f2f <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f2f:	6a 00                	push   $0x0
  pushl $115
c0102f31:	6a 73                	push   $0x73
  jmp __alltraps
c0102f33:	e9 d0 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f38 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f38:	6a 00                	push   $0x0
  pushl $116
c0102f3a:	6a 74                	push   $0x74
  jmp __alltraps
c0102f3c:	e9 c7 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f41 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f41:	6a 00                	push   $0x0
  pushl $117
c0102f43:	6a 75                	push   $0x75
  jmp __alltraps
c0102f45:	e9 be fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f4a <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f4a:	6a 00                	push   $0x0
  pushl $118
c0102f4c:	6a 76                	push   $0x76
  jmp __alltraps
c0102f4e:	e9 b5 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f53 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f53:	6a 00                	push   $0x0
  pushl $119
c0102f55:	6a 77                	push   $0x77
  jmp __alltraps
c0102f57:	e9 ac fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f5c <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f5c:	6a 00                	push   $0x0
  pushl $120
c0102f5e:	6a 78                	push   $0x78
  jmp __alltraps
c0102f60:	e9 a3 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f65 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f65:	6a 00                	push   $0x0
  pushl $121
c0102f67:	6a 79                	push   $0x79
  jmp __alltraps
c0102f69:	e9 9a fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f6e <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f6e:	6a 00                	push   $0x0
  pushl $122
c0102f70:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f72:	e9 91 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f77 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f77:	6a 00                	push   $0x0
  pushl $123
c0102f79:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f7b:	e9 88 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f80 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f80:	6a 00                	push   $0x0
  pushl $124
c0102f82:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f84:	e9 7f fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f89 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f89:	6a 00                	push   $0x0
  pushl $125
c0102f8b:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f8d:	e9 76 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f92 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f92:	6a 00                	push   $0x0
  pushl $126
c0102f94:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f96:	e9 6d fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f9b <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f9b:	6a 00                	push   $0x0
  pushl $127
c0102f9d:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f9f:	e9 64 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fa4 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fa4:	6a 00                	push   $0x0
  pushl $128
c0102fa6:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fab:	e9 58 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fb0 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fb0:	6a 00                	push   $0x0
  pushl $129
c0102fb2:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fb7:	e9 4c fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fbc <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fbc:	6a 00                	push   $0x0
  pushl $130
c0102fbe:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fc3:	e9 40 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fc8 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fc8:	6a 00                	push   $0x0
  pushl $131
c0102fca:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fcf:	e9 34 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fd4 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fd4:	6a 00                	push   $0x0
  pushl $132
c0102fd6:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fdb:	e9 28 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fe0 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fe0:	6a 00                	push   $0x0
  pushl $133
c0102fe2:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fe7:	e9 1c fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fec <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fec:	6a 00                	push   $0x0
  pushl $134
c0102fee:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102ff3:	e9 10 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102ff8 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102ff8:	6a 00                	push   $0x0
  pushl $135
c0102ffa:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102fff:	e9 04 fb ff ff       	jmp    c0102b08 <__alltraps>

c0103004 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103004:	6a 00                	push   $0x0
  pushl $136
c0103006:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010300b:	e9 f8 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103010 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103010:	6a 00                	push   $0x0
  pushl $137
c0103012:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103017:	e9 ec fa ff ff       	jmp    c0102b08 <__alltraps>

c010301c <vector138>:
.globl vector138
vector138:
  pushl $0
c010301c:	6a 00                	push   $0x0
  pushl $138
c010301e:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103023:	e9 e0 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103028 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103028:	6a 00                	push   $0x0
  pushl $139
c010302a:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010302f:	e9 d4 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103034 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103034:	6a 00                	push   $0x0
  pushl $140
c0103036:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010303b:	e9 c8 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103040 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103040:	6a 00                	push   $0x0
  pushl $141
c0103042:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103047:	e9 bc fa ff ff       	jmp    c0102b08 <__alltraps>

c010304c <vector142>:
.globl vector142
vector142:
  pushl $0
c010304c:	6a 00                	push   $0x0
  pushl $142
c010304e:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103053:	e9 b0 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103058 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103058:	6a 00                	push   $0x0
  pushl $143
c010305a:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010305f:	e9 a4 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103064 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103064:	6a 00                	push   $0x0
  pushl $144
c0103066:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010306b:	e9 98 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103070 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103070:	6a 00                	push   $0x0
  pushl $145
c0103072:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103077:	e9 8c fa ff ff       	jmp    c0102b08 <__alltraps>

c010307c <vector146>:
.globl vector146
vector146:
  pushl $0
c010307c:	6a 00                	push   $0x0
  pushl $146
c010307e:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103083:	e9 80 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103088 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103088:	6a 00                	push   $0x0
  pushl $147
c010308a:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010308f:	e9 74 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103094 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103094:	6a 00                	push   $0x0
  pushl $148
c0103096:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010309b:	e9 68 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030a0 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030a0:	6a 00                	push   $0x0
  pushl $149
c01030a2:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030a7:	e9 5c fa ff ff       	jmp    c0102b08 <__alltraps>

c01030ac <vector150>:
.globl vector150
vector150:
  pushl $0
c01030ac:	6a 00                	push   $0x0
  pushl $150
c01030ae:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030b3:	e9 50 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030b8 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030b8:	6a 00                	push   $0x0
  pushl $151
c01030ba:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030bf:	e9 44 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030c4 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030c4:	6a 00                	push   $0x0
  pushl $152
c01030c6:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030cb:	e9 38 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030d0 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030d0:	6a 00                	push   $0x0
  pushl $153
c01030d2:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030d7:	e9 2c fa ff ff       	jmp    c0102b08 <__alltraps>

c01030dc <vector154>:
.globl vector154
vector154:
  pushl $0
c01030dc:	6a 00                	push   $0x0
  pushl $154
c01030de:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030e3:	e9 20 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030e8 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030e8:	6a 00                	push   $0x0
  pushl $155
c01030ea:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030ef:	e9 14 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030f4 <vector156>:
.globl vector156
vector156:
  pushl $0
c01030f4:	6a 00                	push   $0x0
  pushl $156
c01030f6:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030fb:	e9 08 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103100 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103100:	6a 00                	push   $0x0
  pushl $157
c0103102:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103107:	e9 fc f9 ff ff       	jmp    c0102b08 <__alltraps>

c010310c <vector158>:
.globl vector158
vector158:
  pushl $0
c010310c:	6a 00                	push   $0x0
  pushl $158
c010310e:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103113:	e9 f0 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103118 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103118:	6a 00                	push   $0x0
  pushl $159
c010311a:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010311f:	e9 e4 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103124 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103124:	6a 00                	push   $0x0
  pushl $160
c0103126:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010312b:	e9 d8 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103130 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103130:	6a 00                	push   $0x0
  pushl $161
c0103132:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103137:	e9 cc f9 ff ff       	jmp    c0102b08 <__alltraps>

c010313c <vector162>:
.globl vector162
vector162:
  pushl $0
c010313c:	6a 00                	push   $0x0
  pushl $162
c010313e:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103143:	e9 c0 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103148 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103148:	6a 00                	push   $0x0
  pushl $163
c010314a:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010314f:	e9 b4 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103154 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103154:	6a 00                	push   $0x0
  pushl $164
c0103156:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010315b:	e9 a8 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103160 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103160:	6a 00                	push   $0x0
  pushl $165
c0103162:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103167:	e9 9c f9 ff ff       	jmp    c0102b08 <__alltraps>

c010316c <vector166>:
.globl vector166
vector166:
  pushl $0
c010316c:	6a 00                	push   $0x0
  pushl $166
c010316e:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103173:	e9 90 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103178 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103178:	6a 00                	push   $0x0
  pushl $167
c010317a:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010317f:	e9 84 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103184 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103184:	6a 00                	push   $0x0
  pushl $168
c0103186:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010318b:	e9 78 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103190 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103190:	6a 00                	push   $0x0
  pushl $169
c0103192:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103197:	e9 6c f9 ff ff       	jmp    c0102b08 <__alltraps>

c010319c <vector170>:
.globl vector170
vector170:
  pushl $0
c010319c:	6a 00                	push   $0x0
  pushl $170
c010319e:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031a3:	e9 60 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031a8 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031a8:	6a 00                	push   $0x0
  pushl $171
c01031aa:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031af:	e9 54 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031b4 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031b4:	6a 00                	push   $0x0
  pushl $172
c01031b6:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031bb:	e9 48 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031c0 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031c0:	6a 00                	push   $0x0
  pushl $173
c01031c2:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031c7:	e9 3c f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031cc <vector174>:
.globl vector174
vector174:
  pushl $0
c01031cc:	6a 00                	push   $0x0
  pushl $174
c01031ce:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031d3:	e9 30 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031d8 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031d8:	6a 00                	push   $0x0
  pushl $175
c01031da:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031df:	e9 24 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031e4 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031e4:	6a 00                	push   $0x0
  pushl $176
c01031e6:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031eb:	e9 18 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031f0 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031f0:	6a 00                	push   $0x0
  pushl $177
c01031f2:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031f7:	e9 0c f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031fc <vector178>:
.globl vector178
vector178:
  pushl $0
c01031fc:	6a 00                	push   $0x0
  pushl $178
c01031fe:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103203:	e9 00 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103208 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103208:	6a 00                	push   $0x0
  pushl $179
c010320a:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010320f:	e9 f4 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103214 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103214:	6a 00                	push   $0x0
  pushl $180
c0103216:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010321b:	e9 e8 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103220 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103220:	6a 00                	push   $0x0
  pushl $181
c0103222:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103227:	e9 dc f8 ff ff       	jmp    c0102b08 <__alltraps>

c010322c <vector182>:
.globl vector182
vector182:
  pushl $0
c010322c:	6a 00                	push   $0x0
  pushl $182
c010322e:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103233:	e9 d0 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103238 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103238:	6a 00                	push   $0x0
  pushl $183
c010323a:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010323f:	e9 c4 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103244 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103244:	6a 00                	push   $0x0
  pushl $184
c0103246:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010324b:	e9 b8 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103250 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103250:	6a 00                	push   $0x0
  pushl $185
c0103252:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103257:	e9 ac f8 ff ff       	jmp    c0102b08 <__alltraps>

c010325c <vector186>:
.globl vector186
vector186:
  pushl $0
c010325c:	6a 00                	push   $0x0
  pushl $186
c010325e:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103263:	e9 a0 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103268 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103268:	6a 00                	push   $0x0
  pushl $187
c010326a:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010326f:	e9 94 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103274 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103274:	6a 00                	push   $0x0
  pushl $188
c0103276:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010327b:	e9 88 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103280 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103280:	6a 00                	push   $0x0
  pushl $189
c0103282:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103287:	e9 7c f8 ff ff       	jmp    c0102b08 <__alltraps>

c010328c <vector190>:
.globl vector190
vector190:
  pushl $0
c010328c:	6a 00                	push   $0x0
  pushl $190
c010328e:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103293:	e9 70 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103298 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103298:	6a 00                	push   $0x0
  pushl $191
c010329a:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c010329f:	e9 64 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032a4 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032a4:	6a 00                	push   $0x0
  pushl $192
c01032a6:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032ab:	e9 58 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032b0 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032b0:	6a 00                	push   $0x0
  pushl $193
c01032b2:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032b7:	e9 4c f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032bc <vector194>:
.globl vector194
vector194:
  pushl $0
c01032bc:	6a 00                	push   $0x0
  pushl $194
c01032be:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032c3:	e9 40 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032c8 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032c8:	6a 00                	push   $0x0
  pushl $195
c01032ca:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032cf:	e9 34 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032d4 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032d4:	6a 00                	push   $0x0
  pushl $196
c01032d6:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032db:	e9 28 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032e0 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032e0:	6a 00                	push   $0x0
  pushl $197
c01032e2:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032e7:	e9 1c f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032ec <vector198>:
.globl vector198
vector198:
  pushl $0
c01032ec:	6a 00                	push   $0x0
  pushl $198
c01032ee:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032f3:	e9 10 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032f8 <vector199>:
.globl vector199
vector199:
  pushl $0
c01032f8:	6a 00                	push   $0x0
  pushl $199
c01032fa:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032ff:	e9 04 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103304 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103304:	6a 00                	push   $0x0
  pushl $200
c0103306:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010330b:	e9 f8 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103310 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103310:	6a 00                	push   $0x0
  pushl $201
c0103312:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103317:	e9 ec f7 ff ff       	jmp    c0102b08 <__alltraps>

c010331c <vector202>:
.globl vector202
vector202:
  pushl $0
c010331c:	6a 00                	push   $0x0
  pushl $202
c010331e:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103323:	e9 e0 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103328 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103328:	6a 00                	push   $0x0
  pushl $203
c010332a:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010332f:	e9 d4 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103334 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103334:	6a 00                	push   $0x0
  pushl $204
c0103336:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010333b:	e9 c8 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103340 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103340:	6a 00                	push   $0x0
  pushl $205
c0103342:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103347:	e9 bc f7 ff ff       	jmp    c0102b08 <__alltraps>

c010334c <vector206>:
.globl vector206
vector206:
  pushl $0
c010334c:	6a 00                	push   $0x0
  pushl $206
c010334e:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103353:	e9 b0 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103358 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103358:	6a 00                	push   $0x0
  pushl $207
c010335a:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010335f:	e9 a4 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103364 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103364:	6a 00                	push   $0x0
  pushl $208
c0103366:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010336b:	e9 98 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103370 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103370:	6a 00                	push   $0x0
  pushl $209
c0103372:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103377:	e9 8c f7 ff ff       	jmp    c0102b08 <__alltraps>

c010337c <vector210>:
.globl vector210
vector210:
  pushl $0
c010337c:	6a 00                	push   $0x0
  pushl $210
c010337e:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103383:	e9 80 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103388 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103388:	6a 00                	push   $0x0
  pushl $211
c010338a:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010338f:	e9 74 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103394 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103394:	6a 00                	push   $0x0
  pushl $212
c0103396:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010339b:	e9 68 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033a0 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033a0:	6a 00                	push   $0x0
  pushl $213
c01033a2:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033a7:	e9 5c f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033ac <vector214>:
.globl vector214
vector214:
  pushl $0
c01033ac:	6a 00                	push   $0x0
  pushl $214
c01033ae:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033b3:	e9 50 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033b8 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033b8:	6a 00                	push   $0x0
  pushl $215
c01033ba:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033bf:	e9 44 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033c4 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033c4:	6a 00                	push   $0x0
  pushl $216
c01033c6:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033cb:	e9 38 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033d0 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033d0:	6a 00                	push   $0x0
  pushl $217
c01033d2:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033d7:	e9 2c f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033dc <vector218>:
.globl vector218
vector218:
  pushl $0
c01033dc:	6a 00                	push   $0x0
  pushl $218
c01033de:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033e3:	e9 20 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033e8 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033e8:	6a 00                	push   $0x0
  pushl $219
c01033ea:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033ef:	e9 14 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033f4 <vector220>:
.globl vector220
vector220:
  pushl $0
c01033f4:	6a 00                	push   $0x0
  pushl $220
c01033f6:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033fb:	e9 08 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103400 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103400:	6a 00                	push   $0x0
  pushl $221
c0103402:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103407:	e9 fc f6 ff ff       	jmp    c0102b08 <__alltraps>

c010340c <vector222>:
.globl vector222
vector222:
  pushl $0
c010340c:	6a 00                	push   $0x0
  pushl $222
c010340e:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103413:	e9 f0 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103418 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103418:	6a 00                	push   $0x0
  pushl $223
c010341a:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010341f:	e9 e4 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103424 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103424:	6a 00                	push   $0x0
  pushl $224
c0103426:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010342b:	e9 d8 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103430 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103430:	6a 00                	push   $0x0
  pushl $225
c0103432:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103437:	e9 cc f6 ff ff       	jmp    c0102b08 <__alltraps>

c010343c <vector226>:
.globl vector226
vector226:
  pushl $0
c010343c:	6a 00                	push   $0x0
  pushl $226
c010343e:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103443:	e9 c0 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103448 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103448:	6a 00                	push   $0x0
  pushl $227
c010344a:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010344f:	e9 b4 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103454 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103454:	6a 00                	push   $0x0
  pushl $228
c0103456:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010345b:	e9 a8 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103460 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103460:	6a 00                	push   $0x0
  pushl $229
c0103462:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103467:	e9 9c f6 ff ff       	jmp    c0102b08 <__alltraps>

c010346c <vector230>:
.globl vector230
vector230:
  pushl $0
c010346c:	6a 00                	push   $0x0
  pushl $230
c010346e:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103473:	e9 90 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103478 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103478:	6a 00                	push   $0x0
  pushl $231
c010347a:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010347f:	e9 84 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103484 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103484:	6a 00                	push   $0x0
  pushl $232
c0103486:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010348b:	e9 78 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103490 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103490:	6a 00                	push   $0x0
  pushl $233
c0103492:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103497:	e9 6c f6 ff ff       	jmp    c0102b08 <__alltraps>

c010349c <vector234>:
.globl vector234
vector234:
  pushl $0
c010349c:	6a 00                	push   $0x0
  pushl $234
c010349e:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034a3:	e9 60 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034a8 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034a8:	6a 00                	push   $0x0
  pushl $235
c01034aa:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034af:	e9 54 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034b4 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034b4:	6a 00                	push   $0x0
  pushl $236
c01034b6:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034bb:	e9 48 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034c0 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034c0:	6a 00                	push   $0x0
  pushl $237
c01034c2:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034c7:	e9 3c f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034cc <vector238>:
.globl vector238
vector238:
  pushl $0
c01034cc:	6a 00                	push   $0x0
  pushl $238
c01034ce:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034d3:	e9 30 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034d8 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034d8:	6a 00                	push   $0x0
  pushl $239
c01034da:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034df:	e9 24 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034e4 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034e4:	6a 00                	push   $0x0
  pushl $240
c01034e6:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034eb:	e9 18 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034f0 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034f0:	6a 00                	push   $0x0
  pushl $241
c01034f2:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034f7:	e9 0c f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034fc <vector242>:
.globl vector242
vector242:
  pushl $0
c01034fc:	6a 00                	push   $0x0
  pushl $242
c01034fe:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103503:	e9 00 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103508 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103508:	6a 00                	push   $0x0
  pushl $243
c010350a:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010350f:	e9 f4 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103514 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103514:	6a 00                	push   $0x0
  pushl $244
c0103516:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010351b:	e9 e8 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103520 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103520:	6a 00                	push   $0x0
  pushl $245
c0103522:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103527:	e9 dc f5 ff ff       	jmp    c0102b08 <__alltraps>

c010352c <vector246>:
.globl vector246
vector246:
  pushl $0
c010352c:	6a 00                	push   $0x0
  pushl $246
c010352e:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103533:	e9 d0 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103538 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103538:	6a 00                	push   $0x0
  pushl $247
c010353a:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010353f:	e9 c4 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103544 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103544:	6a 00                	push   $0x0
  pushl $248
c0103546:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010354b:	e9 b8 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103550 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103550:	6a 00                	push   $0x0
  pushl $249
c0103552:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103557:	e9 ac f5 ff ff       	jmp    c0102b08 <__alltraps>

c010355c <vector250>:
.globl vector250
vector250:
  pushl $0
c010355c:	6a 00                	push   $0x0
  pushl $250
c010355e:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103563:	e9 a0 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103568 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103568:	6a 00                	push   $0x0
  pushl $251
c010356a:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010356f:	e9 94 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103574 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103574:	6a 00                	push   $0x0
  pushl $252
c0103576:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010357b:	e9 88 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103580 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103580:	6a 00                	push   $0x0
  pushl $253
c0103582:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103587:	e9 7c f5 ff ff       	jmp    c0102b08 <__alltraps>

c010358c <vector254>:
.globl vector254
vector254:
  pushl $0
c010358c:	6a 00                	push   $0x0
  pushl $254
c010358e:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103593:	e9 70 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103598 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103598:	6a 00                	push   $0x0
  pushl $255
c010359a:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c010359f:	e9 64 f5 ff ff       	jmp    c0102b08 <__alltraps>

c01035a4 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035a4:	55                   	push   %ebp
c01035a5:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035a7:	8b 55 08             	mov    0x8(%ebp),%edx
c01035aa:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c01035af:	89 d1                	mov    %edx,%ecx
c01035b1:	29 c1                	sub    %eax,%ecx
c01035b3:	89 c8                	mov    %ecx,%eax
c01035b5:	c1 f8 05             	sar    $0x5,%eax
}
c01035b8:	5d                   	pop    %ebp
c01035b9:	c3                   	ret    

c01035ba <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035ba:	55                   	push   %ebp
c01035bb:	89 e5                	mov    %esp,%ebp
c01035bd:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01035c3:	89 04 24             	mov    %eax,(%esp)
c01035c6:	e8 d9 ff ff ff       	call   c01035a4 <page2ppn>
c01035cb:	c1 e0 0c             	shl    $0xc,%eax
}
c01035ce:	c9                   	leave  
c01035cf:	c3                   	ret    

c01035d0 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035d0:	55                   	push   %ebp
c01035d1:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d6:	8b 00                	mov    (%eax),%eax
}
c01035d8:	5d                   	pop    %ebp
c01035d9:	c3                   	ret    

c01035da <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035da:	55                   	push   %ebp
c01035db:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035e3:	89 10                	mov    %edx,(%eax)
}
c01035e5:	5d                   	pop    %ebp
c01035e6:	c3                   	ret    

c01035e7 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035e7:	55                   	push   %ebp
c01035e8:	89 e5                	mov    %esp,%ebp
c01035ea:	83 ec 10             	sub    $0x10,%esp
c01035ed:	c7 45 fc dc 64 1c c0 	movl   $0xc01c64dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035f7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01035fa:	89 50 04             	mov    %edx,0x4(%eax)
c01035fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103600:	8b 50 04             	mov    0x4(%eax),%edx
c0103603:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103606:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103608:	c7 05 e4 64 1c c0 00 	movl   $0x0,0xc01c64e4
c010360f:	00 00 00 
}
c0103612:	c9                   	leave  
c0103613:	c3                   	ret    

c0103614 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103614:	55                   	push   %ebp
c0103615:	89 e5                	mov    %esp,%ebp
c0103617:	53                   	push   %ebx
c0103618:	83 ec 54             	sub    $0x54,%esp
    assert(n > 0);
c010361b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010361f:	75 24                	jne    c0103645 <default_init_memmap+0x31>
c0103621:	c7 44 24 0c f0 e3 10 	movl   $0xc010e3f0,0xc(%esp)
c0103628:	c0 
c0103629:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103630:	c0 
c0103631:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103638:	00 
c0103639:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103640:	e8 af d7 ff ff       	call   c0100df4 <__panic>
    struct Page *p = base;
c0103645:	8b 45 08             	mov    0x8(%ebp),%eax
c0103648:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010364b:	eb 7d                	jmp    c01036ca <default_init_memmap+0xb6>
        assert(PageReserved(p));
c010364d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103650:	83 c0 04             	add    $0x4,%eax
c0103653:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010365a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010365d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103660:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103663:	0f a3 10             	bt     %edx,(%eax)
c0103666:	19 db                	sbb    %ebx,%ebx
c0103668:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    return oldbit != 0;
c010366b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010366f:	0f 95 c0             	setne  %al
c0103672:	0f b6 c0             	movzbl %al,%eax
c0103675:	85 c0                	test   %eax,%eax
c0103677:	75 24                	jne    c010369d <default_init_memmap+0x89>
c0103679:	c7 44 24 0c 21 e4 10 	movl   $0xc010e421,0xc(%esp)
c0103680:	c0 
c0103681:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103688:	c0 
c0103689:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0103690:	00 
c0103691:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103698:	e8 57 d7 ff ff       	call   c0100df4 <__panic>
        p->flags = p->property = 0;
c010369d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01036a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036aa:	8b 50 08             	mov    0x8(%eax),%edx
c01036ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b0:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01036b3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036ba:	00 
c01036bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036be:	89 04 24             	mov    %eax,(%esp)
c01036c1:	e8 14 ff ff ff       	call   c01035da <set_page_ref>

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c01036c6:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01036ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01036cd:	89 c2                	mov    %eax,%edx
c01036cf:	c1 e2 05             	shl    $0x5,%edx
c01036d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01036d5:	01 d0                	add    %edx,%eax
c01036d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01036da:	0f 85 6d ff ff ff    	jne    c010364d <default_init_memmap+0x39>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c01036e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01036e3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01036e6:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01036e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01036ec:	83 c0 04             	add    $0x4,%eax
c01036ef:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036ff:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0103702:	8b 15 e4 64 1c c0    	mov    0xc01c64e4,%edx
c0103708:	8b 45 0c             	mov    0xc(%ebp),%eax
c010370b:	01 d0                	add    %edx,%eax
c010370d:	a3 e4 64 1c c0       	mov    %eax,0xc01c64e4
    list_add(&free_list, &(base->page_link));
c0103712:	8b 45 08             	mov    0x8(%ebp),%eax
c0103715:	83 c0 0c             	add    $0xc,%eax
c0103718:	c7 45 dc dc 64 1c c0 	movl   $0xc01c64dc,-0x24(%ebp)
c010371f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103722:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103725:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103728:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010372b:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010372e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103731:	8b 40 04             	mov    0x4(%eax),%eax
c0103734:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103737:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010373a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010373d:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103740:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103743:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103746:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103749:	89 10                	mov    %edx,(%eax)
c010374b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010374e:	8b 10                	mov    (%eax),%edx
c0103750:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103753:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103756:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103759:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010375c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010375f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103762:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103765:	89 10                	mov    %edx,(%eax)
}
c0103767:	83 c4 54             	add    $0x54,%esp
c010376a:	5b                   	pop    %ebx
c010376b:	5d                   	pop    %ebp
c010376c:	c3                   	ret    

c010376d <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010376d:	55                   	push   %ebp
c010376e:	89 e5                	mov    %esp,%ebp
c0103770:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103773:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103777:	75 24                	jne    c010379d <default_alloc_pages+0x30>
c0103779:	c7 44 24 0c f0 e3 10 	movl   $0xc010e3f0,0xc(%esp)
c0103780:	c0 
c0103781:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103788:	c0 
c0103789:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0103790:	00 
c0103791:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103798:	e8 57 d6 ff ff       	call   c0100df4 <__panic>
    if (n > nr_free) {
c010379d:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c01037a2:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037a5:	73 0a                	jae    c01037b1 <default_alloc_pages+0x44>
        return NULL;
c01037a7:	b8 00 00 00 00       	mov    $0x0,%eax
c01037ac:	e9 35 01 00 00       	jmp    c01038e6 <default_alloc_pages+0x179>
    }
    struct Page *page = NULL;
c01037b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01037b8:	c7 45 f0 dc 64 1c c0 	movl   $0xc01c64dc,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01037bf:	eb 1c                	jmp    c01037dd <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c01037c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037c4:	83 e8 0c             	sub    $0xc,%eax
c01037c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c01037ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037cd:	8b 40 08             	mov    0x8(%eax),%eax
c01037d0:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037d3:	72 08                	jb     c01037dd <default_alloc_pages+0x70>
            page = p;
c01037d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c01037db:	eb 18                	jmp    c01037f5 <default_alloc_pages+0x88>
c01037dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037e6:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01037e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01037ec:	81 7d f0 dc 64 1c c0 	cmpl   $0xc01c64dc,-0x10(%ebp)
c01037f3:	75 cc                	jne    c01037c1 <default_alloc_pages+0x54>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c01037f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01037f9:	0f 84 e4 00 00 00    	je     c01038e3 <default_alloc_pages+0x176>
        if (page->property > n) {
c01037ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103802:	8b 40 08             	mov    0x8(%eax),%eax
c0103805:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103808:	0f 86 84 00 00 00    	jbe    c0103892 <default_alloc_pages+0x125>
            struct Page *p = page + n;
c010380e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103811:	89 c2                	mov    %eax,%edx
c0103813:	c1 e2 05             	shl    $0x5,%edx
c0103816:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103819:	01 d0                	add    %edx,%eax
c010381b:	89 45 e8             	mov    %eax,-0x18(%ebp)
            SetPageProperty(p);
c010381e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103821:	83 c0 04             	add    $0x4,%eax
c0103824:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010382b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010382e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103831:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103834:	0f ab 10             	bts    %edx,(%eax)
            p->property = page->property - n;
c0103837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010383a:	8b 40 08             	mov    0x8(%eax),%eax
c010383d:	89 c2                	mov    %eax,%edx
c010383f:	2b 55 08             	sub    0x8(%ebp),%edx
c0103842:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103845:	89 50 08             	mov    %edx,0x8(%eax)
            list_add_before(&(page->page_link), &(p->page_link));
c0103848:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010384b:	83 c0 0c             	add    $0xc,%eax
c010384e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103851:	83 c2 0c             	add    $0xc,%edx
c0103854:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0103857:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010385a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010385d:	8b 00                	mov    (%eax),%eax
c010385f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103862:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103865:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0103868:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010386b:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010386e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103871:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103874:	89 10                	mov    %edx,(%eax)
c0103876:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103879:	8b 10                	mov    (%eax),%edx
c010387b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010387e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103881:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103884:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103887:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010388a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010388d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103890:	89 10                	mov    %edx,(%eax)
    	}
        list_del(&(page->page_link));
c0103892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103895:	83 c0 0c             	add    $0xc,%eax
c0103898:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010389b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010389e:	8b 40 04             	mov    0x4(%eax),%eax
c01038a1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01038a4:	8b 12                	mov    (%edx),%edx
c01038a6:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01038a9:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01038ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01038af:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01038b2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01038b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01038b8:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01038bb:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c01038bd:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c01038c2:	2b 45 08             	sub    0x8(%ebp),%eax
c01038c5:	a3 e4 64 1c c0       	mov    %eax,0xc01c64e4
        ClearPageProperty(page);
c01038ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038cd:	83 c0 04             	add    $0x4,%eax
c01038d0:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
c01038d7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038dd:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038e0:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01038e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01038e6:	c9                   	leave  
c01038e7:	c3                   	ret    

c01038e8 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038e8:	55                   	push   %ebp
c01038e9:	89 e5                	mov    %esp,%ebp
c01038eb:	53                   	push   %ebx
c01038ec:	81 ec 94 00 00 00    	sub    $0x94,%esp
    assert(n > 0);
c01038f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038f6:	75 24                	jne    c010391c <default_free_pages+0x34>
c01038f8:	c7 44 24 0c f0 e3 10 	movl   $0xc010e3f0,0xc(%esp)
c01038ff:	c0 
c0103900:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103907:	c0 
c0103908:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010390f:	00 
c0103910:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103917:	e8 d8 d4 ff ff       	call   c0100df4 <__panic>
    struct Page *p = base, *q;
c010391c:	8b 45 08             	mov    0x8(%ebp),%eax
c010391f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103922:	e9 9d 00 00 00       	jmp    c01039c4 <default_free_pages+0xdc>
        assert(!PageReserved(p) && !PageProperty(p));
c0103927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010392a:	83 c0 04             	add    $0x4,%eax
c010392d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0103934:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103937:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010393a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010393d:	0f a3 10             	bt     %edx,(%eax)
c0103940:	19 db                	sbb    %ebx,%ebx
c0103942:	89 5d dc             	mov    %ebx,-0x24(%ebp)
    return oldbit != 0;
c0103945:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103949:	0f 95 c0             	setne  %al
c010394c:	0f b6 c0             	movzbl %al,%eax
c010394f:	85 c0                	test   %eax,%eax
c0103951:	75 2c                	jne    c010397f <default_free_pages+0x97>
c0103953:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103956:	83 c0 04             	add    $0x4,%eax
c0103959:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c0103960:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103963:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103966:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103969:	0f a3 10             	bt     %edx,(%eax)
c010396c:	19 db                	sbb    %ebx,%ebx
c010396e:	89 5d d0             	mov    %ebx,-0x30(%ebp)
    return oldbit != 0;
c0103971:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0103975:	0f 95 c0             	setne  %al
c0103978:	0f b6 c0             	movzbl %al,%eax
c010397b:	85 c0                	test   %eax,%eax
c010397d:	74 24                	je     c01039a3 <default_free_pages+0xbb>
c010397f:	c7 44 24 0c 34 e4 10 	movl   $0xc010e434,0xc(%esp)
c0103986:	c0 
c0103987:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c010398e:	c0 
c010398f:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0103996:	00 
c0103997:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c010399e:	e8 51 d4 ff ff       	call   c0100df4 <__panic>
        p->flags = 0;
c01039a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01039ad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01039b4:	00 
c01039b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b8:	89 04 24             	mov    %eax,(%esp)
c01039bb:	e8 1a fc ff ff       	call   c01035da <set_page_ref>

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base, *q;
    for (; p != base + n; p ++) {
c01039c0:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01039c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039c7:	89 c2                	mov    %eax,%edx
c01039c9:	c1 e2 05             	shl    $0x5,%edx
c01039cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01039cf:	01 d0                	add    %edx,%eax
c01039d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039d4:	0f 85 4d ff ff ff    	jne    c0103927 <default_free_pages+0x3f>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c01039da:	8b 45 08             	mov    0x8(%ebp),%eax
c01039dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039e0:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01039e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01039e6:	83 c0 04             	add    $0x4,%eax
c01039e9:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c01039f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01039f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01039f6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039f9:	0f ab 10             	bts    %edx,(%eax)
c01039fc:	c7 45 c4 dc 64 1c c0 	movl   $0xc01c64dc,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103a03:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a06:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0103a09:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *last;

    //Find the right position: right before le
    while (le != &free_list) {
c0103a0c:	e9 b3 00 00 00       	jmp    c0103ac4 <default_free_pages+0x1dc>
	p = le2page(le, page_link);
c0103a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a14:	83 e8 0c             	sub    $0xc,%eax
c0103a17:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p >= base + base->property) {
c0103a1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1d:	8b 40 08             	mov    0x8(%eax),%eax
c0103a20:	89 c2                	mov    %eax,%edx
c0103a22:	c1 e2 05             	shl    $0x5,%edx
c0103a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a28:	01 d0                	add    %edx,%eax
c0103a2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a2d:	0f 87 82 00 00 00    	ja     c0103ab5 <default_free_pages+0x1cd>
	   //Try to merge the high addr block
           if (p == base + base->property) {
c0103a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a36:	8b 40 08             	mov    0x8(%eax),%eax
c0103a39:	89 c2                	mov    %eax,%edx
c0103a3b:	c1 e2 05             	shl    $0x5,%edx
c0103a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a41:	01 d0                	add    %edx,%eax
c0103a43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a46:	0f 85 87 00 00 00    	jne    c0103ad3 <default_free_pages+0x1eb>
	      base->property += p->property;
c0103a4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4f:	8b 50 08             	mov    0x8(%eax),%edx
c0103a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a55:	8b 40 08             	mov    0x8(%eax),%eax
c0103a58:	01 c2                	add    %eax,%edx
c0103a5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a5d:	89 50 08             	mov    %edx,0x8(%eax)
	      ClearPageProperty(p);
c0103a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a63:	83 c0 04             	add    $0x4,%eax
c0103a66:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a6d:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a70:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a73:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a76:	0f b3 10             	btr    %edx,(%eax)
c0103a79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a7c:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0103a7f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103a82:	8b 40 04             	mov    0x4(%eax),%eax
	      le = list_next(le);
c0103a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	      list_del(&(p->page_link));
c0103a88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a8b:	83 c0 0c             	add    $0xc,%eax
c0103a8e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103a91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103a94:	8b 40 04             	mov    0x4(%eax),%eax
c0103a97:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103a9a:	8b 12                	mov    (%edx),%edx
c0103a9c:	89 55 b0             	mov    %edx,-0x50(%ebp)
c0103a9f:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103aa2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103aa5:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0103aa8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103aab:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103aae:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103ab1:	89 10                	mov    %edx,(%eax)
	   }
           break;
c0103ab3:	eb 1e                	jmp    c0103ad3 <default_free_pages+0x1eb>
c0103ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ab8:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103abb:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103abe:	8b 40 04             	mov    0x4(%eax),%eax
        }
	le = list_next(le);
c0103ac1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    list_entry_t *last;

    //Find the right position: right before le
    while (le != &free_list) {
c0103ac4:	81 7d f0 dc 64 1c c0 	cmpl   $0xc01c64dc,-0x10(%ebp)
c0103acb:	0f 85 40 ff ff ff    	jne    c0103a11 <default_free_pages+0x129>
c0103ad1:	eb 01                	jmp    c0103ad4 <default_free_pages+0x1ec>
	      base->property += p->property;
	      ClearPageProperty(p);
	      le = list_next(le);
	      list_del(&(p->page_link));
	   }
           break;
c0103ad3:	90                   	nop
c0103ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ad7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103ada:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103add:	8b 00                	mov    (%eax),%eax
        }
	le = list_next(le);
    }
    //Try to merge the low addr block
    last = list_prev(le);
c0103adf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (last != &free_list) { 
c0103ae2:	81 7d ec dc 64 1c c0 	cmpl   $0xc01c64dc,-0x14(%ebp)
c0103ae9:	74 79                	je     c0103b64 <default_free_pages+0x27c>
       q = le2page(last, page_link);
c0103aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103aee:	83 e8 0c             	sub    $0xc,%eax
c0103af1:	89 45 e8             	mov    %eax,-0x18(%ebp)
       if (q + q->property == base) {
c0103af4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103af7:	8b 40 08             	mov    0x8(%eax),%eax
c0103afa:	89 c2                	mov    %eax,%edx
c0103afc:	c1 e2 05             	shl    $0x5,%edx
c0103aff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b02:	01 d0                	add    %edx,%eax
c0103b04:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103b07:	75 5b                	jne    c0103b64 <default_free_pages+0x27c>
	  q->property += base->property;
c0103b09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b0c:	8b 50 08             	mov    0x8(%eax),%edx
c0103b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b12:	8b 40 08             	mov    0x8(%eax),%eax
c0103b15:	01 c2                	add    %eax,%edx
c0103b17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b1a:	89 50 08             	mov    %edx,0x8(%eax)
	  ClearPageProperty(base);
c0103b1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b20:	83 c0 04             	add    $0x4,%eax
c0103b23:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0103b2a:	89 45 9c             	mov    %eax,-0x64(%ebp)
c0103b2d:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103b30:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103b33:	0f b3 10             	btr    %edx,(%eax)
	  base = q;
c0103b36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b39:	89 45 08             	mov    %eax,0x8(%ebp)
c0103b3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b3f:	89 45 98             	mov    %eax,-0x68(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103b42:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103b45:	8b 40 04             	mov    0x4(%eax),%eax
c0103b48:	8b 55 98             	mov    -0x68(%ebp),%edx
c0103b4b:	8b 12                	mov    (%edx),%edx
c0103b4d:	89 55 94             	mov    %edx,-0x6c(%ebp)
c0103b50:	89 45 90             	mov    %eax,-0x70(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103b53:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103b56:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103b59:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103b5c:	8b 45 90             	mov    -0x70(%ebp),%eax
c0103b5f:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0103b62:	89 10                	mov    %edx,(%eax)
	  list_del(last);
       }
    }
    nr_free += n;
c0103b64:	8b 15 e4 64 1c c0    	mov    0xc01c64e4,%edx
c0103b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b6d:	01 d0                	add    %edx,%eax
c0103b6f:	a3 e4 64 1c c0       	mov    %eax,0xc01c64e4
    list_add_before(le, &(base->page_link));
c0103b74:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b77:	8d 50 0c             	lea    0xc(%eax),%edx
c0103b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b7d:	89 45 8c             	mov    %eax,-0x74(%ebp)
c0103b80:	89 55 88             	mov    %edx,-0x78(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103b83:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103b86:	8b 00                	mov    (%eax),%eax
c0103b88:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103b8b:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0103b8e:	89 45 80             	mov    %eax,-0x80(%ebp)
c0103b91:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103b94:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103b9a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0103ba0:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103ba3:	89 10                	mov    %edx,(%eax)
c0103ba5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0103bab:	8b 10                	mov    (%eax),%edx
c0103bad:	8b 45 80             	mov    -0x80(%ebp),%eax
c0103bb0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103bb3:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103bb6:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c0103bbc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103bbf:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103bc2:	8b 55 80             	mov    -0x80(%ebp),%edx
c0103bc5:	89 10                	mov    %edx,(%eax)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    list_add(&free_list, &(base->page_link));*/
}
c0103bc7:	81 c4 94 00 00 00    	add    $0x94,%esp
c0103bcd:	5b                   	pop    %ebx
c0103bce:	5d                   	pop    %ebp
c0103bcf:	c3                   	ret    

c0103bd0 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103bd0:	55                   	push   %ebp
c0103bd1:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103bd3:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
}
c0103bd8:	5d                   	pop    %ebp
c0103bd9:	c3                   	ret    

c0103bda <basic_check>:

static void
basic_check(void) {
c0103bda:	55                   	push   %ebp
c0103bdb:	89 e5                	mov    %esp,%ebp
c0103bdd:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103be7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bf0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103bf3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bfa:	e8 1e 16 00 00       	call   c010521d <alloc_pages>
c0103bff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c02:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103c06:	75 24                	jne    c0103c2c <basic_check+0x52>
c0103c08:	c7 44 24 0c 59 e4 10 	movl   $0xc010e459,0xc(%esp)
c0103c0f:	c0 
c0103c10:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103c17:	c0 
c0103c18:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c0103c1f:	00 
c0103c20:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103c27:	e8 c8 d1 ff ff       	call   c0100df4 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103c2c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c33:	e8 e5 15 00 00       	call   c010521d <alloc_pages>
c0103c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103c3f:	75 24                	jne    c0103c65 <basic_check+0x8b>
c0103c41:	c7 44 24 0c 75 e4 10 	movl   $0xc010e475,0xc(%esp)
c0103c48:	c0 
c0103c49:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103c50:	c0 
c0103c51:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103c58:	00 
c0103c59:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103c60:	e8 8f d1 ff ff       	call   c0100df4 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103c65:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c6c:	e8 ac 15 00 00       	call   c010521d <alloc_pages>
c0103c71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103c78:	75 24                	jne    c0103c9e <basic_check+0xc4>
c0103c7a:	c7 44 24 0c 91 e4 10 	movl   $0xc010e491,0xc(%esp)
c0103c81:	c0 
c0103c82:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103c89:	c0 
c0103c8a:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0103c91:	00 
c0103c92:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103c99:	e8 56 d1 ff ff       	call   c0100df4 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103c9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ca1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ca4:	74 10                	je     c0103cb6 <basic_check+0xdc>
c0103ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ca9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103cac:	74 08                	je     c0103cb6 <basic_check+0xdc>
c0103cae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cb1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103cb4:	75 24                	jne    c0103cda <basic_check+0x100>
c0103cb6:	c7 44 24 0c b0 e4 10 	movl   $0xc010e4b0,0xc(%esp)
c0103cbd:	c0 
c0103cbe:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103cc5:	c0 
c0103cc6:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0103ccd:	00 
c0103cce:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103cd5:	e8 1a d1 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103cda:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cdd:	89 04 24             	mov    %eax,(%esp)
c0103ce0:	e8 eb f8 ff ff       	call   c01035d0 <page_ref>
c0103ce5:	85 c0                	test   %eax,%eax
c0103ce7:	75 1e                	jne    c0103d07 <basic_check+0x12d>
c0103ce9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cec:	89 04 24             	mov    %eax,(%esp)
c0103cef:	e8 dc f8 ff ff       	call   c01035d0 <page_ref>
c0103cf4:	85 c0                	test   %eax,%eax
c0103cf6:	75 0f                	jne    c0103d07 <basic_check+0x12d>
c0103cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cfb:	89 04 24             	mov    %eax,(%esp)
c0103cfe:	e8 cd f8 ff ff       	call   c01035d0 <page_ref>
c0103d03:	85 c0                	test   %eax,%eax
c0103d05:	74 24                	je     c0103d2b <basic_check+0x151>
c0103d07:	c7 44 24 0c d4 e4 10 	movl   $0xc010e4d4,0xc(%esp)
c0103d0e:	c0 
c0103d0f:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103d16:	c0 
c0103d17:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0103d1e:	00 
c0103d1f:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103d26:	e8 c9 d0 ff ff       	call   c0100df4 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103d2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d2e:	89 04 24             	mov    %eax,(%esp)
c0103d31:	e8 84 f8 ff ff       	call   c01035ba <page2pa>
c0103d36:	8b 15 a0 43 1c c0    	mov    0xc01c43a0,%edx
c0103d3c:	c1 e2 0c             	shl    $0xc,%edx
c0103d3f:	39 d0                	cmp    %edx,%eax
c0103d41:	72 24                	jb     c0103d67 <basic_check+0x18d>
c0103d43:	c7 44 24 0c 10 e5 10 	movl   $0xc010e510,0xc(%esp)
c0103d4a:	c0 
c0103d4b:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103d52:	c0 
c0103d53:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0103d5a:	00 
c0103d5b:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103d62:	e8 8d d0 ff ff       	call   c0100df4 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103d67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d6a:	89 04 24             	mov    %eax,(%esp)
c0103d6d:	e8 48 f8 ff ff       	call   c01035ba <page2pa>
c0103d72:	8b 15 a0 43 1c c0    	mov    0xc01c43a0,%edx
c0103d78:	c1 e2 0c             	shl    $0xc,%edx
c0103d7b:	39 d0                	cmp    %edx,%eax
c0103d7d:	72 24                	jb     c0103da3 <basic_check+0x1c9>
c0103d7f:	c7 44 24 0c 2d e5 10 	movl   $0xc010e52d,0xc(%esp)
c0103d86:	c0 
c0103d87:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103d8e:	c0 
c0103d8f:	c7 44 24 04 c1 00 00 	movl   $0xc1,0x4(%esp)
c0103d96:	00 
c0103d97:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103d9e:	e8 51 d0 ff ff       	call   c0100df4 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103da6:	89 04 24             	mov    %eax,(%esp)
c0103da9:	e8 0c f8 ff ff       	call   c01035ba <page2pa>
c0103dae:	8b 15 a0 43 1c c0    	mov    0xc01c43a0,%edx
c0103db4:	c1 e2 0c             	shl    $0xc,%edx
c0103db7:	39 d0                	cmp    %edx,%eax
c0103db9:	72 24                	jb     c0103ddf <basic_check+0x205>
c0103dbb:	c7 44 24 0c 4a e5 10 	movl   $0xc010e54a,0xc(%esp)
c0103dc2:	c0 
c0103dc3:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103dca:	c0 
c0103dcb:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c0103dd2:	00 
c0103dd3:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103dda:	e8 15 d0 ff ff       	call   c0100df4 <__panic>

    list_entry_t free_list_store = free_list;
c0103ddf:	a1 dc 64 1c c0       	mov    0xc01c64dc,%eax
c0103de4:	8b 15 e0 64 1c c0    	mov    0xc01c64e0,%edx
c0103dea:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103ded:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103df0:	c7 45 e0 dc 64 1c c0 	movl   $0xc01c64dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103df7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103dfa:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103dfd:	89 50 04             	mov    %edx,0x4(%eax)
c0103e00:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e03:	8b 50 04             	mov    0x4(%eax),%edx
c0103e06:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e09:	89 10                	mov    %edx,(%eax)
c0103e0b:	c7 45 dc dc 64 1c c0 	movl   $0xc01c64dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103e12:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e15:	8b 40 04             	mov    0x4(%eax),%eax
c0103e18:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103e1b:	0f 94 c0             	sete   %al
c0103e1e:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103e21:	85 c0                	test   %eax,%eax
c0103e23:	75 24                	jne    c0103e49 <basic_check+0x26f>
c0103e25:	c7 44 24 0c 67 e5 10 	movl   $0xc010e567,0xc(%esp)
c0103e2c:	c0 
c0103e2d:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103e34:	c0 
c0103e35:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e3c:	00 
c0103e3d:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103e44:	e8 ab cf ff ff       	call   c0100df4 <__panic>

    unsigned int nr_free_store = nr_free;
c0103e49:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c0103e4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103e51:	c7 05 e4 64 1c c0 00 	movl   $0x0,0xc01c64e4
c0103e58:	00 00 00 

    assert(alloc_page() == NULL);
c0103e5b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e62:	e8 b6 13 00 00       	call   c010521d <alloc_pages>
c0103e67:	85 c0                	test   %eax,%eax
c0103e69:	74 24                	je     c0103e8f <basic_check+0x2b5>
c0103e6b:	c7 44 24 0c 7e e5 10 	movl   $0xc010e57e,0xc(%esp)
c0103e72:	c0 
c0103e73:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103e7a:	c0 
c0103e7b:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0103e82:	00 
c0103e83:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103e8a:	e8 65 cf ff ff       	call   c0100df4 <__panic>

    free_page(p0);
c0103e8f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e96:	00 
c0103e97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e9a:	89 04 24             	mov    %eax,(%esp)
c0103e9d:	e8 e6 13 00 00       	call   c0105288 <free_pages>
    free_page(p1);
c0103ea2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ea9:	00 
c0103eaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ead:	89 04 24             	mov    %eax,(%esp)
c0103eb0:	e8 d3 13 00 00       	call   c0105288 <free_pages>
    free_page(p2);
c0103eb5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ebc:	00 
c0103ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ec0:	89 04 24             	mov    %eax,(%esp)
c0103ec3:	e8 c0 13 00 00       	call   c0105288 <free_pages>
    assert(nr_free == 3);
c0103ec8:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c0103ecd:	83 f8 03             	cmp    $0x3,%eax
c0103ed0:	74 24                	je     c0103ef6 <basic_check+0x31c>
c0103ed2:	c7 44 24 0c 93 e5 10 	movl   $0xc010e593,0xc(%esp)
c0103ed9:	c0 
c0103eda:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103ee1:	c0 
c0103ee2:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103ee9:	00 
c0103eea:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103ef1:	e8 fe ce ff ff       	call   c0100df4 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103ef6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103efd:	e8 1b 13 00 00       	call   c010521d <alloc_pages>
c0103f02:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103f05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103f09:	75 24                	jne    c0103f2f <basic_check+0x355>
c0103f0b:	c7 44 24 0c 59 e4 10 	movl   $0xc010e459,0xc(%esp)
c0103f12:	c0 
c0103f13:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103f1a:	c0 
c0103f1b:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103f22:	00 
c0103f23:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103f2a:	e8 c5 ce ff ff       	call   c0100df4 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103f2f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f36:	e8 e2 12 00 00       	call   c010521d <alloc_pages>
c0103f3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103f42:	75 24                	jne    c0103f68 <basic_check+0x38e>
c0103f44:	c7 44 24 0c 75 e4 10 	movl   $0xc010e475,0xc(%esp)
c0103f4b:	c0 
c0103f4c:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103f53:	c0 
c0103f54:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103f5b:	00 
c0103f5c:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103f63:	e8 8c ce ff ff       	call   c0100df4 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103f68:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f6f:	e8 a9 12 00 00       	call   c010521d <alloc_pages>
c0103f74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103f77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103f7b:	75 24                	jne    c0103fa1 <basic_check+0x3c7>
c0103f7d:	c7 44 24 0c 91 e4 10 	movl   $0xc010e491,0xc(%esp)
c0103f84:	c0 
c0103f85:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103f8c:	c0 
c0103f8d:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
c0103f94:	00 
c0103f95:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103f9c:	e8 53 ce ff ff       	call   c0100df4 <__panic>

    assert(alloc_page() == NULL);
c0103fa1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fa8:	e8 70 12 00 00       	call   c010521d <alloc_pages>
c0103fad:	85 c0                	test   %eax,%eax
c0103faf:	74 24                	je     c0103fd5 <basic_check+0x3fb>
c0103fb1:	c7 44 24 0c 7e e5 10 	movl   $0xc010e57e,0xc(%esp)
c0103fb8:	c0 
c0103fb9:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0103fc0:	c0 
c0103fc1:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0103fc8:	00 
c0103fc9:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0103fd0:	e8 1f ce ff ff       	call   c0100df4 <__panic>

    free_page(p0);
c0103fd5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103fdc:	00 
c0103fdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fe0:	89 04 24             	mov    %eax,(%esp)
c0103fe3:	e8 a0 12 00 00       	call   c0105288 <free_pages>
c0103fe8:	c7 45 d8 dc 64 1c c0 	movl   $0xc01c64dc,-0x28(%ebp)
c0103fef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103ff2:	8b 40 04             	mov    0x4(%eax),%eax
c0103ff5:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103ff8:	0f 94 c0             	sete   %al
c0103ffb:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103ffe:	85 c0                	test   %eax,%eax
c0104000:	74 24                	je     c0104026 <basic_check+0x44c>
c0104002:	c7 44 24 0c a0 e5 10 	movl   $0xc010e5a0,0xc(%esp)
c0104009:	c0 
c010400a:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104011:	c0 
c0104012:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
c0104019:	00 
c010401a:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104021:	e8 ce cd ff ff       	call   c0100df4 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0104026:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010402d:	e8 eb 11 00 00       	call   c010521d <alloc_pages>
c0104032:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104035:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104038:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010403b:	74 24                	je     c0104061 <basic_check+0x487>
c010403d:	c7 44 24 0c b8 e5 10 	movl   $0xc010e5b8,0xc(%esp)
c0104044:	c0 
c0104045:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c010404c:	c0 
c010404d:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0104054:	00 
c0104055:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c010405c:	e8 93 cd ff ff       	call   c0100df4 <__panic>
    assert(alloc_page() == NULL);
c0104061:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104068:	e8 b0 11 00 00       	call   c010521d <alloc_pages>
c010406d:	85 c0                	test   %eax,%eax
c010406f:	74 24                	je     c0104095 <basic_check+0x4bb>
c0104071:	c7 44 24 0c 7e e5 10 	movl   $0xc010e57e,0xc(%esp)
c0104078:	c0 
c0104079:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104080:	c0 
c0104081:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c0104088:	00 
c0104089:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104090:	e8 5f cd ff ff       	call   c0100df4 <__panic>

    assert(nr_free == 0);
c0104095:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c010409a:	85 c0                	test   %eax,%eax
c010409c:	74 24                	je     c01040c2 <basic_check+0x4e8>
c010409e:	c7 44 24 0c d1 e5 10 	movl   $0xc010e5d1,0xc(%esp)
c01040a5:	c0 
c01040a6:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01040ad:	c0 
c01040ae:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c01040b5:	00 
c01040b6:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01040bd:	e8 32 cd ff ff       	call   c0100df4 <__panic>
    free_list = free_list_store;
c01040c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01040c5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01040c8:	a3 dc 64 1c c0       	mov    %eax,0xc01c64dc
c01040cd:	89 15 e0 64 1c c0    	mov    %edx,0xc01c64e0
    nr_free = nr_free_store;
c01040d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040d6:	a3 e4 64 1c c0       	mov    %eax,0xc01c64e4

    free_page(p);
c01040db:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040e2:	00 
c01040e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040e6:	89 04 24             	mov    %eax,(%esp)
c01040e9:	e8 9a 11 00 00       	call   c0105288 <free_pages>
    free_page(p1);
c01040ee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040f5:	00 
c01040f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040f9:	89 04 24             	mov    %eax,(%esp)
c01040fc:	e8 87 11 00 00       	call   c0105288 <free_pages>
    free_page(p2);
c0104101:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104108:	00 
c0104109:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010410c:	89 04 24             	mov    %eax,(%esp)
c010410f:	e8 74 11 00 00       	call   c0105288 <free_pages>
}
c0104114:	c9                   	leave  
c0104115:	c3                   	ret    

c0104116 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104116:	55                   	push   %ebp
c0104117:	89 e5                	mov    %esp,%ebp
c0104119:	53                   	push   %ebx
c010411a:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104120:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104127:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010412e:	c7 45 ec dc 64 1c c0 	movl   $0xc01c64dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104135:	eb 6b                	jmp    c01041a2 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104137:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010413a:	83 e8 0c             	sub    $0xc,%eax
c010413d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104140:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104143:	83 c0 04             	add    $0x4,%eax
c0104146:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010414d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104150:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104153:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104156:	0f a3 10             	bt     %edx,(%eax)
c0104159:	19 db                	sbb    %ebx,%ebx
c010415b:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    return oldbit != 0;
c010415e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104162:	0f 95 c0             	setne  %al
c0104165:	0f b6 c0             	movzbl %al,%eax
c0104168:	85 c0                	test   %eax,%eax
c010416a:	75 24                	jne    c0104190 <default_check+0x7a>
c010416c:	c7 44 24 0c de e5 10 	movl   $0xc010e5de,0xc(%esp)
c0104173:	c0 
c0104174:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c010417b:	c0 
c010417c:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c0104183:	00 
c0104184:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c010418b:	e8 64 cc ff ff       	call   c0100df4 <__panic>
        count ++, total += p->property;
c0104190:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104194:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104197:	8b 50 08             	mov    0x8(%eax),%edx
c010419a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010419d:	01 d0                	add    %edx,%eax
c010419f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01041a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01041a5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01041a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01041ab:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01041ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01041b1:	81 7d ec dc 64 1c c0 	cmpl   $0xc01c64dc,-0x14(%ebp)
c01041b8:	0f 85 79 ff ff ff    	jne    c0104137 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01041be:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01041c1:	e8 f4 10 00 00       	call   c01052ba <nr_free_pages>
c01041c6:	39 c3                	cmp    %eax,%ebx
c01041c8:	74 24                	je     c01041ee <default_check+0xd8>
c01041ca:	c7 44 24 0c ee e5 10 	movl   $0xc010e5ee,0xc(%esp)
c01041d1:	c0 
c01041d2:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01041d9:	c0 
c01041da:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c01041e1:	00 
c01041e2:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01041e9:	e8 06 cc ff ff       	call   c0100df4 <__panic>

    basic_check();
c01041ee:	e8 e7 f9 ff ff       	call   c0103bda <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01041f3:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c01041fa:	e8 1e 10 00 00       	call   c010521d <alloc_pages>
c01041ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104202:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104206:	75 24                	jne    c010422c <default_check+0x116>
c0104208:	c7 44 24 0c 07 e6 10 	movl   $0xc010e607,0xc(%esp)
c010420f:	c0 
c0104210:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104217:	c0 
c0104218:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c010421f:	00 
c0104220:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104227:	e8 c8 cb ff ff       	call   c0100df4 <__panic>
    assert(!PageProperty(p0));
c010422c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010422f:	83 c0 04             	add    $0x4,%eax
c0104232:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104239:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010423c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010423f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104242:	0f a3 10             	bt     %edx,(%eax)
c0104245:	19 db                	sbb    %ebx,%ebx
c0104247:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    return oldbit != 0;
c010424a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010424e:	0f 95 c0             	setne  %al
c0104251:	0f b6 c0             	movzbl %al,%eax
c0104254:	85 c0                	test   %eax,%eax
c0104256:	74 24                	je     c010427c <default_check+0x166>
c0104258:	c7 44 24 0c 12 e6 10 	movl   $0xc010e612,0xc(%esp)
c010425f:	c0 
c0104260:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104267:	c0 
c0104268:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010426f:	00 
c0104270:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104277:	e8 78 cb ff ff       	call   c0100df4 <__panic>

    list_entry_t free_list_store = free_list;
c010427c:	a1 dc 64 1c c0       	mov    0xc01c64dc,%eax
c0104281:	8b 15 e0 64 1c c0    	mov    0xc01c64e0,%edx
c0104287:	89 45 80             	mov    %eax,-0x80(%ebp)
c010428a:	89 55 84             	mov    %edx,-0x7c(%ebp)
c010428d:	c7 45 b4 dc 64 1c c0 	movl   $0xc01c64dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104294:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104297:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010429a:	89 50 04             	mov    %edx,0x4(%eax)
c010429d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042a0:	8b 50 04             	mov    0x4(%eax),%edx
c01042a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042a6:	89 10                	mov    %edx,(%eax)
c01042a8:	c7 45 b0 dc 64 1c c0 	movl   $0xc01c64dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01042af:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01042b2:	8b 40 04             	mov    0x4(%eax),%eax
c01042b5:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01042b8:	0f 94 c0             	sete   %al
c01042bb:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01042be:	85 c0                	test   %eax,%eax
c01042c0:	75 24                	jne    c01042e6 <default_check+0x1d0>
c01042c2:	c7 44 24 0c 67 e5 10 	movl   $0xc010e567,0xc(%esp)
c01042c9:	c0 
c01042ca:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01042d1:	c0 
c01042d2:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c01042d9:	00 
c01042da:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01042e1:	e8 0e cb ff ff       	call   c0100df4 <__panic>
    assert(alloc_page() == NULL);
c01042e6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01042ed:	e8 2b 0f 00 00       	call   c010521d <alloc_pages>
c01042f2:	85 c0                	test   %eax,%eax
c01042f4:	74 24                	je     c010431a <default_check+0x204>
c01042f6:	c7 44 24 0c 7e e5 10 	movl   $0xc010e57e,0xc(%esp)
c01042fd:	c0 
c01042fe:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104305:	c0 
c0104306:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c010430d:	00 
c010430e:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104315:	e8 da ca ff ff       	call   c0100df4 <__panic>

    unsigned int nr_free_store = nr_free;
c010431a:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c010431f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104322:	c7 05 e4 64 1c c0 00 	movl   $0x0,0xc01c64e4
c0104329:	00 00 00 

    free_pages(p0 + 2, 3);
c010432c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010432f:	83 c0 40             	add    $0x40,%eax
c0104332:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104339:	00 
c010433a:	89 04 24             	mov    %eax,(%esp)
c010433d:	e8 46 0f 00 00       	call   c0105288 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104342:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0104349:	e8 cf 0e 00 00       	call   c010521d <alloc_pages>
c010434e:	85 c0                	test   %eax,%eax
c0104350:	74 24                	je     c0104376 <default_check+0x260>
c0104352:	c7 44 24 0c 24 e6 10 	movl   $0xc010e624,0xc(%esp)
c0104359:	c0 
c010435a:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104361:	c0 
c0104362:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0104369:	00 
c010436a:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104371:	e8 7e ca ff ff       	call   c0100df4 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0104376:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104379:	83 c0 40             	add    $0x40,%eax
c010437c:	83 c0 04             	add    $0x4,%eax
c010437f:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0104386:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104389:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010438c:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010438f:	0f a3 10             	bt     %edx,(%eax)
c0104392:	19 db                	sbb    %ebx,%ebx
c0104394:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
    return oldbit != 0;
c0104397:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010439b:	0f 95 c0             	setne  %al
c010439e:	0f b6 c0             	movzbl %al,%eax
c01043a1:	85 c0                	test   %eax,%eax
c01043a3:	74 0e                	je     c01043b3 <default_check+0x29d>
c01043a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043a8:	83 c0 40             	add    $0x40,%eax
c01043ab:	8b 40 08             	mov    0x8(%eax),%eax
c01043ae:	83 f8 03             	cmp    $0x3,%eax
c01043b1:	74 24                	je     c01043d7 <default_check+0x2c1>
c01043b3:	c7 44 24 0c 3c e6 10 	movl   $0xc010e63c,0xc(%esp)
c01043ba:	c0 
c01043bb:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01043c2:	c0 
c01043c3:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c01043ca:	00 
c01043cb:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01043d2:	e8 1d ca ff ff       	call   c0100df4 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01043d7:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01043de:	e8 3a 0e 00 00       	call   c010521d <alloc_pages>
c01043e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01043e6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01043ea:	75 24                	jne    c0104410 <default_check+0x2fa>
c01043ec:	c7 44 24 0c 68 e6 10 	movl   $0xc010e668,0xc(%esp)
c01043f3:	c0 
c01043f4:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01043fb:	c0 
c01043fc:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0104403:	00 
c0104404:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c010440b:	e8 e4 c9 ff ff       	call   c0100df4 <__panic>
    assert(alloc_page() == NULL);
c0104410:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104417:	e8 01 0e 00 00       	call   c010521d <alloc_pages>
c010441c:	85 c0                	test   %eax,%eax
c010441e:	74 24                	je     c0104444 <default_check+0x32e>
c0104420:	c7 44 24 0c 7e e5 10 	movl   $0xc010e57e,0xc(%esp)
c0104427:	c0 
c0104428:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c010442f:	c0 
c0104430:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
c0104437:	00 
c0104438:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c010443f:	e8 b0 c9 ff ff       	call   c0100df4 <__panic>
    assert(p0 + 2 == p1);
c0104444:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104447:	83 c0 40             	add    $0x40,%eax
c010444a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010444d:	74 24                	je     c0104473 <default_check+0x35d>
c010444f:	c7 44 24 0c 86 e6 10 	movl   $0xc010e686,0xc(%esp)
c0104456:	c0 
c0104457:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c010445e:	c0 
c010445f:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c0104466:	00 
c0104467:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c010446e:	e8 81 c9 ff ff       	call   c0100df4 <__panic>

    p2 = p0 + 1;
c0104473:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104476:	83 c0 20             	add    $0x20,%eax
c0104479:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c010447c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104483:	00 
c0104484:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104487:	89 04 24             	mov    %eax,(%esp)
c010448a:	e8 f9 0d 00 00       	call   c0105288 <free_pages>
    free_pages(p1, 3);
c010448f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104496:	00 
c0104497:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010449a:	89 04 24             	mov    %eax,(%esp)
c010449d:	e8 e6 0d 00 00       	call   c0105288 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01044a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044a5:	83 c0 04             	add    $0x4,%eax
c01044a8:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01044af:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01044b2:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01044b5:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01044b8:	0f a3 10             	bt     %edx,(%eax)
c01044bb:	19 db                	sbb    %ebx,%ebx
c01044bd:	89 5d 98             	mov    %ebx,-0x68(%ebp)
    return oldbit != 0;
c01044c0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01044c4:	0f 95 c0             	setne  %al
c01044c7:	0f b6 c0             	movzbl %al,%eax
c01044ca:	85 c0                	test   %eax,%eax
c01044cc:	74 0b                	je     c01044d9 <default_check+0x3c3>
c01044ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044d1:	8b 40 08             	mov    0x8(%eax),%eax
c01044d4:	83 f8 01             	cmp    $0x1,%eax
c01044d7:	74 24                	je     c01044fd <default_check+0x3e7>
c01044d9:	c7 44 24 0c 94 e6 10 	movl   $0xc010e694,0xc(%esp)
c01044e0:	c0 
c01044e1:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01044e8:	c0 
c01044e9:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c01044f0:	00 
c01044f1:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01044f8:	e8 f7 c8 ff ff       	call   c0100df4 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01044fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104500:	83 c0 04             	add    $0x4,%eax
c0104503:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010450a:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010450d:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104510:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104513:	0f a3 10             	bt     %edx,(%eax)
c0104516:	19 db                	sbb    %ebx,%ebx
c0104518:	89 5d 8c             	mov    %ebx,-0x74(%ebp)
    return oldbit != 0;
c010451b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010451f:	0f 95 c0             	setne  %al
c0104522:	0f b6 c0             	movzbl %al,%eax
c0104525:	85 c0                	test   %eax,%eax
c0104527:	74 0b                	je     c0104534 <default_check+0x41e>
c0104529:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010452c:	8b 40 08             	mov    0x8(%eax),%eax
c010452f:	83 f8 03             	cmp    $0x3,%eax
c0104532:	74 24                	je     c0104558 <default_check+0x442>
c0104534:	c7 44 24 0c bc e6 10 	movl   $0xc010e6bc,0xc(%esp)
c010453b:	c0 
c010453c:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104543:	c0 
c0104544:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010454b:	00 
c010454c:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104553:	e8 9c c8 ff ff       	call   c0100df4 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104558:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010455f:	e8 b9 0c 00 00       	call   c010521d <alloc_pages>
c0104564:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104567:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010456a:	83 e8 20             	sub    $0x20,%eax
c010456d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104570:	74 24                	je     c0104596 <default_check+0x480>
c0104572:	c7 44 24 0c e2 e6 10 	movl   $0xc010e6e2,0xc(%esp)
c0104579:	c0 
c010457a:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104581:	c0 
c0104582:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c0104589:	00 
c010458a:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104591:	e8 5e c8 ff ff       	call   c0100df4 <__panic>
    free_page(p0);
c0104596:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010459d:	00 
c010459e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045a1:	89 04 24             	mov    %eax,(%esp)
c01045a4:	e8 df 0c 00 00       	call   c0105288 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01045a9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01045b0:	e8 68 0c 00 00       	call   c010521d <alloc_pages>
c01045b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01045b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01045bb:	83 c0 20             	add    $0x20,%eax
c01045be:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01045c1:	74 24                	je     c01045e7 <default_check+0x4d1>
c01045c3:	c7 44 24 0c 00 e7 10 	movl   $0xc010e700,0xc(%esp)
c01045ca:	c0 
c01045cb:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c01045d2:	c0 
c01045d3:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c01045da:	00 
c01045db:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01045e2:	e8 0d c8 ff ff       	call   c0100df4 <__panic>

    free_pages(p0, 2);
c01045e7:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01045ee:	00 
c01045ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045f2:	89 04 24             	mov    %eax,(%esp)
c01045f5:	e8 8e 0c 00 00       	call   c0105288 <free_pages>
    free_page(p2);
c01045fa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104601:	00 
c0104602:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104605:	89 04 24             	mov    %eax,(%esp)
c0104608:	e8 7b 0c 00 00       	call   c0105288 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010460d:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104614:	e8 04 0c 00 00       	call   c010521d <alloc_pages>
c0104619:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010461c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104620:	75 24                	jne    c0104646 <default_check+0x530>
c0104622:	c7 44 24 0c 20 e7 10 	movl   $0xc010e720,0xc(%esp)
c0104629:	c0 
c010462a:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104631:	c0 
c0104632:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c0104639:	00 
c010463a:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104641:	e8 ae c7 ff ff       	call   c0100df4 <__panic>
    assert(alloc_page() == NULL);
c0104646:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010464d:	e8 cb 0b 00 00       	call   c010521d <alloc_pages>
c0104652:	85 c0                	test   %eax,%eax
c0104654:	74 24                	je     c010467a <default_check+0x564>
c0104656:	c7 44 24 0c 7e e5 10 	movl   $0xc010e57e,0xc(%esp)
c010465d:	c0 
c010465e:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104665:	c0 
c0104666:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c010466d:	00 
c010466e:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104675:	e8 7a c7 ff ff       	call   c0100df4 <__panic>

    assert(nr_free == 0);
c010467a:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c010467f:	85 c0                	test   %eax,%eax
c0104681:	74 24                	je     c01046a7 <default_check+0x591>
c0104683:	c7 44 24 0c d1 e5 10 	movl   $0xc010e5d1,0xc(%esp)
c010468a:	c0 
c010468b:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104692:	c0 
c0104693:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c010469a:	00 
c010469b:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c01046a2:	e8 4d c7 ff ff       	call   c0100df4 <__panic>
    nr_free = nr_free_store;
c01046a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01046aa:	a3 e4 64 1c c0       	mov    %eax,0xc01c64e4

    free_list = free_list_store;
c01046af:	8b 45 80             	mov    -0x80(%ebp),%eax
c01046b2:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01046b5:	a3 dc 64 1c c0       	mov    %eax,0xc01c64dc
c01046ba:	89 15 e0 64 1c c0    	mov    %edx,0xc01c64e0
    free_pages(p0, 5);
c01046c0:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01046c7:	00 
c01046c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046cb:	89 04 24             	mov    %eax,(%esp)
c01046ce:	e8 b5 0b 00 00       	call   c0105288 <free_pages>

    le = &free_list;
c01046d3:	c7 45 ec dc 64 1c c0 	movl   $0xc01c64dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01046da:	eb 1f                	jmp    c01046fb <default_check+0x5e5>
        struct Page *p = le2page(le, page_link);
c01046dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01046df:	83 e8 0c             	sub    $0xc,%eax
c01046e2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c01046e5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01046e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01046ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01046ef:	8b 40 08             	mov    0x8(%eax),%eax
c01046f2:	89 d1                	mov    %edx,%ecx
c01046f4:	29 c1                	sub    %eax,%ecx
c01046f6:	89 c8                	mov    %ecx,%eax
c01046f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01046fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01046fe:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104701:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104704:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104707:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010470a:	81 7d ec dc 64 1c c0 	cmpl   $0xc01c64dc,-0x14(%ebp)
c0104711:	75 c9                	jne    c01046dc <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104713:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104717:	74 24                	je     c010473d <default_check+0x627>
c0104719:	c7 44 24 0c 3e e7 10 	movl   $0xc010e73e,0xc(%esp)
c0104720:	c0 
c0104721:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104728:	c0 
c0104729:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
c0104730:	00 
c0104731:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104738:	e8 b7 c6 ff ff       	call   c0100df4 <__panic>
    assert(total == 0);
c010473d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104741:	74 24                	je     c0104767 <default_check+0x651>
c0104743:	c7 44 24 0c 49 e7 10 	movl   $0xc010e749,0xc(%esp)
c010474a:	c0 
c010474b:	c7 44 24 08 f6 e3 10 	movl   $0xc010e3f6,0x8(%esp)
c0104752:	c0 
c0104753:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c010475a:	00 
c010475b:	c7 04 24 0b e4 10 c0 	movl   $0xc010e40b,(%esp)
c0104762:	e8 8d c6 ff ff       	call   c0100df4 <__panic>
}
c0104767:	81 c4 94 00 00 00    	add    $0x94,%esp
c010476d:	5b                   	pop    %ebx
c010476e:	5d                   	pop    %ebp
c010476f:	c3                   	ret    

c0104770 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104770:	55                   	push   %ebp
c0104771:	89 e5                	mov    %esp,%ebp
c0104773:	53                   	push   %ebx
c0104774:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104777:	9c                   	pushf  
c0104778:	5b                   	pop    %ebx
c0104779:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010477c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010477f:	25 00 02 00 00       	and    $0x200,%eax
c0104784:	85 c0                	test   %eax,%eax
c0104786:	74 0c                	je     c0104794 <__intr_save+0x24>
        intr_disable();
c0104788:	e8 8d d9 ff ff       	call   c010211a <intr_disable>
        return 1;
c010478d:	b8 01 00 00 00       	mov    $0x1,%eax
c0104792:	eb 05                	jmp    c0104799 <__intr_save+0x29>
    }
    return 0;
c0104794:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104799:	83 c4 14             	add    $0x14,%esp
c010479c:	5b                   	pop    %ebx
c010479d:	5d                   	pop    %ebp
c010479e:	c3                   	ret    

c010479f <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010479f:	55                   	push   %ebp
c01047a0:	89 e5                	mov    %esp,%ebp
c01047a2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01047a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01047a9:	74 05                	je     c01047b0 <__intr_restore+0x11>
        intr_enable();
c01047ab:	e8 64 d9 ff ff       	call   c0102114 <intr_enable>
    }
}
c01047b0:	c9                   	leave  
c01047b1:	c3                   	ret    

c01047b2 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01047b2:	55                   	push   %ebp
c01047b3:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01047b5:	8b 55 08             	mov    0x8(%ebp),%edx
c01047b8:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c01047bd:	89 d1                	mov    %edx,%ecx
c01047bf:	29 c1                	sub    %eax,%ecx
c01047c1:	89 c8                	mov    %ecx,%eax
c01047c3:	c1 f8 05             	sar    $0x5,%eax
}
c01047c6:	5d                   	pop    %ebp
c01047c7:	c3                   	ret    

c01047c8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01047c8:	55                   	push   %ebp
c01047c9:	89 e5                	mov    %esp,%ebp
c01047cb:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01047ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01047d1:	89 04 24             	mov    %eax,(%esp)
c01047d4:	e8 d9 ff ff ff       	call   c01047b2 <page2ppn>
c01047d9:	c1 e0 0c             	shl    $0xc,%eax
}
c01047dc:	c9                   	leave  
c01047dd:	c3                   	ret    

c01047de <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01047de:	55                   	push   %ebp
c01047df:	89 e5                	mov    %esp,%ebp
c01047e1:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01047e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01047e7:	89 c2                	mov    %eax,%edx
c01047e9:	c1 ea 0c             	shr    $0xc,%edx
c01047ec:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c01047f1:	39 c2                	cmp    %eax,%edx
c01047f3:	72 1c                	jb     c0104811 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01047f5:	c7 44 24 08 84 e7 10 	movl   $0xc010e784,0x8(%esp)
c01047fc:	c0 
c01047fd:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104804:	00 
c0104805:	c7 04 24 a3 e7 10 c0 	movl   $0xc010e7a3,(%esp)
c010480c:	e8 e3 c5 ff ff       	call   c0100df4 <__panic>
    }
    return &pages[PPN(pa)];
c0104811:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c0104816:	8b 55 08             	mov    0x8(%ebp),%edx
c0104819:	c1 ea 0c             	shr    $0xc,%edx
c010481c:	c1 e2 05             	shl    $0x5,%edx
c010481f:	01 d0                	add    %edx,%eax
}
c0104821:	c9                   	leave  
c0104822:	c3                   	ret    

c0104823 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104823:	55                   	push   %ebp
c0104824:	89 e5                	mov    %esp,%ebp
c0104826:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104829:	8b 45 08             	mov    0x8(%ebp),%eax
c010482c:	89 04 24             	mov    %eax,(%esp)
c010482f:	e8 94 ff ff ff       	call   c01047c8 <page2pa>
c0104834:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010483a:	c1 e8 0c             	shr    $0xc,%eax
c010483d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104840:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0104845:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104848:	72 23                	jb     c010486d <page2kva+0x4a>
c010484a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010484d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104851:	c7 44 24 08 b4 e7 10 	movl   $0xc010e7b4,0x8(%esp)
c0104858:	c0 
c0104859:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104860:	00 
c0104861:	c7 04 24 a3 e7 10 c0 	movl   $0xc010e7a3,(%esp)
c0104868:	e8 87 c5 ff ff       	call   c0100df4 <__panic>
c010486d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104870:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104875:	c9                   	leave  
c0104876:	c3                   	ret    

c0104877 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104877:	55                   	push   %ebp
c0104878:	89 e5                	mov    %esp,%ebp
c010487a:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010487d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104880:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104883:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010488a:	77 23                	ja     c01048af <kva2page+0x38>
c010488c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010488f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104893:	c7 44 24 08 d8 e7 10 	movl   $0xc010e7d8,0x8(%esp)
c010489a:	c0 
c010489b:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01048a2:	00 
c01048a3:	c7 04 24 a3 e7 10 c0 	movl   $0xc010e7a3,(%esp)
c01048aa:	e8 45 c5 ff ff       	call   c0100df4 <__panic>
c01048af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048b2:	05 00 00 00 40       	add    $0x40000000,%eax
c01048b7:	89 04 24             	mov    %eax,(%esp)
c01048ba:	e8 1f ff ff ff       	call   c01047de <pa2page>
}
c01048bf:	c9                   	leave  
c01048c0:	c3                   	ret    

c01048c1 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01048c1:	55                   	push   %ebp
c01048c2:	89 e5                	mov    %esp,%ebp
c01048c4:	53                   	push   %ebx
c01048c5:	83 ec 24             	sub    $0x24,%esp
  struct Page * page = alloc_pages(1 << order);
c01048c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01048cb:	ba 01 00 00 00       	mov    $0x1,%edx
c01048d0:	89 d3                	mov    %edx,%ebx
c01048d2:	89 c1                	mov    %eax,%ecx
c01048d4:	d3 e3                	shl    %cl,%ebx
c01048d6:	89 d8                	mov    %ebx,%eax
c01048d8:	89 04 24             	mov    %eax,(%esp)
c01048db:	e8 3d 09 00 00       	call   c010521d <alloc_pages>
c01048e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01048e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01048e7:	75 07                	jne    c01048f0 <__slob_get_free_pages+0x2f>
    return NULL;
c01048e9:	b8 00 00 00 00       	mov    $0x0,%eax
c01048ee:	eb 0b                	jmp    c01048fb <__slob_get_free_pages+0x3a>
  return page2kva(page);
c01048f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048f3:	89 04 24             	mov    %eax,(%esp)
c01048f6:	e8 28 ff ff ff       	call   c0104823 <page2kva>
}
c01048fb:	83 c4 24             	add    $0x24,%esp
c01048fe:	5b                   	pop    %ebx
c01048ff:	5d                   	pop    %ebp
c0104900:	c3                   	ret    

c0104901 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104901:	55                   	push   %ebp
c0104902:	89 e5                	mov    %esp,%ebp
c0104904:	53                   	push   %ebx
c0104905:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104908:	8b 45 0c             	mov    0xc(%ebp),%eax
c010490b:	ba 01 00 00 00       	mov    $0x1,%edx
c0104910:	89 d3                	mov    %edx,%ebx
c0104912:	89 c1                	mov    %eax,%ecx
c0104914:	d3 e3                	shl    %cl,%ebx
c0104916:	89 d8                	mov    %ebx,%eax
c0104918:	89 c3                	mov    %eax,%ebx
c010491a:	8b 45 08             	mov    0x8(%ebp),%eax
c010491d:	89 04 24             	mov    %eax,(%esp)
c0104920:	e8 52 ff ff ff       	call   c0104877 <kva2page>
c0104925:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104929:	89 04 24             	mov    %eax,(%esp)
c010492c:	e8 57 09 00 00       	call   c0105288 <free_pages>
}
c0104931:	83 c4 14             	add    $0x14,%esp
c0104934:	5b                   	pop    %ebx
c0104935:	5d                   	pop    %ebp
c0104936:	c3                   	ret    

c0104937 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104937:	55                   	push   %ebp
c0104938:	89 e5                	mov    %esp,%ebp
c010493a:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010493d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104940:	83 c0 08             	add    $0x8,%eax
c0104943:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104948:	76 24                	jbe    c010496e <slob_alloc+0x37>
c010494a:	c7 44 24 0c fc e7 10 	movl   $0xc010e7fc,0xc(%esp)
c0104951:	c0 
c0104952:	c7 44 24 08 1b e8 10 	movl   $0xc010e81b,0x8(%esp)
c0104959:	c0 
c010495a:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104961:	00 
c0104962:	c7 04 24 30 e8 10 c0 	movl   $0xc010e830,(%esp)
c0104969:	e8 86 c4 ff ff       	call   c0100df4 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c010496e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104975:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010497c:	8b 45 08             	mov    0x8(%ebp),%eax
c010497f:	83 c0 07             	add    $0x7,%eax
c0104982:	c1 e8 03             	shr    $0x3,%eax
c0104985:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104988:	e8 e3 fd ff ff       	call   c0104770 <__intr_save>
c010498d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104990:	a1 08 2a 13 c0       	mov    0xc0132a08,%eax
c0104995:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104998:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010499b:	8b 40 04             	mov    0x4(%eax),%eax
c010499e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01049a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01049a5:	74 27                	je     c01049ce <slob_alloc+0x97>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01049a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01049ad:	01 d0                	add    %edx,%eax
c01049af:	8d 50 ff             	lea    -0x1(%eax),%edx
c01049b2:	8b 45 10             	mov    0x10(%ebp),%eax
c01049b5:	f7 d8                	neg    %eax
c01049b7:	21 d0                	and    %edx,%eax
c01049b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01049bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01049bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049c2:	89 d1                	mov    %edx,%ecx
c01049c4:	29 c1                	sub    %eax,%ecx
c01049c6:	89 c8                	mov    %ecx,%eax
c01049c8:	c1 f8 03             	sar    $0x3,%eax
c01049cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01049ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049d1:	8b 00                	mov    (%eax),%eax
c01049d3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01049d6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01049d9:	01 ca                	add    %ecx,%edx
c01049db:	39 d0                	cmp    %edx,%eax
c01049dd:	0f 8c aa 00 00 00    	jl     c0104a8d <slob_alloc+0x156>
			if (delta) { /* need to fragment head to align? */
c01049e3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01049e7:	74 38                	je     c0104a21 <slob_alloc+0xea>
				aligned->units = cur->units - delta;
c01049e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049ec:	8b 00                	mov    (%eax),%eax
c01049ee:	89 c2                	mov    %eax,%edx
c01049f0:	2b 55 e8             	sub    -0x18(%ebp),%edx
c01049f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01049f6:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c01049f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049fb:	8b 50 04             	mov    0x4(%eax),%edx
c01049fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a01:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a07:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104a0a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104a0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a10:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a13:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104a15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a18:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104a1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104a21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a24:	8b 00                	mov    (%eax),%eax
c0104a26:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104a29:	75 0e                	jne    c0104a39 <slob_alloc+0x102>
				prev->next = cur->next; /* unlink */
c0104a2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2e:	8b 50 04             	mov    0x4(%eax),%edx
c0104a31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a34:	89 50 04             	mov    %edx,0x4(%eax)
c0104a37:	eb 3c                	jmp    c0104a75 <slob_alloc+0x13e>
			else { /* fragment */
				prev->next = cur + units;
c0104a39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104a3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a46:	01 c2                	add    %eax,%edx
c0104a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a4b:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a51:	8b 40 04             	mov    0x4(%eax),%eax
c0104a54:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a57:	8b 12                	mov    (%edx),%edx
c0104a59:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104a5c:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a61:	8b 40 04             	mov    0x4(%eax),%eax
c0104a64:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a67:	8b 52 04             	mov    0x4(%edx),%edx
c0104a6a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104a6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a70:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104a73:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a78:	a3 08 2a 13 c0       	mov    %eax,0xc0132a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104a7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a80:	89 04 24             	mov    %eax,(%esp)
c0104a83:	e8 17 fd ff ff       	call   c010479f <__intr_restore>
			return cur;
c0104a88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a8b:	eb 7f                	jmp    c0104b0c <slob_alloc+0x1d5>
		}
		if (cur == slobfree) {
c0104a8d:	a1 08 2a 13 c0       	mov    0xc0132a08,%eax
c0104a92:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104a95:	75 61                	jne    c0104af8 <slob_alloc+0x1c1>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104a97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a9a:	89 04 24             	mov    %eax,(%esp)
c0104a9d:	e8 fd fc ff ff       	call   c010479f <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104aa2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104aa9:	75 07                	jne    c0104ab2 <slob_alloc+0x17b>
				return 0;
c0104aab:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ab0:	eb 5a                	jmp    c0104b0c <slob_alloc+0x1d5>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104ab2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ab9:	00 
c0104aba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104abd:	89 04 24             	mov    %eax,(%esp)
c0104ac0:	e8 fc fd ff ff       	call   c01048c1 <__slob_get_free_pages>
c0104ac5:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104ac8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104acc:	75 07                	jne    c0104ad5 <slob_alloc+0x19e>
				return 0;
c0104ace:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ad3:	eb 37                	jmp    c0104b0c <slob_alloc+0x1d5>

			slob_free(cur, PAGE_SIZE);
c0104ad5:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104adc:	00 
c0104add:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae0:	89 04 24             	mov    %eax,(%esp)
c0104ae3:	e8 26 00 00 00       	call   c0104b0e <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104ae8:	e8 83 fc ff ff       	call   c0104770 <__intr_save>
c0104aed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104af0:	a1 08 2a 13 c0       	mov    0xc0132a08,%eax
c0104af5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104afe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b01:	8b 40 04             	mov    0x4(%eax),%eax
c0104b04:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104b07:	e9 95 fe ff ff       	jmp    c01049a1 <slob_alloc+0x6a>
}
c0104b0c:	c9                   	leave  
c0104b0d:	c3                   	ret    

c0104b0e <slob_free>:

static void slob_free(void *block, int size)
{
c0104b0e:	55                   	push   %ebp
c0104b0f:	89 e5                	mov    %esp,%ebp
c0104b11:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104b14:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b17:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104b1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b1e:	0f 84 01 01 00 00    	je     c0104c25 <slob_free+0x117>
		return;

	if (size)
c0104b24:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104b28:	74 10                	je     c0104b3a <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104b2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b2d:	83 c0 07             	add    $0x7,%eax
c0104b30:	c1 e8 03             	shr    $0x3,%eax
c0104b33:	89 c2                	mov    %eax,%edx
c0104b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b38:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104b3a:	e8 31 fc ff ff       	call   c0104770 <__intr_save>
c0104b3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104b42:	a1 08 2a 13 c0       	mov    0xc0132a08,%eax
c0104b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b4a:	eb 27                	jmp    c0104b73 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b4f:	8b 40 04             	mov    0x4(%eax),%eax
c0104b52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b55:	77 13                	ja     c0104b6a <slob_free+0x5c>
c0104b57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b5d:	77 27                	ja     c0104b86 <slob_free+0x78>
c0104b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b62:	8b 40 04             	mov    0x4(%eax),%eax
c0104b65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b68:	77 1c                	ja     c0104b86 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b6d:	8b 40 04             	mov    0x4(%eax),%eax
c0104b70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b79:	76 d1                	jbe    c0104b4c <slob_free+0x3e>
c0104b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b7e:	8b 40 04             	mov    0x4(%eax),%eax
c0104b81:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b84:	76 c6                	jbe    c0104b4c <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104b86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b89:	8b 00                	mov    (%eax),%eax
c0104b8b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b95:	01 c2                	add    %eax,%edx
c0104b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b9a:	8b 40 04             	mov    0x4(%eax),%eax
c0104b9d:	39 c2                	cmp    %eax,%edx
c0104b9f:	75 25                	jne    c0104bc6 <slob_free+0xb8>
		b->units += cur->next->units;
c0104ba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ba4:	8b 10                	mov    (%eax),%edx
c0104ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ba9:	8b 40 04             	mov    0x4(%eax),%eax
c0104bac:	8b 00                	mov    (%eax),%eax
c0104bae:	01 c2                	add    %eax,%edx
c0104bb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bb3:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bb8:	8b 40 04             	mov    0x4(%eax),%eax
c0104bbb:	8b 50 04             	mov    0x4(%eax),%edx
c0104bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bc1:	89 50 04             	mov    %edx,0x4(%eax)
c0104bc4:	eb 0c                	jmp    c0104bd2 <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bc9:	8b 50 04             	mov    0x4(%eax),%edx
c0104bcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bcf:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bd5:	8b 00                	mov    (%eax),%eax
c0104bd7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104bde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104be1:	01 d0                	add    %edx,%eax
c0104be3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104be6:	75 1f                	jne    c0104c07 <slob_free+0xf9>
		cur->units += b->units;
c0104be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104beb:	8b 10                	mov    (%eax),%edx
c0104bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bf0:	8b 00                	mov    (%eax),%eax
c0104bf2:	01 c2                	add    %eax,%edx
c0104bf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bf7:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bfc:	8b 50 04             	mov    0x4(%eax),%edx
c0104bff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c02:	89 50 04             	mov    %edx,0x4(%eax)
c0104c05:	eb 09                	jmp    c0104c10 <slob_free+0x102>
	} else
		cur->next = b;
c0104c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c0d:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c13:	a3 08 2a 13 c0       	mov    %eax,0xc0132a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c1b:	89 04 24             	mov    %eax,(%esp)
c0104c1e:	e8 7c fb ff ff       	call   c010479f <__intr_restore>
c0104c23:	eb 01                	jmp    c0104c26 <slob_free+0x118>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0104c25:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0104c26:	c9                   	leave  
c0104c27:	c3                   	ret    

c0104c28 <check_slob>:



void check_slob(void) {
c0104c28:	55                   	push   %ebp
c0104c29:	89 e5                	mov    %esp,%ebp
c0104c2b:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slob() succeeded!\n");
c0104c2e:	c7 04 24 42 e8 10 c0 	movl   $0xc010e842,(%esp)
c0104c35:	e8 29 b7 ff ff       	call   c0100363 <cprintf>
}
c0104c3a:	c9                   	leave  
c0104c3b:	c3                   	ret    

c0104c3c <slob_init>:

void
slob_init(void) {
c0104c3c:	55                   	push   %ebp
c0104c3d:	89 e5                	mov    %esp,%ebp
c0104c3f:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104c42:	c7 04 24 5b e8 10 c0 	movl   $0xc010e85b,(%esp)
c0104c49:	e8 15 b7 ff ff       	call   c0100363 <cprintf>
  check_slob();
c0104c4e:	e8 d5 ff ff ff       	call   c0104c28 <check_slob>
}
c0104c53:	c9                   	leave  
c0104c54:	c3                   	ret    

c0104c55 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104c55:	55                   	push   %ebp
c0104c56:	89 e5                	mov    %esp,%ebp
c0104c58:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104c5b:	e8 dc ff ff ff       	call   c0104c3c <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104c60:	c7 04 24 6f e8 10 c0 	movl   $0xc010e86f,(%esp)
c0104c67:	e8 f7 b6 ff ff       	call   c0100363 <cprintf>
}
c0104c6c:	c9                   	leave  
c0104c6d:	c3                   	ret    

c0104c6e <slob_allocated>:

size_t
slob_allocated(void) {
c0104c6e:	55                   	push   %ebp
c0104c6f:	89 e5                	mov    %esp,%ebp
  return 0;
c0104c71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c76:	5d                   	pop    %ebp
c0104c77:	c3                   	ret    

c0104c78 <kallocated>:

size_t
kallocated(void) {
c0104c78:	55                   	push   %ebp
c0104c79:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104c7b:	e8 ee ff ff ff       	call   c0104c6e <slob_allocated>
}
c0104c80:	5d                   	pop    %ebp
c0104c81:	c3                   	ret    

c0104c82 <find_order>:

static int find_order(int size)
{
c0104c82:	55                   	push   %ebp
c0104c83:	89 e5                	mov    %esp,%ebp
c0104c85:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104c88:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104c8f:	eb 07                	jmp    c0104c98 <find_order+0x16>
		order++;
c0104c91:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104c95:	d1 7d 08             	sarl   0x8(%ebp)
c0104c98:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104c9f:	7f f0                	jg     c0104c91 <find_order+0xf>
		order++;
	return order;
c0104ca1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104ca4:	c9                   	leave  
c0104ca5:	c3                   	ret    

c0104ca6 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104ca6:	55                   	push   %ebp
c0104ca7:	89 e5                	mov    %esp,%ebp
c0104ca9:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104cac:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104cb3:	77 38                	ja     c0104ced <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104cb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cb8:	8d 50 08             	lea    0x8(%eax),%edx
c0104cbb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104cc2:	00 
c0104cc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104cca:	89 14 24             	mov    %edx,(%esp)
c0104ccd:	e8 65 fc ff ff       	call   c0104937 <slob_alloc>
c0104cd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104cd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cd9:	74 08                	je     c0104ce3 <__kmalloc+0x3d>
c0104cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cde:	83 c0 08             	add    $0x8,%eax
c0104ce1:	eb 05                	jmp    c0104ce8 <__kmalloc+0x42>
c0104ce3:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ce8:	e9 a6 00 00 00       	jmp    c0104d93 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104ced:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104cf4:	00 
c0104cf5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104cfc:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104d03:	e8 2f fc ff ff       	call   c0104937 <slob_alloc>
c0104d08:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104d0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104d0f:	75 07                	jne    c0104d18 <__kmalloc+0x72>
		return 0;
c0104d11:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d16:	eb 7b                	jmp    c0104d93 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104d18:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d1b:	89 04 24             	mov    %eax,(%esp)
c0104d1e:	e8 5f ff ff ff       	call   c0104c82 <find_order>
c0104d23:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d26:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104d28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d2b:	8b 00                	mov    (%eax),%eax
c0104d2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d34:	89 04 24             	mov    %eax,(%esp)
c0104d37:	e8 85 fb ff ff       	call   c01048c1 <__slob_get_free_pages>
c0104d3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d3f:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104d42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d45:	8b 40 04             	mov    0x4(%eax),%eax
c0104d48:	85 c0                	test   %eax,%eax
c0104d4a:	74 2f                	je     c0104d7b <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104d4c:	e8 1f fa ff ff       	call   c0104770 <__intr_save>
c0104d51:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104d54:	8b 15 84 43 1c c0    	mov    0xc01c4384,%edx
c0104d5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d5d:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104d60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d63:	a3 84 43 1c c0       	mov    %eax,0xc01c4384
		spin_unlock_irqrestore(&block_lock, flags);
c0104d68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d6b:	89 04 24             	mov    %eax,(%esp)
c0104d6e:	e8 2c fa ff ff       	call   c010479f <__intr_restore>
		return bb->pages;
c0104d73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d76:	8b 40 04             	mov    0x4(%eax),%eax
c0104d79:	eb 18                	jmp    c0104d93 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104d7b:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d82:	00 
c0104d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d86:	89 04 24             	mov    %eax,(%esp)
c0104d89:	e8 80 fd ff ff       	call   c0104b0e <slob_free>
	return 0;
c0104d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d93:	c9                   	leave  
c0104d94:	c3                   	ret    

c0104d95 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104d95:	55                   	push   %ebp
c0104d96:	89 e5                	mov    %esp,%ebp
c0104d98:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104d9b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104da2:	00 
c0104da3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104da6:	89 04 24             	mov    %eax,(%esp)
c0104da9:	e8 f8 fe ff ff       	call   c0104ca6 <__kmalloc>
}
c0104dae:	c9                   	leave  
c0104daf:	c3                   	ret    

c0104db0 <kfree>:


void kfree(void *block)
{
c0104db0:	55                   	push   %ebp
c0104db1:	89 e5                	mov    %esp,%ebp
c0104db3:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104db6:	c7 45 f0 84 43 1c c0 	movl   $0xc01c4384,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104dbd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104dc1:	0f 84 a4 00 00 00    	je     c0104e6b <kfree+0xbb>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104dc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dca:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104dcf:	85 c0                	test   %eax,%eax
c0104dd1:	75 7f                	jne    c0104e52 <kfree+0xa2>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104dd3:	e8 98 f9 ff ff       	call   c0104770 <__intr_save>
c0104dd8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104ddb:	a1 84 43 1c c0       	mov    0xc01c4384,%eax
c0104de0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104de3:	eb 5c                	jmp    c0104e41 <kfree+0x91>
			if (bb->pages == block) {
c0104de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104de8:	8b 40 04             	mov    0x4(%eax),%eax
c0104deb:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104dee:	75 3f                	jne    c0104e2f <kfree+0x7f>
				*last = bb->next;
c0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df3:	8b 50 08             	mov    0x8(%eax),%edx
c0104df6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104df9:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104dfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dfe:	89 04 24             	mov    %eax,(%esp)
c0104e01:	e8 99 f9 ff ff       	call   c010479f <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104e06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e09:	8b 10                	mov    (%eax),%edx
c0104e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e0e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e12:	89 04 24             	mov    %eax,(%esp)
c0104e15:	e8 e7 fa ff ff       	call   c0104901 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104e1a:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104e21:	00 
c0104e22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e25:	89 04 24             	mov    %eax,(%esp)
c0104e28:	e8 e1 fc ff ff       	call   c0104b0e <slob_free>
				return;
c0104e2d:	eb 3d                	jmp    c0104e6c <kfree+0xbc>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e32:	83 c0 08             	add    $0x8,%eax
c0104e35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e3b:	8b 40 08             	mov    0x8(%eax),%eax
c0104e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e45:	75 9e                	jne    c0104de5 <kfree+0x35>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e4a:	89 04 24             	mov    %eax,(%esp)
c0104e4d:	e8 4d f9 ff ff       	call   c010479f <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e55:	83 e8 08             	sub    $0x8,%eax
c0104e58:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104e5f:	00 
c0104e60:	89 04 24             	mov    %eax,(%esp)
c0104e63:	e8 a6 fc ff ff       	call   c0104b0e <slob_free>
	return;
c0104e68:	90                   	nop
c0104e69:	eb 01                	jmp    c0104e6c <kfree+0xbc>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0104e6b:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0104e6c:	c9                   	leave  
c0104e6d:	c3                   	ret    

c0104e6e <ksize>:


unsigned int ksize(const void *block)
{
c0104e6e:	55                   	push   %ebp
c0104e6f:	89 e5                	mov    %esp,%ebp
c0104e71:	53                   	push   %ebx
c0104e72:	83 ec 24             	sub    $0x24,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104e75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e79:	75 07                	jne    c0104e82 <ksize+0x14>
		return 0;
c0104e7b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e80:	eb 6d                	jmp    c0104eef <ksize+0x81>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e85:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104e8a:	85 c0                	test   %eax,%eax
c0104e8c:	75 56                	jne    c0104ee4 <ksize+0x76>
		spin_lock_irqsave(&block_lock, flags);
c0104e8e:	e8 dd f8 ff ff       	call   c0104770 <__intr_save>
c0104e93:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104e96:	a1 84 43 1c c0       	mov    0xc01c4384,%eax
c0104e9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e9e:	eb 33                	jmp    c0104ed3 <ksize+0x65>
			if (bb->pages == block) {
c0104ea0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ea3:	8b 40 04             	mov    0x4(%eax),%eax
c0104ea6:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ea9:	75 1f                	jne    c0104eca <ksize+0x5c>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eae:	89 04 24             	mov    %eax,(%esp)
c0104eb1:	e8 e9 f8 ff ff       	call   c010479f <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eb9:	8b 00                	mov    (%eax),%eax
c0104ebb:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104ec0:	89 d3                	mov    %edx,%ebx
c0104ec2:	89 c1                	mov    %eax,%ecx
c0104ec4:	d3 e3                	shl    %cl,%ebx
c0104ec6:	89 d8                	mov    %ebx,%eax
c0104ec8:	eb 25                	jmp    c0104eef <ksize+0x81>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ecd:	8b 40 08             	mov    0x8(%eax),%eax
c0104ed0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ed3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104ed7:	75 c7                	jne    c0104ea0 <ksize+0x32>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104ed9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104edc:	89 04 24             	mov    %eax,(%esp)
c0104edf:	e8 bb f8 ff ff       	call   c010479f <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee7:	83 e8 08             	sub    $0x8,%eax
c0104eea:	8b 00                	mov    (%eax),%eax
c0104eec:	c1 e0 03             	shl    $0x3,%eax
}
c0104eef:	83 c4 24             	add    $0x24,%esp
c0104ef2:	5b                   	pop    %ebx
c0104ef3:	5d                   	pop    %ebp
c0104ef4:	c3                   	ret    
c0104ef5:	66 90                	xchg   %ax,%ax
c0104ef7:	90                   	nop

c0104ef8 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104ef8:	55                   	push   %ebp
c0104ef9:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104efb:	8b 55 08             	mov    0x8(%ebp),%edx
c0104efe:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c0104f03:	89 d1                	mov    %edx,%ecx
c0104f05:	29 c1                	sub    %eax,%ecx
c0104f07:	89 c8                	mov    %ecx,%eax
c0104f09:	c1 f8 05             	sar    $0x5,%eax
}
c0104f0c:	5d                   	pop    %ebp
c0104f0d:	c3                   	ret    

c0104f0e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104f0e:	55                   	push   %ebp
c0104f0f:	89 e5                	mov    %esp,%ebp
c0104f11:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104f14:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f17:	89 04 24             	mov    %eax,(%esp)
c0104f1a:	e8 d9 ff ff ff       	call   c0104ef8 <page2ppn>
c0104f1f:	c1 e0 0c             	shl    $0xc,%eax
}
c0104f22:	c9                   	leave  
c0104f23:	c3                   	ret    

c0104f24 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104f24:	55                   	push   %ebp
c0104f25:	89 e5                	mov    %esp,%ebp
c0104f27:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104f2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2d:	89 c2                	mov    %eax,%edx
c0104f2f:	c1 ea 0c             	shr    $0xc,%edx
c0104f32:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0104f37:	39 c2                	cmp    %eax,%edx
c0104f39:	72 1c                	jb     c0104f57 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104f3b:	c7 44 24 08 8c e8 10 	movl   $0xc010e88c,0x8(%esp)
c0104f42:	c0 
c0104f43:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104f4a:	00 
c0104f4b:	c7 04 24 ab e8 10 c0 	movl   $0xc010e8ab,(%esp)
c0104f52:	e8 9d be ff ff       	call   c0100df4 <__panic>
    }
    return &pages[PPN(pa)];
c0104f57:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c0104f5c:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f5f:	c1 ea 0c             	shr    $0xc,%edx
c0104f62:	c1 e2 05             	shl    $0x5,%edx
c0104f65:	01 d0                	add    %edx,%eax
}
c0104f67:	c9                   	leave  
c0104f68:	c3                   	ret    

c0104f69 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104f69:	55                   	push   %ebp
c0104f6a:	89 e5                	mov    %esp,%ebp
c0104f6c:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f72:	89 04 24             	mov    %eax,(%esp)
c0104f75:	e8 94 ff ff ff       	call   c0104f0e <page2pa>
c0104f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f80:	c1 e8 0c             	shr    $0xc,%eax
c0104f83:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f86:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0104f8b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104f8e:	72 23                	jb     c0104fb3 <page2kva+0x4a>
c0104f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f93:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104f97:	c7 44 24 08 bc e8 10 	movl   $0xc010e8bc,0x8(%esp)
c0104f9e:	c0 
c0104f9f:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104fa6:	00 
c0104fa7:	c7 04 24 ab e8 10 c0 	movl   $0xc010e8ab,(%esp)
c0104fae:	e8 41 be ff ff       	call   c0100df4 <__panic>
c0104fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fb6:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104fbb:	c9                   	leave  
c0104fbc:	c3                   	ret    

c0104fbd <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104fbd:	55                   	push   %ebp
c0104fbe:	89 e5                	mov    %esp,%ebp
c0104fc0:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104fc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fc6:	83 e0 01             	and    $0x1,%eax
c0104fc9:	85 c0                	test   %eax,%eax
c0104fcb:	75 1c                	jne    c0104fe9 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104fcd:	c7 44 24 08 e0 e8 10 	movl   $0xc010e8e0,0x8(%esp)
c0104fd4:	c0 
c0104fd5:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104fdc:	00 
c0104fdd:	c7 04 24 ab e8 10 c0 	movl   $0xc010e8ab,(%esp)
c0104fe4:	e8 0b be ff ff       	call   c0100df4 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104fe9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104ff1:	89 04 24             	mov    %eax,(%esp)
c0104ff4:	e8 2b ff ff ff       	call   c0104f24 <pa2page>
}
c0104ff9:	c9                   	leave  
c0104ffa:	c3                   	ret    

c0104ffb <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104ffb:	55                   	push   %ebp
c0104ffc:	89 e5                	mov    %esp,%ebp
c0104ffe:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0105001:	8b 45 08             	mov    0x8(%ebp),%eax
c0105004:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105009:	89 04 24             	mov    %eax,(%esp)
c010500c:	e8 13 ff ff ff       	call   c0104f24 <pa2page>
}
c0105011:	c9                   	leave  
c0105012:	c3                   	ret    

c0105013 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0105013:	55                   	push   %ebp
c0105014:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105016:	8b 45 08             	mov    0x8(%ebp),%eax
c0105019:	8b 00                	mov    (%eax),%eax
}
c010501b:	5d                   	pop    %ebp
c010501c:	c3                   	ret    

c010501d <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010501d:	55                   	push   %ebp
c010501e:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105020:	8b 45 08             	mov    0x8(%ebp),%eax
c0105023:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105026:	89 10                	mov    %edx,(%eax)
}
c0105028:	5d                   	pop    %ebp
c0105029:	c3                   	ret    

c010502a <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c010502a:	55                   	push   %ebp
c010502b:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c010502d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105030:	8b 00                	mov    (%eax),%eax
c0105032:	8d 50 01             	lea    0x1(%eax),%edx
c0105035:	8b 45 08             	mov    0x8(%ebp),%eax
c0105038:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010503a:	8b 45 08             	mov    0x8(%ebp),%eax
c010503d:	8b 00                	mov    (%eax),%eax
}
c010503f:	5d                   	pop    %ebp
c0105040:	c3                   	ret    

c0105041 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0105041:	55                   	push   %ebp
c0105042:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0105044:	8b 45 08             	mov    0x8(%ebp),%eax
c0105047:	8b 00                	mov    (%eax),%eax
c0105049:	8d 50 ff             	lea    -0x1(%eax),%edx
c010504c:	8b 45 08             	mov    0x8(%ebp),%eax
c010504f:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105051:	8b 45 08             	mov    0x8(%ebp),%eax
c0105054:	8b 00                	mov    (%eax),%eax
}
c0105056:	5d                   	pop    %ebp
c0105057:	c3                   	ret    

c0105058 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0105058:	55                   	push   %ebp
c0105059:	89 e5                	mov    %esp,%ebp
c010505b:	53                   	push   %ebx
c010505c:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010505f:	9c                   	pushf  
c0105060:	5b                   	pop    %ebx
c0105061:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0105064:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0105067:	25 00 02 00 00       	and    $0x200,%eax
c010506c:	85 c0                	test   %eax,%eax
c010506e:	74 0c                	je     c010507c <__intr_save+0x24>
        intr_disable();
c0105070:	e8 a5 d0 ff ff       	call   c010211a <intr_disable>
        return 1;
c0105075:	b8 01 00 00 00       	mov    $0x1,%eax
c010507a:	eb 05                	jmp    c0105081 <__intr_save+0x29>
    }
    return 0;
c010507c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105081:	83 c4 14             	add    $0x14,%esp
c0105084:	5b                   	pop    %ebx
c0105085:	5d                   	pop    %ebp
c0105086:	c3                   	ret    

c0105087 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105087:	55                   	push   %ebp
c0105088:	89 e5                	mov    %esp,%ebp
c010508a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010508d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105091:	74 05                	je     c0105098 <__intr_restore+0x11>
        intr_enable();
c0105093:	e8 7c d0 ff ff       	call   c0102114 <intr_enable>
    }
}
c0105098:	c9                   	leave  
c0105099:	c3                   	ret    

c010509a <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010509a:	55                   	push   %ebp
c010509b:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010509d:	8b 45 08             	mov    0x8(%ebp),%eax
c01050a0:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01050a3:	b8 23 00 00 00       	mov    $0x23,%eax
c01050a8:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01050aa:	b8 23 00 00 00       	mov    $0x23,%eax
c01050af:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01050b1:	b8 10 00 00 00       	mov    $0x10,%eax
c01050b6:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01050b8:	b8 10 00 00 00       	mov    $0x10,%eax
c01050bd:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01050bf:	b8 10 00 00 00       	mov    $0x10,%eax
c01050c4:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01050c6:	ea cd 50 10 c0 08 00 	ljmp   $0x8,$0xc01050cd
}
c01050cd:	5d                   	pop    %ebp
c01050ce:	c3                   	ret    

c01050cf <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01050cf:	55                   	push   %ebp
c01050d0:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01050d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01050d5:	a3 c4 43 1c c0       	mov    %eax,0xc01c43c4
}
c01050da:	5d                   	pop    %ebp
c01050db:	c3                   	ret    

c01050dc <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01050dc:	55                   	push   %ebp
c01050dd:	89 e5                	mov    %esp,%ebp
c01050df:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01050e2:	b8 00 20 13 c0       	mov    $0xc0132000,%eax
c01050e7:	89 04 24             	mov    %eax,(%esp)
c01050ea:	e8 e0 ff ff ff       	call   c01050cf <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01050ef:	66 c7 05 c8 43 1c c0 	movw   $0x10,0xc01c43c8
c01050f6:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01050f8:	66 c7 05 48 2a 13 c0 	movw   $0x68,0xc0132a48
c01050ff:	68 00 
c0105101:	b8 c0 43 1c c0       	mov    $0xc01c43c0,%eax
c0105106:	66 a3 4a 2a 13 c0    	mov    %ax,0xc0132a4a
c010510c:	b8 c0 43 1c c0       	mov    $0xc01c43c0,%eax
c0105111:	c1 e8 10             	shr    $0x10,%eax
c0105114:	a2 4c 2a 13 c0       	mov    %al,0xc0132a4c
c0105119:	0f b6 05 4d 2a 13 c0 	movzbl 0xc0132a4d,%eax
c0105120:	83 e0 f0             	and    $0xfffffff0,%eax
c0105123:	83 c8 09             	or     $0x9,%eax
c0105126:	a2 4d 2a 13 c0       	mov    %al,0xc0132a4d
c010512b:	0f b6 05 4d 2a 13 c0 	movzbl 0xc0132a4d,%eax
c0105132:	83 e0 ef             	and    $0xffffffef,%eax
c0105135:	a2 4d 2a 13 c0       	mov    %al,0xc0132a4d
c010513a:	0f b6 05 4d 2a 13 c0 	movzbl 0xc0132a4d,%eax
c0105141:	83 e0 9f             	and    $0xffffff9f,%eax
c0105144:	a2 4d 2a 13 c0       	mov    %al,0xc0132a4d
c0105149:	0f b6 05 4d 2a 13 c0 	movzbl 0xc0132a4d,%eax
c0105150:	83 c8 80             	or     $0xffffff80,%eax
c0105153:	a2 4d 2a 13 c0       	mov    %al,0xc0132a4d
c0105158:	0f b6 05 4e 2a 13 c0 	movzbl 0xc0132a4e,%eax
c010515f:	83 e0 f0             	and    $0xfffffff0,%eax
c0105162:	a2 4e 2a 13 c0       	mov    %al,0xc0132a4e
c0105167:	0f b6 05 4e 2a 13 c0 	movzbl 0xc0132a4e,%eax
c010516e:	83 e0 ef             	and    $0xffffffef,%eax
c0105171:	a2 4e 2a 13 c0       	mov    %al,0xc0132a4e
c0105176:	0f b6 05 4e 2a 13 c0 	movzbl 0xc0132a4e,%eax
c010517d:	83 e0 df             	and    $0xffffffdf,%eax
c0105180:	a2 4e 2a 13 c0       	mov    %al,0xc0132a4e
c0105185:	0f b6 05 4e 2a 13 c0 	movzbl 0xc0132a4e,%eax
c010518c:	83 c8 40             	or     $0x40,%eax
c010518f:	a2 4e 2a 13 c0       	mov    %al,0xc0132a4e
c0105194:	0f b6 05 4e 2a 13 c0 	movzbl 0xc0132a4e,%eax
c010519b:	83 e0 7f             	and    $0x7f,%eax
c010519e:	a2 4e 2a 13 c0       	mov    %al,0xc0132a4e
c01051a3:	b8 c0 43 1c c0       	mov    $0xc01c43c0,%eax
c01051a8:	c1 e8 18             	shr    $0x18,%eax
c01051ab:	a2 4f 2a 13 c0       	mov    %al,0xc0132a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01051b0:	c7 04 24 50 2a 13 c0 	movl   $0xc0132a50,(%esp)
c01051b7:	e8 de fe ff ff       	call   c010509a <lgdt>
c01051bc:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01051c2:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01051c6:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01051c9:	c9                   	leave  
c01051ca:	c3                   	ret    

c01051cb <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01051cb:	55                   	push   %ebp
c01051cc:	89 e5                	mov    %esp,%ebp
c01051ce:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01051d1:	c7 05 e8 64 1c c0 68 	movl   $0xc010e768,0xc01c64e8
c01051d8:	e7 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01051db:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c01051e0:	8b 00                	mov    (%eax),%eax
c01051e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01051e6:	c7 04 24 0c e9 10 c0 	movl   $0xc010e90c,(%esp)
c01051ed:	e8 71 b1 ff ff       	call   c0100363 <cprintf>
    pmm_manager->init();
c01051f2:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c01051f7:	8b 40 04             	mov    0x4(%eax),%eax
c01051fa:	ff d0                	call   *%eax
}
c01051fc:	c9                   	leave  
c01051fd:	c3                   	ret    

c01051fe <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01051fe:	55                   	push   %ebp
c01051ff:	89 e5                	mov    %esp,%ebp
c0105201:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105204:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c0105209:	8b 40 08             	mov    0x8(%eax),%eax
c010520c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010520f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105213:	8b 55 08             	mov    0x8(%ebp),%edx
c0105216:	89 14 24             	mov    %edx,(%esp)
c0105219:	ff d0                	call   *%eax
}
c010521b:	c9                   	leave  
c010521c:	c3                   	ret    

c010521d <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010521d:	55                   	push   %ebp
c010521e:	89 e5                	mov    %esp,%ebp
c0105220:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105223:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010522a:	e8 29 fe ff ff       	call   c0105058 <__intr_save>
c010522f:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105232:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c0105237:	8b 40 0c             	mov    0xc(%eax),%eax
c010523a:	8b 55 08             	mov    0x8(%ebp),%edx
c010523d:	89 14 24             	mov    %edx,(%esp)
c0105240:	ff d0                	call   *%eax
c0105242:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105245:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105248:	89 04 24             	mov    %eax,(%esp)
c010524b:	e8 37 fe ff ff       	call   c0105087 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105250:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105254:	75 2d                	jne    c0105283 <alloc_pages+0x66>
c0105256:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010525a:	77 27                	ja     c0105283 <alloc_pages+0x66>
c010525c:	a1 2c 44 1c c0       	mov    0xc01c442c,%eax
c0105261:	85 c0                	test   %eax,%eax
c0105263:	74 1e                	je     c0105283 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105265:	8b 55 08             	mov    0x8(%ebp),%edx
c0105268:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c010526d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105274:	00 
c0105275:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105279:	89 04 24             	mov    %eax,(%esp)
c010527c:	e8 d2 1d 00 00       	call   c0107053 <swap_out>
    }
c0105281:	eb a7                	jmp    c010522a <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105283:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105286:	c9                   	leave  
c0105287:	c3                   	ret    

c0105288 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0105288:	55                   	push   %ebp
c0105289:	89 e5                	mov    %esp,%ebp
c010528b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010528e:	e8 c5 fd ff ff       	call   c0105058 <__intr_save>
c0105293:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0105296:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c010529b:	8b 40 10             	mov    0x10(%eax),%eax
c010529e:	8b 55 0c             	mov    0xc(%ebp),%edx
c01052a1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01052a5:	8b 55 08             	mov    0x8(%ebp),%edx
c01052a8:	89 14 24             	mov    %edx,(%esp)
c01052ab:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01052ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052b0:	89 04 24             	mov    %eax,(%esp)
c01052b3:	e8 cf fd ff ff       	call   c0105087 <__intr_restore>
}
c01052b8:	c9                   	leave  
c01052b9:	c3                   	ret    

c01052ba <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01052ba:	55                   	push   %ebp
c01052bb:	89 e5                	mov    %esp,%ebp
c01052bd:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01052c0:	e8 93 fd ff ff       	call   c0105058 <__intr_save>
c01052c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01052c8:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c01052cd:	8b 40 14             	mov    0x14(%eax),%eax
c01052d0:	ff d0                	call   *%eax
c01052d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01052d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052d8:	89 04 24             	mov    %eax,(%esp)
c01052db:	e8 a7 fd ff ff       	call   c0105087 <__intr_restore>
    return ret;
c01052e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01052e3:	c9                   	leave  
c01052e4:	c3                   	ret    

c01052e5 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01052e5:	55                   	push   %ebp
c01052e6:	89 e5                	mov    %esp,%ebp
c01052e8:	57                   	push   %edi
c01052e9:	56                   	push   %esi
c01052ea:	53                   	push   %ebx
c01052eb:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01052f1:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01052f8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01052ff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105306:	c7 04 24 23 e9 10 c0 	movl   $0xc010e923,(%esp)
c010530d:	e8 51 b0 ff ff       	call   c0100363 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105312:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105319:	e9 0f 01 00 00       	jmp    c010542d <page_init+0x148>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010531e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105321:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105324:	89 d0                	mov    %edx,%eax
c0105326:	c1 e0 02             	shl    $0x2,%eax
c0105329:	01 d0                	add    %edx,%eax
c010532b:	c1 e0 02             	shl    $0x2,%eax
c010532e:	01 c8                	add    %ecx,%eax
c0105330:	8b 50 08             	mov    0x8(%eax),%edx
c0105333:	8b 40 04             	mov    0x4(%eax),%eax
c0105336:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105339:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010533c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010533f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105342:	89 d0                	mov    %edx,%eax
c0105344:	c1 e0 02             	shl    $0x2,%eax
c0105347:	01 d0                	add    %edx,%eax
c0105349:	c1 e0 02             	shl    $0x2,%eax
c010534c:	01 c8                	add    %ecx,%eax
c010534e:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105351:	8b 58 10             	mov    0x10(%eax),%ebx
c0105354:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105357:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010535a:	01 c8                	add    %ecx,%eax
c010535c:	11 da                	adc    %ebx,%edx
c010535e:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105361:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c0105364:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105367:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010536a:	89 d0                	mov    %edx,%eax
c010536c:	c1 e0 02             	shl    $0x2,%eax
c010536f:	01 d0                	add    %edx,%eax
c0105371:	c1 e0 02             	shl    $0x2,%eax
c0105374:	01 c8                	add    %ecx,%eax
c0105376:	83 c0 14             	add    $0x14,%eax
c0105379:	8b 00                	mov    (%eax),%eax
c010537b:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010537e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105381:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105384:	89 c6                	mov    %eax,%esi
c0105386:	89 d7                	mov    %edx,%edi
c0105388:	83 c6 ff             	add    $0xffffffff,%esi
c010538b:	83 d7 ff             	adc    $0xffffffff,%edi
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c010538e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105391:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105394:	89 d0                	mov    %edx,%eax
c0105396:	c1 e0 02             	shl    $0x2,%eax
c0105399:	01 d0                	add    %edx,%eax
c010539b:	c1 e0 02             	shl    $0x2,%eax
c010539e:	01 c8                	add    %ecx,%eax
c01053a0:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053a3:	8b 58 10             	mov    0x10(%eax),%ebx
c01053a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01053a9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01053ad:	89 74 24 14          	mov    %esi,0x14(%esp)
c01053b1:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01053b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01053b8:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01053bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01053bf:	89 54 24 10          	mov    %edx,0x10(%esp)
c01053c3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01053c7:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01053cb:	c7 04 24 30 e9 10 c0 	movl   $0xc010e930,(%esp)
c01053d2:	e8 8c af ff ff       	call   c0100363 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01053d7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053da:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053dd:	89 d0                	mov    %edx,%eax
c01053df:	c1 e0 02             	shl    $0x2,%eax
c01053e2:	01 d0                	add    %edx,%eax
c01053e4:	c1 e0 02             	shl    $0x2,%eax
c01053e7:	01 c8                	add    %ecx,%eax
c01053e9:	83 c0 14             	add    $0x14,%eax
c01053ec:	8b 00                	mov    (%eax),%eax
c01053ee:	83 f8 01             	cmp    $0x1,%eax
c01053f1:	75 36                	jne    c0105429 <page_init+0x144>
            if (maxpa < end && begin < KMEMSIZE) {
c01053f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01053f9:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01053fc:	77 2b                	ja     c0105429 <page_init+0x144>
c01053fe:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105401:	72 05                	jb     c0105408 <page_init+0x123>
c0105403:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105406:	73 21                	jae    c0105429 <page_init+0x144>
c0105408:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010540c:	77 1b                	ja     c0105429 <page_init+0x144>
c010540e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105412:	72 09                	jb     c010541d <page_init+0x138>
c0105414:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010541b:	77 0c                	ja     c0105429 <page_init+0x144>
                maxpa = end;
c010541d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105420:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105423:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105426:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105429:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010542d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105430:	8b 00                	mov    (%eax),%eax
c0105432:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105435:	0f 8f e3 fe ff ff    	jg     c010531e <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010543b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010543f:	72 1d                	jb     c010545e <page_init+0x179>
c0105441:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105445:	77 09                	ja     c0105450 <page_init+0x16b>
c0105447:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010544e:	76 0e                	jbe    c010545e <page_init+0x179>
        maxpa = KMEMSIZE;
c0105450:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105457:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010545e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105461:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105464:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105468:	c1 ea 0c             	shr    $0xc,%edx
c010546b:	a3 a0 43 1c c0       	mov    %eax,0xc01c43a0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105470:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105477:	b8 4c 67 1c c0       	mov    $0xc01c674c,%eax
c010547c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010547f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105482:	01 d0                	add    %edx,%eax
c0105484:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105487:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010548a:	ba 00 00 00 00       	mov    $0x0,%edx
c010548f:	f7 75 ac             	divl   -0x54(%ebp)
c0105492:	89 d0                	mov    %edx,%eax
c0105494:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105497:	89 d1                	mov    %edx,%ecx
c0105499:	29 c1                	sub    %eax,%ecx
c010549b:	89 c8                	mov    %ecx,%eax
c010549d:	a3 f0 64 1c c0       	mov    %eax,0xc01c64f0

    for (i = 0; i < npage; i ++) {
c01054a2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01054a9:	eb 27                	jmp    c01054d2 <page_init+0x1ed>
        SetPageReserved(pages + i);
c01054ab:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c01054b0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054b3:	c1 e2 05             	shl    $0x5,%edx
c01054b6:	01 d0                	add    %edx,%eax
c01054b8:	83 c0 04             	add    $0x4,%eax
c01054bb:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01054c2:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01054c5:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01054c8:	8b 55 90             	mov    -0x70(%ebp),%edx
c01054cb:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01054ce:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01054d2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054d5:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c01054da:	39 c2                	cmp    %eax,%edx
c01054dc:	72 cd                	jb     c01054ab <page_init+0x1c6>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01054de:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c01054e3:	89 c2                	mov    %eax,%edx
c01054e5:	c1 e2 05             	shl    $0x5,%edx
c01054e8:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c01054ed:	01 d0                	add    %edx,%eax
c01054ef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01054f2:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01054f9:	77 23                	ja     c010551e <page_init+0x239>
c01054fb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01054fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105502:	c7 44 24 08 60 e9 10 	movl   $0xc010e960,0x8(%esp)
c0105509:	c0 
c010550a:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105511:	00 
c0105512:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105519:	e8 d6 b8 ff ff       	call   c0100df4 <__panic>
c010551e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105521:	05 00 00 00 40       	add    $0x40000000,%eax
c0105526:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105529:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105530:	e9 82 01 00 00       	jmp    c01056b7 <page_init+0x3d2>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105535:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105538:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010553b:	89 d0                	mov    %edx,%eax
c010553d:	c1 e0 02             	shl    $0x2,%eax
c0105540:	01 d0                	add    %edx,%eax
c0105542:	c1 e0 02             	shl    $0x2,%eax
c0105545:	01 c8                	add    %ecx,%eax
c0105547:	8b 50 08             	mov    0x8(%eax),%edx
c010554a:	8b 40 04             	mov    0x4(%eax),%eax
c010554d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105550:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105553:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105556:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105559:	89 d0                	mov    %edx,%eax
c010555b:	c1 e0 02             	shl    $0x2,%eax
c010555e:	01 d0                	add    %edx,%eax
c0105560:	c1 e0 02             	shl    $0x2,%eax
c0105563:	01 c8                	add    %ecx,%eax
c0105565:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105568:	8b 58 10             	mov    0x10(%eax),%ebx
c010556b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010556e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105571:	01 c8                	add    %ecx,%eax
c0105573:	11 da                	adc    %ebx,%edx
c0105575:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105578:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c010557b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010557e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105581:	89 d0                	mov    %edx,%eax
c0105583:	c1 e0 02             	shl    $0x2,%eax
c0105586:	01 d0                	add    %edx,%eax
c0105588:	c1 e0 02             	shl    $0x2,%eax
c010558b:	01 c8                	add    %ecx,%eax
c010558d:	83 c0 14             	add    $0x14,%eax
c0105590:	8b 00                	mov    (%eax),%eax
c0105592:	83 f8 01             	cmp    $0x1,%eax
c0105595:	0f 85 18 01 00 00    	jne    c01056b3 <page_init+0x3ce>
            if (begin < freemem) {
c010559b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010559e:	ba 00 00 00 00       	mov    $0x0,%edx
c01055a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01055a6:	72 17                	jb     c01055bf <page_init+0x2da>
c01055a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01055ab:	77 05                	ja     c01055b2 <page_init+0x2cd>
c01055ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01055b0:	76 0d                	jbe    c01055bf <page_init+0x2da>
                begin = freemem;
c01055b2:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01055b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01055b8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01055bf:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01055c3:	72 1d                	jb     c01055e2 <page_init+0x2fd>
c01055c5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01055c9:	77 09                	ja     c01055d4 <page_init+0x2ef>
c01055cb:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01055d2:	76 0e                	jbe    c01055e2 <page_init+0x2fd>
                end = KMEMSIZE;
c01055d4:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01055db:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01055e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055e5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055e8:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055eb:	0f 87 c2 00 00 00    	ja     c01056b3 <page_init+0x3ce>
c01055f1:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055f4:	72 09                	jb     c01055ff <page_init+0x31a>
c01055f6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01055f9:	0f 83 b4 00 00 00    	jae    c01056b3 <page_init+0x3ce>
                begin = ROUNDUP(begin, PGSIZE);
c01055ff:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105606:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105609:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010560c:	01 d0                	add    %edx,%eax
c010560e:	83 e8 01             	sub    $0x1,%eax
c0105611:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105614:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105617:	ba 00 00 00 00       	mov    $0x0,%edx
c010561c:	f7 75 9c             	divl   -0x64(%ebp)
c010561f:	89 d0                	mov    %edx,%eax
c0105621:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105624:	89 d1                	mov    %edx,%ecx
c0105626:	29 c1                	sub    %eax,%ecx
c0105628:	89 c8                	mov    %ecx,%eax
c010562a:	ba 00 00 00 00       	mov    $0x0,%edx
c010562f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105632:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105635:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105638:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010563b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010563e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105643:	89 c1                	mov    %eax,%ecx
c0105645:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c010564b:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c0105651:	89 d1                	mov    %edx,%ecx
c0105653:	83 e1 00             	and    $0x0,%ecx
c0105656:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c010565c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0105662:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c0105668:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010566b:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010566e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105671:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105674:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105677:	77 3a                	ja     c01056b3 <page_init+0x3ce>
c0105679:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010567c:	72 05                	jb     c0105683 <page_init+0x39e>
c010567e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105681:	73 30                	jae    c01056b3 <page_init+0x3ce>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105683:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105686:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105689:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010568c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010568f:	29 c8                	sub    %ecx,%eax
c0105691:	19 da                	sbb    %ebx,%edx
c0105693:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105697:	c1 ea 0c             	shr    $0xc,%edx
c010569a:	89 c3                	mov    %eax,%ebx
c010569c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010569f:	89 04 24             	mov    %eax,(%esp)
c01056a2:	e8 7d f8 ff ff       	call   c0104f24 <pa2page>
c01056a7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01056ab:	89 04 24             	mov    %eax,(%esp)
c01056ae:	e8 4b fb ff ff       	call   c01051fe <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01056b3:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01056b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01056ba:	8b 00                	mov    (%eax),%eax
c01056bc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01056bf:	0f 8f 70 fe ff ff    	jg     c0105535 <page_init+0x250>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01056c5:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01056cb:	5b                   	pop    %ebx
c01056cc:	5e                   	pop    %esi
c01056cd:	5f                   	pop    %edi
c01056ce:	5d                   	pop    %ebp
c01056cf:	c3                   	ret    

c01056d0 <enable_paging>:

static void
enable_paging(void) {
c01056d0:	55                   	push   %ebp
c01056d1:	89 e5                	mov    %esp,%ebp
c01056d3:	53                   	push   %ebx
c01056d4:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01056d7:	a1 ec 64 1c c0       	mov    0xc01c64ec,%eax
c01056dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01056df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056e2:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01056e5:	0f 20 c3             	mov    %cr0,%ebx
c01056e8:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr0;
c01056eb:	8b 45 f0             	mov    -0x10(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01056ee:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01056f1:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01056f8:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
c01056fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01056ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0105702:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105705:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105708:	83 c4 10             	add    $0x10,%esp
c010570b:	5b                   	pop    %ebx
c010570c:	5d                   	pop    %ebp
c010570d:	c3                   	ret    

c010570e <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010570e:	55                   	push   %ebp
c010570f:	89 e5                	mov    %esp,%ebp
c0105711:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105714:	8b 45 14             	mov    0x14(%ebp),%eax
c0105717:	8b 55 0c             	mov    0xc(%ebp),%edx
c010571a:	31 d0                	xor    %edx,%eax
c010571c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105721:	85 c0                	test   %eax,%eax
c0105723:	74 24                	je     c0105749 <boot_map_segment+0x3b>
c0105725:	c7 44 24 0c 92 e9 10 	movl   $0xc010e992,0xc(%esp)
c010572c:	c0 
c010572d:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105734:	c0 
c0105735:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010573c:	00 
c010573d:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105744:	e8 ab b6 ff ff       	call   c0100df4 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105749:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105750:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105753:	89 c2                	mov    %eax,%edx
c0105755:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010575b:	8b 45 10             	mov    0x10(%ebp),%eax
c010575e:	01 c2                	add    %eax,%edx
c0105760:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105763:	01 d0                	add    %edx,%eax
c0105765:	83 e8 01             	sub    $0x1,%eax
c0105768:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010576b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010576e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105773:	f7 75 f0             	divl   -0x10(%ebp)
c0105776:	89 d0                	mov    %edx,%eax
c0105778:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010577b:	89 d1                	mov    %edx,%ecx
c010577d:	29 c1                	sub    %eax,%ecx
c010577f:	89 c8                	mov    %ecx,%eax
c0105781:	c1 e8 0c             	shr    $0xc,%eax
c0105784:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105787:	8b 45 0c             	mov    0xc(%ebp),%eax
c010578a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010578d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105790:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105795:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105798:	8b 45 14             	mov    0x14(%ebp),%eax
c010579b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010579e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01057a6:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01057a9:	eb 6b                	jmp    c0105816 <boot_map_segment+0x108>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01057ab:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01057b2:	00 
c01057b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01057ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01057bd:	89 04 24             	mov    %eax,(%esp)
c01057c0:	e8 d1 01 00 00       	call   c0105996 <get_pte>
c01057c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01057c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01057cc:	75 24                	jne    c01057f2 <boot_map_segment+0xe4>
c01057ce:	c7 44 24 0c be e9 10 	movl   $0xc010e9be,0xc(%esp)
c01057d5:	c0 
c01057d6:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01057dd:	c0 
c01057de:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01057e5:	00 
c01057e6:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01057ed:	e8 02 b6 ff ff       	call   c0100df4 <__panic>
        *ptep = pa | PTE_P | perm;
c01057f2:	8b 45 18             	mov    0x18(%ebp),%eax
c01057f5:	8b 55 14             	mov    0x14(%ebp),%edx
c01057f8:	09 d0                	or     %edx,%eax
c01057fa:	89 c2                	mov    %eax,%edx
c01057fc:	83 ca 01             	or     $0x1,%edx
c01057ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105802:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105804:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105808:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010580f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105816:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010581a:	75 8f                	jne    c01057ab <boot_map_segment+0x9d>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010581c:	c9                   	leave  
c010581d:	c3                   	ret    

c010581e <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010581e:	55                   	push   %ebp
c010581f:	89 e5                	mov    %esp,%ebp
c0105821:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105824:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010582b:	e8 ed f9 ff ff       	call   c010521d <alloc_pages>
c0105830:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105833:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105837:	75 1c                	jne    c0105855 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105839:	c7 44 24 08 cb e9 10 	movl   $0xc010e9cb,0x8(%esp)
c0105840:	c0 
c0105841:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105848:	00 
c0105849:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105850:	e8 9f b5 ff ff       	call   c0100df4 <__panic>
    }
    return page2kva(p);
c0105855:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105858:	89 04 24             	mov    %eax,(%esp)
c010585b:	e8 09 f7 ff ff       	call   c0104f69 <page2kva>
}
c0105860:	c9                   	leave  
c0105861:	c3                   	ret    

c0105862 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105862:	55                   	push   %ebp
c0105863:	89 e5                	mov    %esp,%ebp
c0105865:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105868:	e8 5e f9 ff ff       	call   c01051cb <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010586d:	e8 73 fa ff ff       	call   c01052e5 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105872:	e8 82 09 00 00       	call   c01061f9 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105877:	e8 a2 ff ff ff       	call   c010581e <boot_alloc_page>
c010587c:	a3 a4 43 1c c0       	mov    %eax,0xc01c43a4
    memset(boot_pgdir, 0, PGSIZE);
c0105881:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0105886:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010588d:	00 
c010588e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105895:	00 
c0105896:	89 04 24             	mov    %eax,(%esp)
c0105899:	e8 69 80 00 00       	call   c010d907 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010589e:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01058a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058a6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01058ad:	77 23                	ja     c01058d2 <pmm_init+0x70>
c01058af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058b2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058b6:	c7 44 24 08 60 e9 10 	movl   $0xc010e960,0x8(%esp)
c01058bd:	c0 
c01058be:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01058c5:	00 
c01058c6:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01058cd:	e8 22 b5 ff ff       	call   c0100df4 <__panic>
c01058d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058d5:	05 00 00 00 40       	add    $0x40000000,%eax
c01058da:	a3 ec 64 1c c0       	mov    %eax,0xc01c64ec

    check_pgdir();
c01058df:	e8 33 09 00 00       	call   c0106217 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01058e4:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01058e9:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01058ef:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01058f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058f7:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01058fe:	77 23                	ja     c0105923 <pmm_init+0xc1>
c0105900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105903:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105907:	c7 44 24 08 60 e9 10 	movl   $0xc010e960,0x8(%esp)
c010590e:	c0 
c010590f:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105916:	00 
c0105917:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010591e:	e8 d1 b4 ff ff       	call   c0100df4 <__panic>
c0105923:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105926:	05 00 00 00 40       	add    $0x40000000,%eax
c010592b:	83 c8 03             	or     $0x3,%eax
c010592e:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105930:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0105935:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010593c:	00 
c010593d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105944:	00 
c0105945:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c010594c:	38 
c010594d:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105954:	c0 
c0105955:	89 04 24             	mov    %eax,(%esp)
c0105958:	e8 b1 fd ff ff       	call   c010570e <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010595d:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0105962:	8b 15 a4 43 1c c0    	mov    0xc01c43a4,%edx
c0105968:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010596e:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105970:	e8 5b fd ff ff       	call   c01056d0 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105975:	e8 62 f7 ff ff       	call   c01050dc <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c010597a:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010597f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105985:	e8 28 0f 00 00       	call   c01068b2 <check_boot_pgdir>

    print_pgdir();
c010598a:	e8 b3 13 00 00       	call   c0106d42 <print_pgdir>
    
    kmalloc_init();
c010598f:	e8 c1 f2 ff ff       	call   c0104c55 <kmalloc_init>

}
c0105994:	c9                   	leave  
c0105995:	c3                   	ret    

c0105996 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105996:	55                   	push   %ebp
c0105997:	89 e5                	mov    %esp,%ebp
c0105999:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = pgdir + PDX(la);
c010599c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010599f:	c1 e8 16             	shr    $0x16,%eax
c01059a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01059a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ac:	01 d0                	add    %edx,%eax
c01059ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!((*pdep) & PTE_P)) {
c01059b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059b4:	8b 00                	mov    (%eax),%eax
c01059b6:	83 e0 01             	and    $0x1,%eax
c01059b9:	85 c0                	test   %eax,%eax
c01059bb:	0f 85 a9 00 00 00    	jne    c0105a6a <get_pte+0xd4>
       if (!create)
c01059c1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01059c5:	75 0a                	jne    c01059d1 <get_pte+0x3b>
          return NULL;
c01059c7:	b8 00 00 00 00       	mov    $0x0,%eax
c01059cc:	e9 f5 00 00 00       	jmp    c0105ac6 <get_pte+0x130>
       struct Page *page = alloc_page();
c01059d1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01059d8:	e8 40 f8 ff ff       	call   c010521d <alloc_pages>
c01059dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
       set_page_ref(page, 1);
c01059e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01059e7:	00 
c01059e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059eb:	89 04 24             	mov    %eax,(%esp)
c01059ee:	e8 2a f6 ff ff       	call   c010501d <set_page_ref>
       uintptr_t pa = page2pa(page);
c01059f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059f6:	89 04 24             	mov    %eax,(%esp)
c01059f9:	e8 10 f5 ff ff       	call   c0104f0e <page2pa>
c01059fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
       memset(KADDR(pa), 0, PGSIZE);
c0105a01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a04:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105a07:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a0a:	c1 e8 0c             	shr    $0xc,%eax
c0105a0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105a10:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0105a15:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105a18:	72 23                	jb     c0105a3d <get_pte+0xa7>
c0105a1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a1d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105a21:	c7 44 24 08 bc e8 10 	movl   $0xc010e8bc,0x8(%esp)
c0105a28:	c0 
c0105a29:	c7 44 24 04 96 01 00 	movl   $0x196,0x4(%esp)
c0105a30:	00 
c0105a31:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105a38:	e8 b7 b3 ff ff       	call   c0100df4 <__panic>
c0105a3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a40:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a45:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105a4c:	00 
c0105a4d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105a54:	00 
c0105a55:	89 04 24             	mov    %eax,(%esp)
c0105a58:	e8 aa 7e 00 00       	call   c010d907 <memset>
       *pdep = pa | PTE_U | PTE_W | PTE_P;
c0105a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a60:	89 c2                	mov    %eax,%edx
c0105a62:	83 ca 07             	or     $0x7,%edx
c0105a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a68:	89 10                	mov    %edx,(%eax)
    }
    return ((pte_t *)KADDR(PDE_ADDR(*pdep)))+PTX(la);
c0105a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a6d:	8b 00                	mov    (%eax),%eax
c0105a6f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105a74:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105a77:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a7a:	c1 e8 0c             	shr    $0xc,%eax
c0105a7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105a80:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0105a85:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105a88:	72 23                	jb     c0105aad <get_pte+0x117>
c0105a8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a8d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105a91:	c7 44 24 08 bc e8 10 	movl   $0xc010e8bc,0x8(%esp)
c0105a98:	c0 
c0105a99:	c7 44 24 04 99 01 00 	movl   $0x199,0x4(%esp)
c0105aa0:	00 
c0105aa1:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105aa8:	e8 47 b3 ff ff       	call   c0100df4 <__panic>
c0105aad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ab0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105ab5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105ab8:	c1 ea 0c             	shr    $0xc,%edx
c0105abb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105ac1:	c1 e2 02             	shl    $0x2,%edx
c0105ac4:	01 d0                	add    %edx,%eax
}
c0105ac6:	c9                   	leave  
c0105ac7:	c3                   	ret    

c0105ac8 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105ac8:	55                   	push   %ebp
c0105ac9:	89 e5                	mov    %esp,%ebp
c0105acb:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105ace:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ad5:	00 
c0105ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ad9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105add:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ae0:	89 04 24             	mov    %eax,(%esp)
c0105ae3:	e8 ae fe ff ff       	call   c0105996 <get_pte>
c0105ae8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105aeb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105aef:	74 08                	je     c0105af9 <get_page+0x31>
        *ptep_store = ptep;
c0105af1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105af4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105af7:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105af9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105afd:	74 1b                	je     c0105b1a <get_page+0x52>
c0105aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b02:	8b 00                	mov    (%eax),%eax
c0105b04:	83 e0 01             	and    $0x1,%eax
c0105b07:	85 c0                	test   %eax,%eax
c0105b09:	74 0f                	je     c0105b1a <get_page+0x52>
        return pa2page(*ptep);
c0105b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b0e:	8b 00                	mov    (%eax),%eax
c0105b10:	89 04 24             	mov    %eax,(%esp)
c0105b13:	e8 0c f4 ff ff       	call   c0104f24 <pa2page>
c0105b18:	eb 05                	jmp    c0105b1f <get_page+0x57>
    }
    return NULL;
c0105b1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105b1f:	c9                   	leave  
c0105b20:	c3                   	ret    

c0105b21 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105b21:	55                   	push   %ebp
c0105b22:	89 e5                	mov    %esp,%ebp
c0105b24:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    pde_t *pdep = pgdir + PDX(la);
c0105b27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b2a:	c1 e8 16             	shr    $0x16,%eax
c0105b2d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b34:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b37:	01 d0                	add    %edx,%eax
c0105b39:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!((*pdep) & PTE_P)) return;
c0105b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b3f:	8b 00                	mov    (%eax),%eax
c0105b41:	83 e0 01             	and    $0x1,%eax
c0105b44:	85 c0                	test   %eax,%eax
c0105b46:	74 60                	je     c0105ba8 <page_remove_pte+0x87>
    struct Page *page = pte2page(*ptep);
c0105b48:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b4b:	8b 00                	mov    (%eax),%eax
c0105b4d:	89 04 24             	mov    %eax,(%esp)
c0105b50:	e8 68 f4 ff ff       	call   c0104fbd <pte2page>
c0105b55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    page_ref_dec(page);
c0105b58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b5b:	89 04 24             	mov    %eax,(%esp)
c0105b5e:	e8 de f4 ff ff       	call   c0105041 <page_ref_dec>
    if (page_ref(page) == 0) {
c0105b63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b66:	89 04 24             	mov    %eax,(%esp)
c0105b69:	e8 a5 f4 ff ff       	call   c0105013 <page_ref>
c0105b6e:	85 c0                	test   %eax,%eax
c0105b70:	75 37                	jne    c0105ba9 <page_remove_pte+0x88>
       free_page(page);
c0105b72:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105b79:	00 
c0105b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b7d:	89 04 24             	mov    %eax,(%esp)
c0105b80:	e8 03 f7 ff ff       	call   c0105288 <free_pages>
       *ptep &= ~PTE_P;
c0105b85:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b88:	8b 00                	mov    (%eax),%eax
c0105b8a:	89 c2                	mov    %eax,%edx
c0105b8c:	83 e2 fe             	and    $0xfffffffe,%edx
c0105b8f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b92:	89 10                	mov    %edx,(%eax)
       tlb_invalidate(pgdir, la);
c0105b94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b9e:	89 04 24             	mov    %eax,(%esp)
c0105ba1:	e8 1d 05 00 00       	call   c01060c3 <tlb_invalidate>
c0105ba6:	eb 01                	jmp    c0105ba9 <page_remove_pte+0x88>
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    pde_t *pdep = pgdir + PDX(la);
    if (!((*pdep) & PTE_P)) return;
c0105ba8:	90                   	nop
    if (page_ref(page) == 0) {
       free_page(page);
       *ptep &= ~PTE_P;
       tlb_invalidate(pgdir, la);
    }
}
c0105ba9:	c9                   	leave  
c0105baa:	c3                   	ret    

c0105bab <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105bab:	55                   	push   %ebp
c0105bac:	89 e5                	mov    %esp,%ebp
c0105bae:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bb4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bb9:	85 c0                	test   %eax,%eax
c0105bbb:	75 0c                	jne    c0105bc9 <unmap_range+0x1e>
c0105bbd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bc0:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bc5:	85 c0                	test   %eax,%eax
c0105bc7:	74 24                	je     c0105bed <unmap_range+0x42>
c0105bc9:	c7 44 24 0c e4 e9 10 	movl   $0xc010e9e4,0xc(%esp)
c0105bd0:	c0 
c0105bd1:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105bd8:	c0 
c0105bd9:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105be0:	00 
c0105be1:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105be8:	e8 07 b2 ff ff       	call   c0100df4 <__panic>
    assert(USER_ACCESS(start, end));
c0105bed:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105bf4:	76 11                	jbe    c0105c07 <unmap_range+0x5c>
c0105bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bf9:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bfc:	73 09                	jae    c0105c07 <unmap_range+0x5c>
c0105bfe:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c05:	76 24                	jbe    c0105c2b <unmap_range+0x80>
c0105c07:	c7 44 24 0c 0d ea 10 	movl   $0xc010ea0d,0xc(%esp)
c0105c0e:	c0 
c0105c0f:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105c16:	c0 
c0105c17:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105c1e:	00 
c0105c1f:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105c26:	e8 c9 b1 ff ff       	call   c0100df4 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105c2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105c32:	00 
c0105c33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c3d:	89 04 24             	mov    %eax,(%esp)
c0105c40:	e8 51 fd ff ff       	call   c0105996 <get_pte>
c0105c45:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105c48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c4c:	75 18                	jne    c0105c66 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105c4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c51:	05 00 00 40 00       	add    $0x400000,%eax
c0105c56:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105c59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c5c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c61:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105c64:	eb 29                	jmp    c0105c8f <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105c66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c69:	8b 00                	mov    (%eax),%eax
c0105c6b:	85 c0                	test   %eax,%eax
c0105c6d:	74 19                	je     c0105c88 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c72:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105c76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c80:	89 04 24             	mov    %eax,(%esp)
c0105c83:	e8 99 fe ff ff       	call   c0105b21 <page_remove_pte>
        }
        start += PGSIZE;
c0105c88:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c93:	74 08                	je     c0105c9d <unmap_range+0xf2>
c0105c95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c98:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c9b:	72 8e                	jb     c0105c2b <unmap_range+0x80>
}
c0105c9d:	c9                   	leave  
c0105c9e:	c3                   	ret    

c0105c9f <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105c9f:	55                   	push   %ebp
c0105ca0:	89 e5                	mov    %esp,%ebp
c0105ca2:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ca5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ca8:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cad:	85 c0                	test   %eax,%eax
c0105caf:	75 0c                	jne    c0105cbd <exit_range+0x1e>
c0105cb1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cb4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cb9:	85 c0                	test   %eax,%eax
c0105cbb:	74 24                	je     c0105ce1 <exit_range+0x42>
c0105cbd:	c7 44 24 0c e4 e9 10 	movl   $0xc010e9e4,0xc(%esp)
c0105cc4:	c0 
c0105cc5:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105ccc:	c0 
c0105ccd:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105cd4:	00 
c0105cd5:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105cdc:	e8 13 b1 ff ff       	call   c0100df4 <__panic>
    assert(USER_ACCESS(start, end));
c0105ce1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105ce8:	76 11                	jbe    c0105cfb <exit_range+0x5c>
c0105cea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ced:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105cf0:	73 09                	jae    c0105cfb <exit_range+0x5c>
c0105cf2:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105cf9:	76 24                	jbe    c0105d1f <exit_range+0x80>
c0105cfb:	c7 44 24 0c 0d ea 10 	movl   $0xc010ea0d,0xc(%esp)
c0105d02:	c0 
c0105d03:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105d0a:	c0 
c0105d0b:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105d12:	00 
c0105d13:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105d1a:	e8 d5 b0 ff ff       	call   c0100df4 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105d1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d28:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d2d:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105d30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d33:	c1 e8 16             	shr    $0x16,%eax
c0105d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d3c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d43:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d46:	01 d0                	add    %edx,%eax
c0105d48:	8b 00                	mov    (%eax),%eax
c0105d4a:	83 e0 01             	and    $0x1,%eax
c0105d4d:	85 c0                	test   %eax,%eax
c0105d4f:	74 3e                	je     c0105d8f <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105d51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d5e:	01 d0                	add    %edx,%eax
c0105d60:	8b 00                	mov    (%eax),%eax
c0105d62:	89 04 24             	mov    %eax,(%esp)
c0105d65:	e8 91 f2 ff ff       	call   c0104ffb <pde2page>
c0105d6a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105d71:	00 
c0105d72:	89 04 24             	mov    %eax,(%esp)
c0105d75:	e8 0e f5 ff ff       	call   c0105288 <free_pages>
            pgdir[pde_idx] = 0;
c0105d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d7d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d84:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d87:	01 d0                	add    %edx,%eax
c0105d89:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105d8f:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105d96:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105d9a:	74 08                	je     c0105da4 <exit_range+0x105>
c0105d9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d9f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105da2:	72 8c                	jb     c0105d30 <exit_range+0x91>
}
c0105da4:	c9                   	leave  
c0105da5:	c3                   	ret    

c0105da6 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105da6:	55                   	push   %ebp
c0105da7:	89 e5                	mov    %esp,%ebp
c0105da9:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105dac:	8b 45 10             	mov    0x10(%ebp),%eax
c0105daf:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105db4:	85 c0                	test   %eax,%eax
c0105db6:	75 0c                	jne    c0105dc4 <copy_range+0x1e>
c0105db8:	8b 45 14             	mov    0x14(%ebp),%eax
c0105dbb:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105dc0:	85 c0                	test   %eax,%eax
c0105dc2:	74 24                	je     c0105de8 <copy_range+0x42>
c0105dc4:	c7 44 24 0c e4 e9 10 	movl   $0xc010e9e4,0xc(%esp)
c0105dcb:	c0 
c0105dcc:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105dd3:	c0 
c0105dd4:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105ddb:	00 
c0105ddc:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105de3:	e8 0c b0 ff ff       	call   c0100df4 <__panic>
    assert(USER_ACCESS(start, end));
c0105de8:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105def:	76 11                	jbe    c0105e02 <copy_range+0x5c>
c0105df1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105df4:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105df7:	73 09                	jae    c0105e02 <copy_range+0x5c>
c0105df9:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105e00:	76 24                	jbe    c0105e26 <copy_range+0x80>
c0105e02:	c7 44 24 0c 0d ea 10 	movl   $0xc010ea0d,0xc(%esp)
c0105e09:	c0 
c0105e0a:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105e11:	c0 
c0105e12:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105e19:	00 
c0105e1a:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105e21:	e8 ce af ff ff       	call   c0100df4 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105e26:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e2d:	00 
c0105e2e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e38:	89 04 24             	mov    %eax,(%esp)
c0105e3b:	e8 56 fb ff ff       	call   c0105996 <get_pte>
c0105e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105e43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e47:	75 1b                	jne    c0105e64 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105e49:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e4c:	05 00 00 40 00       	add    $0x400000,%eax
c0105e51:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105e54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e57:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105e5c:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105e5f:	e9 49 01 00 00       	jmp    c0105fad <copy_range+0x207>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105e64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e67:	8b 00                	mov    (%eax),%eax
c0105e69:	83 e0 01             	and    $0x1,%eax
c0105e6c:	85 c0                	test   %eax,%eax
c0105e6e:	0f 84 32 01 00 00    	je     c0105fa6 <copy_range+0x200>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105e74:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105e7b:	00 
c0105e7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e86:	89 04 24             	mov    %eax,(%esp)
c0105e89:	e8 08 fb ff ff       	call   c0105996 <get_pte>
c0105e8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105e91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105e95:	75 0a                	jne    c0105ea1 <copy_range+0xfb>
                return -E_NO_MEM;
c0105e97:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105e9c:	e9 23 01 00 00       	jmp    c0105fc4 <copy_range+0x21e>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea4:	8b 00                	mov    (%eax),%eax
c0105ea6:	83 e0 07             	and    $0x7,%eax
c0105ea9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eaf:	8b 00                	mov    (%eax),%eax
c0105eb1:	89 04 24             	mov    %eax,(%esp)
c0105eb4:	e8 04 f1 ff ff       	call   c0104fbd <pte2page>
c0105eb9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105ebc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105ec3:	e8 55 f3 ff ff       	call   c010521d <alloc_pages>
c0105ec8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105ecb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105ecf:	75 24                	jne    c0105ef5 <copy_range+0x14f>
c0105ed1:	c7 44 24 0c 25 ea 10 	movl   $0xc010ea25,0xc(%esp)
c0105ed8:	c0 
c0105ed9:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105ee0:	c0 
c0105ee1:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105ee8:	00 
c0105ee9:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105ef0:	e8 ff ae ff ff       	call   c0100df4 <__panic>
        assert(npage!=NULL);
c0105ef5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ef9:	75 24                	jne    c0105f1f <copy_range+0x179>
c0105efb:	c7 44 24 0c 30 ea 10 	movl   $0xc010ea30,0xc(%esp)
c0105f02:	c0 
c0105f03:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105f0a:	c0 
c0105f0b:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105f12:	00 
c0105f13:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105f1a:	e8 d5 ae ff ff       	call   c0100df4 <__panic>
        int ret=0;
c0105f1f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void *src_kvaddr = page2kva(page);
c0105f26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f29:	89 04 24             	mov    %eax,(%esp)
c0105f2c:	e8 38 f0 ff ff       	call   c0104f69 <page2kva>
c0105f31:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void *dst_kvaddr = page2kva(npage); 
c0105f34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f37:	89 04 24             	mov    %eax,(%esp)
c0105f3a:	e8 2a f0 ff ff       	call   c0104f69 <page2kva>
c0105f3f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105f42:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105f49:	00 
c0105f4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f51:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105f54:	89 04 24             	mov    %eax,(%esp)
c0105f57:	e8 ad 7a 00 00       	call   c010da09 <memcpy>
        page_insert(to, npage, start, perm);
c0105f5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f63:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f66:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f74:	89 04 24             	mov    %eax,(%esp)
c0105f77:	e8 8e 00 00 00       	call   c010600a <page_insert>

        assert(ret == 0);
c0105f7c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105f80:	74 24                	je     c0105fa6 <copy_range+0x200>
c0105f82:	c7 44 24 0c 3c ea 10 	movl   $0xc010ea3c,0xc(%esp)
c0105f89:	c0 
c0105f8a:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0105f91:	c0 
c0105f92:	c7 44 24 04 26 02 00 	movl   $0x226,0x4(%esp)
c0105f99:	00 
c0105f9a:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0105fa1:	e8 4e ae ff ff       	call   c0100df4 <__panic>
        }
        start += PGSIZE;
c0105fa6:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105fad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105fb1:	74 0c                	je     c0105fbf <copy_range+0x219>
c0105fb3:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fb6:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105fb9:	0f 82 67 fe ff ff    	jb     c0105e26 <copy_range+0x80>
    return 0;
c0105fbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fc4:	c9                   	leave  
c0105fc5:	c3                   	ret    

c0105fc6 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105fc6:	55                   	push   %ebp
c0105fc7:	89 e5                	mov    %esp,%ebp
c0105fc9:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105fcc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105fd3:	00 
c0105fd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fde:	89 04 24             	mov    %eax,(%esp)
c0105fe1:	e8 b0 f9 ff ff       	call   c0105996 <get_pte>
c0105fe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105fe9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fed:	74 19                	je     c0106008 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ff2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ff6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ff9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ffd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106000:	89 04 24             	mov    %eax,(%esp)
c0106003:	e8 19 fb ff ff       	call   c0105b21 <page_remove_pte>
    }
}
c0106008:	c9                   	leave  
c0106009:	c3                   	ret    

c010600a <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c010600a:	55                   	push   %ebp
c010600b:	89 e5                	mov    %esp,%ebp
c010600d:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0106010:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0106017:	00 
c0106018:	8b 45 10             	mov    0x10(%ebp),%eax
c010601b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010601f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106022:	89 04 24             	mov    %eax,(%esp)
c0106025:	e8 6c f9 ff ff       	call   c0105996 <get_pte>
c010602a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010602d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106031:	75 0a                	jne    c010603d <page_insert+0x33>
        return -E_NO_MEM;
c0106033:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0106038:	e9 84 00 00 00       	jmp    c01060c1 <page_insert+0xb7>
    }
    page_ref_inc(page);
c010603d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106040:	89 04 24             	mov    %eax,(%esp)
c0106043:	e8 e2 ef ff ff       	call   c010502a <page_ref_inc>
    if (*ptep & PTE_P) {
c0106048:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010604b:	8b 00                	mov    (%eax),%eax
c010604d:	83 e0 01             	and    $0x1,%eax
c0106050:	85 c0                	test   %eax,%eax
c0106052:	74 3e                	je     c0106092 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0106054:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106057:	8b 00                	mov    (%eax),%eax
c0106059:	89 04 24             	mov    %eax,(%esp)
c010605c:	e8 5c ef ff ff       	call   c0104fbd <pte2page>
c0106061:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0106064:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106067:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010606a:	75 0d                	jne    c0106079 <page_insert+0x6f>
            page_ref_dec(page);
c010606c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010606f:	89 04 24             	mov    %eax,(%esp)
c0106072:	e8 ca ef ff ff       	call   c0105041 <page_ref_dec>
c0106077:	eb 19                	jmp    c0106092 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0106079:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010607c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106080:	8b 45 10             	mov    0x10(%ebp),%eax
c0106083:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106087:	8b 45 08             	mov    0x8(%ebp),%eax
c010608a:	89 04 24             	mov    %eax,(%esp)
c010608d:	e8 8f fa ff ff       	call   c0105b21 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0106092:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106095:	89 04 24             	mov    %eax,(%esp)
c0106098:	e8 71 ee ff ff       	call   c0104f0e <page2pa>
c010609d:	0b 45 14             	or     0x14(%ebp),%eax
c01060a0:	89 c2                	mov    %eax,%edx
c01060a2:	83 ca 01             	or     $0x1,%edx
c01060a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060a8:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01060aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01060ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01060b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01060b4:	89 04 24             	mov    %eax,(%esp)
c01060b7:	e8 07 00 00 00       	call   c01060c3 <tlb_invalidate>
    return 0;
c01060bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01060c1:	c9                   	leave  
c01060c2:	c3                   	ret    

c01060c3 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01060c3:	55                   	push   %ebp
c01060c4:	89 e5                	mov    %esp,%ebp
c01060c6:	53                   	push   %ebx
c01060c7:	83 ec 24             	sub    $0x24,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01060ca:	0f 20 db             	mov    %cr3,%ebx
c01060cd:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr3;
c01060d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01060d3:	89 c2                	mov    %eax,%edx
c01060d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01060d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01060db:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01060e2:	77 23                	ja     c0106107 <tlb_invalidate+0x44>
c01060e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01060eb:	c7 44 24 08 60 e9 10 	movl   $0xc010e960,0x8(%esp)
c01060f2:	c0 
c01060f3:	c7 44 24 04 57 02 00 	movl   $0x257,0x4(%esp)
c01060fa:	00 
c01060fb:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106102:	e8 ed ac ff ff       	call   c0100df4 <__panic>
c0106107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010610a:	05 00 00 00 40       	add    $0x40000000,%eax
c010610f:	39 c2                	cmp    %eax,%edx
c0106111:	75 0c                	jne    c010611f <tlb_invalidate+0x5c>
        invlpg((void *)la);
c0106113:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106116:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0106119:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010611c:	0f 01 38             	invlpg (%eax)
    }
}
c010611f:	83 c4 24             	add    $0x24,%esp
c0106122:	5b                   	pop    %ebx
c0106123:	5d                   	pop    %ebp
c0106124:	c3                   	ret    

c0106125 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106125:	55                   	push   %ebp
c0106126:	89 e5                	mov    %esp,%ebp
c0106128:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c010612b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106132:	e8 e6 f0 ff ff       	call   c010521d <alloc_pages>
c0106137:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010613a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010613e:	0f 84 b0 00 00 00    	je     c01061f4 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106144:	8b 45 10             	mov    0x10(%ebp),%eax
c0106147:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010614b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010614e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106152:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106155:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106159:	8b 45 08             	mov    0x8(%ebp),%eax
c010615c:	89 04 24             	mov    %eax,(%esp)
c010615f:	e8 a6 fe ff ff       	call   c010600a <page_insert>
c0106164:	85 c0                	test   %eax,%eax
c0106166:	74 1a                	je     c0106182 <pgdir_alloc_page+0x5d>
            free_page(page);
c0106168:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010616f:	00 
c0106170:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106173:	89 04 24             	mov    %eax,(%esp)
c0106176:	e8 0d f1 ff ff       	call   c0105288 <free_pages>
            return NULL;
c010617b:	b8 00 00 00 00       	mov    $0x0,%eax
c0106180:	eb 75                	jmp    c01061f7 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0106182:	a1 2c 44 1c c0       	mov    0xc01c442c,%eax
c0106187:	85 c0                	test   %eax,%eax
c0106189:	74 69                	je     c01061f4 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c010618b:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c0106190:	85 c0                	test   %eax,%eax
c0106192:	74 60                	je     c01061f4 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106194:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c0106199:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061a0:	00 
c01061a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061a4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01061a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01061ab:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061af:	89 04 24             	mov    %eax,(%esp)
c01061b2:	e8 50 0e 00 00       	call   c0107007 <swap_map_swappable>
                page->pra_vaddr=la;
c01061b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061ba:	8b 55 0c             	mov    0xc(%ebp),%edx
c01061bd:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c01061c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061c3:	89 04 24             	mov    %eax,(%esp)
c01061c6:	e8 48 ee ff ff       	call   c0105013 <page_ref>
c01061cb:	83 f8 01             	cmp    $0x1,%eax
c01061ce:	74 24                	je     c01061f4 <pgdir_alloc_page+0xcf>
c01061d0:	c7 44 24 0c 45 ea 10 	movl   $0xc010ea45,0xc(%esp)
c01061d7:	c0 
c01061d8:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01061df:	c0 
c01061e0:	c7 44 24 04 6b 02 00 	movl   $0x26b,0x4(%esp)
c01061e7:	00 
c01061e8:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01061ef:	e8 00 ac ff ff       	call   c0100df4 <__panic>
            }
        }

    }

    return page;
c01061f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01061f7:	c9                   	leave  
c01061f8:	c3                   	ret    

c01061f9 <check_alloc_page>:

static void
check_alloc_page(void) {
c01061f9:	55                   	push   %ebp
c01061fa:	89 e5                	mov    %esp,%ebp
c01061fc:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01061ff:	a1 e8 64 1c c0       	mov    0xc01c64e8,%eax
c0106204:	8b 40 18             	mov    0x18(%eax),%eax
c0106207:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106209:	c7 04 24 5c ea 10 c0 	movl   $0xc010ea5c,(%esp)
c0106210:	e8 4e a1 ff ff       	call   c0100363 <cprintf>
}
c0106215:	c9                   	leave  
c0106216:	c3                   	ret    

c0106217 <check_pgdir>:

static void
check_pgdir(void) {
c0106217:	55                   	push   %ebp
c0106218:	89 e5                	mov    %esp,%ebp
c010621a:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010621d:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0106222:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106227:	76 24                	jbe    c010624d <check_pgdir+0x36>
c0106229:	c7 44 24 0c 7b ea 10 	movl   $0xc010ea7b,0xc(%esp)
c0106230:	c0 
c0106231:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106238:	c0 
c0106239:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c0106240:	00 
c0106241:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106248:	e8 a7 ab ff ff       	call   c0100df4 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010624d:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106252:	85 c0                	test   %eax,%eax
c0106254:	74 0e                	je     c0106264 <check_pgdir+0x4d>
c0106256:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010625b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106260:	85 c0                	test   %eax,%eax
c0106262:	74 24                	je     c0106288 <check_pgdir+0x71>
c0106264:	c7 44 24 0c 98 ea 10 	movl   $0xc010ea98,0xc(%esp)
c010626b:	c0 
c010626c:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106273:	c0 
c0106274:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010627b:	00 
c010627c:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106283:	e8 6c ab ff ff       	call   c0100df4 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106288:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010628d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106294:	00 
c0106295:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010629c:	00 
c010629d:	89 04 24             	mov    %eax,(%esp)
c01062a0:	e8 23 f8 ff ff       	call   c0105ac8 <get_page>
c01062a5:	85 c0                	test   %eax,%eax
c01062a7:	74 24                	je     c01062cd <check_pgdir+0xb6>
c01062a9:	c7 44 24 0c d0 ea 10 	movl   $0xc010ead0,0xc(%esp)
c01062b0:	c0 
c01062b1:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01062b8:	c0 
c01062b9:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c01062c0:	00 
c01062c1:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01062c8:	e8 27 ab ff ff       	call   c0100df4 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01062cd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01062d4:	e8 44 ef ff ff       	call   c010521d <alloc_pages>
c01062d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01062dc:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01062e1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01062e8:	00 
c01062e9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062f0:	00 
c01062f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01062f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01062f8:	89 04 24             	mov    %eax,(%esp)
c01062fb:	e8 0a fd ff ff       	call   c010600a <page_insert>
c0106300:	85 c0                	test   %eax,%eax
c0106302:	74 24                	je     c0106328 <check_pgdir+0x111>
c0106304:	c7 44 24 0c f8 ea 10 	movl   $0xc010eaf8,0xc(%esp)
c010630b:	c0 
c010630c:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106313:	c0 
c0106314:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c010631b:	00 
c010631c:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106323:	e8 cc aa ff ff       	call   c0100df4 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106328:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010632d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106334:	00 
c0106335:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010633c:	00 
c010633d:	89 04 24             	mov    %eax,(%esp)
c0106340:	e8 51 f6 ff ff       	call   c0105996 <get_pte>
c0106345:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106348:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010634c:	75 24                	jne    c0106372 <check_pgdir+0x15b>
c010634e:	c7 44 24 0c 24 eb 10 	movl   $0xc010eb24,0xc(%esp)
c0106355:	c0 
c0106356:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c010635d:	c0 
c010635e:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0106365:	00 
c0106366:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010636d:	e8 82 aa ff ff       	call   c0100df4 <__panic>
    assert(pa2page(*ptep) == p1);
c0106372:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106375:	8b 00                	mov    (%eax),%eax
c0106377:	89 04 24             	mov    %eax,(%esp)
c010637a:	e8 a5 eb ff ff       	call   c0104f24 <pa2page>
c010637f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106382:	74 24                	je     c01063a8 <check_pgdir+0x191>
c0106384:	c7 44 24 0c 51 eb 10 	movl   $0xc010eb51,0xc(%esp)
c010638b:	c0 
c010638c:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106393:	c0 
c0106394:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c010639b:	00 
c010639c:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01063a3:	e8 4c aa ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p1) == 1);
c01063a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063ab:	89 04 24             	mov    %eax,(%esp)
c01063ae:	e8 60 ec ff ff       	call   c0105013 <page_ref>
c01063b3:	83 f8 01             	cmp    $0x1,%eax
c01063b6:	74 24                	je     c01063dc <check_pgdir+0x1c5>
c01063b8:	c7 44 24 0c 66 eb 10 	movl   $0xc010eb66,0xc(%esp)
c01063bf:	c0 
c01063c0:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01063c7:	c0 
c01063c8:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01063cf:	00 
c01063d0:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01063d7:	e8 18 aa ff ff       	call   c0100df4 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01063dc:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01063e1:	8b 00                	mov    (%eax),%eax
c01063e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01063e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01063eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01063ee:	c1 e8 0c             	shr    $0xc,%eax
c01063f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01063f4:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c01063f9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01063fc:	72 23                	jb     c0106421 <check_pgdir+0x20a>
c01063fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106401:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106405:	c7 44 24 08 bc e8 10 	movl   $0xc010e8bc,0x8(%esp)
c010640c:	c0 
c010640d:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0106414:	00 
c0106415:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010641c:	e8 d3 a9 ff ff       	call   c0100df4 <__panic>
c0106421:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106424:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106429:	83 c0 04             	add    $0x4,%eax
c010642c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010642f:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106434:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010643b:	00 
c010643c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106443:	00 
c0106444:	89 04 24             	mov    %eax,(%esp)
c0106447:	e8 4a f5 ff ff       	call   c0105996 <get_pte>
c010644c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010644f:	74 24                	je     c0106475 <check_pgdir+0x25e>
c0106451:	c7 44 24 0c 78 eb 10 	movl   $0xc010eb78,0xc(%esp)
c0106458:	c0 
c0106459:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106460:	c0 
c0106461:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106468:	00 
c0106469:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106470:	e8 7f a9 ff ff       	call   c0100df4 <__panic>

    p2 = alloc_page();
c0106475:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010647c:	e8 9c ed ff ff       	call   c010521d <alloc_pages>
c0106481:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106484:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106489:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106490:	00 
c0106491:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106498:	00 
c0106499:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010649c:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064a0:	89 04 24             	mov    %eax,(%esp)
c01064a3:	e8 62 fb ff ff       	call   c010600a <page_insert>
c01064a8:	85 c0                	test   %eax,%eax
c01064aa:	74 24                	je     c01064d0 <check_pgdir+0x2b9>
c01064ac:	c7 44 24 0c a0 eb 10 	movl   $0xc010eba0,0xc(%esp)
c01064b3:	c0 
c01064b4:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01064bb:	c0 
c01064bc:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01064c3:	00 
c01064c4:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01064cb:	e8 24 a9 ff ff       	call   c0100df4 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01064d0:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01064d5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064dc:	00 
c01064dd:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01064e4:	00 
c01064e5:	89 04 24             	mov    %eax,(%esp)
c01064e8:	e8 a9 f4 ff ff       	call   c0105996 <get_pte>
c01064ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01064f4:	75 24                	jne    c010651a <check_pgdir+0x303>
c01064f6:	c7 44 24 0c d8 eb 10 	movl   $0xc010ebd8,0xc(%esp)
c01064fd:	c0 
c01064fe:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106505:	c0 
c0106506:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c010650d:	00 
c010650e:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106515:	e8 da a8 ff ff       	call   c0100df4 <__panic>
    assert(*ptep & PTE_U);
c010651a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010651d:	8b 00                	mov    (%eax),%eax
c010651f:	83 e0 04             	and    $0x4,%eax
c0106522:	85 c0                	test   %eax,%eax
c0106524:	75 24                	jne    c010654a <check_pgdir+0x333>
c0106526:	c7 44 24 0c 08 ec 10 	movl   $0xc010ec08,0xc(%esp)
c010652d:	c0 
c010652e:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106535:	c0 
c0106536:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010653d:	00 
c010653e:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106545:	e8 aa a8 ff ff       	call   c0100df4 <__panic>
    assert(*ptep & PTE_W);
c010654a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010654d:	8b 00                	mov    (%eax),%eax
c010654f:	83 e0 02             	and    $0x2,%eax
c0106552:	85 c0                	test   %eax,%eax
c0106554:	75 24                	jne    c010657a <check_pgdir+0x363>
c0106556:	c7 44 24 0c 16 ec 10 	movl   $0xc010ec16,0xc(%esp)
c010655d:	c0 
c010655e:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106565:	c0 
c0106566:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010656d:	00 
c010656e:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106575:	e8 7a a8 ff ff       	call   c0100df4 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010657a:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010657f:	8b 00                	mov    (%eax),%eax
c0106581:	83 e0 04             	and    $0x4,%eax
c0106584:	85 c0                	test   %eax,%eax
c0106586:	75 24                	jne    c01065ac <check_pgdir+0x395>
c0106588:	c7 44 24 0c 24 ec 10 	movl   $0xc010ec24,0xc(%esp)
c010658f:	c0 
c0106590:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106597:	c0 
c0106598:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c010659f:	00 
c01065a0:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01065a7:	e8 48 a8 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p2) == 1);
c01065ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065af:	89 04 24             	mov    %eax,(%esp)
c01065b2:	e8 5c ea ff ff       	call   c0105013 <page_ref>
c01065b7:	83 f8 01             	cmp    $0x1,%eax
c01065ba:	74 24                	je     c01065e0 <check_pgdir+0x3c9>
c01065bc:	c7 44 24 0c 3a ec 10 	movl   $0xc010ec3a,0xc(%esp)
c01065c3:	c0 
c01065c4:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01065cb:	c0 
c01065cc:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01065d3:	00 
c01065d4:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01065db:	e8 14 a8 ff ff       	call   c0100df4 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01065e0:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01065e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01065ec:	00 
c01065ed:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01065f4:	00 
c01065f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01065f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065fc:	89 04 24             	mov    %eax,(%esp)
c01065ff:	e8 06 fa ff ff       	call   c010600a <page_insert>
c0106604:	85 c0                	test   %eax,%eax
c0106606:	74 24                	je     c010662c <check_pgdir+0x415>
c0106608:	c7 44 24 0c 4c ec 10 	movl   $0xc010ec4c,0xc(%esp)
c010660f:	c0 
c0106610:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106617:	c0 
c0106618:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010661f:	00 
c0106620:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106627:	e8 c8 a7 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p1) == 2);
c010662c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010662f:	89 04 24             	mov    %eax,(%esp)
c0106632:	e8 dc e9 ff ff       	call   c0105013 <page_ref>
c0106637:	83 f8 02             	cmp    $0x2,%eax
c010663a:	74 24                	je     c0106660 <check_pgdir+0x449>
c010663c:	c7 44 24 0c 78 ec 10 	movl   $0xc010ec78,0xc(%esp)
c0106643:	c0 
c0106644:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c010664b:	c0 
c010664c:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c0106653:	00 
c0106654:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010665b:	e8 94 a7 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p2) == 0);
c0106660:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106663:	89 04 24             	mov    %eax,(%esp)
c0106666:	e8 a8 e9 ff ff       	call   c0105013 <page_ref>
c010666b:	85 c0                	test   %eax,%eax
c010666d:	74 24                	je     c0106693 <check_pgdir+0x47c>
c010666f:	c7 44 24 0c 8a ec 10 	movl   $0xc010ec8a,0xc(%esp)
c0106676:	c0 
c0106677:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c010667e:	c0 
c010667f:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0106686:	00 
c0106687:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010668e:	e8 61 a7 ff ff       	call   c0100df4 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106693:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106698:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010669f:	00 
c01066a0:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066a7:	00 
c01066a8:	89 04 24             	mov    %eax,(%esp)
c01066ab:	e8 e6 f2 ff ff       	call   c0105996 <get_pte>
c01066b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01066b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01066b7:	75 24                	jne    c01066dd <check_pgdir+0x4c6>
c01066b9:	c7 44 24 0c d8 eb 10 	movl   $0xc010ebd8,0xc(%esp)
c01066c0:	c0 
c01066c1:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01066c8:	c0 
c01066c9:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01066d0:	00 
c01066d1:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01066d8:	e8 17 a7 ff ff       	call   c0100df4 <__panic>
    assert(pa2page(*ptep) == p1);
c01066dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066e0:	8b 00                	mov    (%eax),%eax
c01066e2:	89 04 24             	mov    %eax,(%esp)
c01066e5:	e8 3a e8 ff ff       	call   c0104f24 <pa2page>
c01066ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01066ed:	74 24                	je     c0106713 <check_pgdir+0x4fc>
c01066ef:	c7 44 24 0c 51 eb 10 	movl   $0xc010eb51,0xc(%esp)
c01066f6:	c0 
c01066f7:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01066fe:	c0 
c01066ff:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0106706:	00 
c0106707:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010670e:	e8 e1 a6 ff ff       	call   c0100df4 <__panic>
    assert((*ptep & PTE_U) == 0);
c0106713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106716:	8b 00                	mov    (%eax),%eax
c0106718:	83 e0 04             	and    $0x4,%eax
c010671b:	85 c0                	test   %eax,%eax
c010671d:	74 24                	je     c0106743 <check_pgdir+0x52c>
c010671f:	c7 44 24 0c 9c ec 10 	movl   $0xc010ec9c,0xc(%esp)
c0106726:	c0 
c0106727:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c010672e:	c0 
c010672f:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106736:	00 
c0106737:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010673e:	e8 b1 a6 ff ff       	call   c0100df4 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106743:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106748:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010674f:	00 
c0106750:	89 04 24             	mov    %eax,(%esp)
c0106753:	e8 6e f8 ff ff       	call   c0105fc6 <page_remove>
    assert(page_ref(p1) == 1);
c0106758:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010675b:	89 04 24             	mov    %eax,(%esp)
c010675e:	e8 b0 e8 ff ff       	call   c0105013 <page_ref>
c0106763:	83 f8 01             	cmp    $0x1,%eax
c0106766:	74 24                	je     c010678c <check_pgdir+0x575>
c0106768:	c7 44 24 0c 66 eb 10 	movl   $0xc010eb66,0xc(%esp)
c010676f:	c0 
c0106770:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106777:	c0 
c0106778:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c010677f:	00 
c0106780:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106787:	e8 68 a6 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p2) == 0);
c010678c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010678f:	89 04 24             	mov    %eax,(%esp)
c0106792:	e8 7c e8 ff ff       	call   c0105013 <page_ref>
c0106797:	85 c0                	test   %eax,%eax
c0106799:	74 24                	je     c01067bf <check_pgdir+0x5a8>
c010679b:	c7 44 24 0c 8a ec 10 	movl   $0xc010ec8a,0xc(%esp)
c01067a2:	c0 
c01067a3:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01067aa:	c0 
c01067ab:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01067b2:	00 
c01067b3:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01067ba:	e8 35 a6 ff ff       	call   c0100df4 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01067bf:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01067c4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01067cb:	00 
c01067cc:	89 04 24             	mov    %eax,(%esp)
c01067cf:	e8 f2 f7 ff ff       	call   c0105fc6 <page_remove>
    assert(page_ref(p1) == 0);
c01067d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067d7:	89 04 24             	mov    %eax,(%esp)
c01067da:	e8 34 e8 ff ff       	call   c0105013 <page_ref>
c01067df:	85 c0                	test   %eax,%eax
c01067e1:	74 24                	je     c0106807 <check_pgdir+0x5f0>
c01067e3:	c7 44 24 0c b1 ec 10 	movl   $0xc010ecb1,0xc(%esp)
c01067ea:	c0 
c01067eb:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c01067f2:	c0 
c01067f3:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c01067fa:	00 
c01067fb:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106802:	e8 ed a5 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p2) == 0);
c0106807:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010680a:	89 04 24             	mov    %eax,(%esp)
c010680d:	e8 01 e8 ff ff       	call   c0105013 <page_ref>
c0106812:	85 c0                	test   %eax,%eax
c0106814:	74 24                	je     c010683a <check_pgdir+0x623>
c0106816:	c7 44 24 0c 8a ec 10 	movl   $0xc010ec8a,0xc(%esp)
c010681d:	c0 
c010681e:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106825:	c0 
c0106826:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c010682d:	00 
c010682e:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106835:	e8 ba a5 ff ff       	call   c0100df4 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c010683a:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010683f:	8b 00                	mov    (%eax),%eax
c0106841:	89 04 24             	mov    %eax,(%esp)
c0106844:	e8 db e6 ff ff       	call   c0104f24 <pa2page>
c0106849:	89 04 24             	mov    %eax,(%esp)
c010684c:	e8 c2 e7 ff ff       	call   c0105013 <page_ref>
c0106851:	83 f8 01             	cmp    $0x1,%eax
c0106854:	74 24                	je     c010687a <check_pgdir+0x663>
c0106856:	c7 44 24 0c c4 ec 10 	movl   $0xc010ecc4,0xc(%esp)
c010685d:	c0 
c010685e:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106865:	c0 
c0106866:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
c010686d:	00 
c010686e:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106875:	e8 7a a5 ff ff       	call   c0100df4 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c010687a:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010687f:	8b 00                	mov    (%eax),%eax
c0106881:	89 04 24             	mov    %eax,(%esp)
c0106884:	e8 9b e6 ff ff       	call   c0104f24 <pa2page>
c0106889:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106890:	00 
c0106891:	89 04 24             	mov    %eax,(%esp)
c0106894:	e8 ef e9 ff ff       	call   c0105288 <free_pages>
    boot_pgdir[0] = 0;
c0106899:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010689e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01068a4:	c7 04 24 ea ec 10 c0 	movl   $0xc010ecea,(%esp)
c01068ab:	e8 b3 9a ff ff       	call   c0100363 <cprintf>
}
c01068b0:	c9                   	leave  
c01068b1:	c3                   	ret    

c01068b2 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01068b2:	55                   	push   %ebp
c01068b3:	89 e5                	mov    %esp,%ebp
c01068b5:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01068b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01068bf:	e9 cb 00 00 00       	jmp    c010698f <check_boot_pgdir+0xdd>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01068c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01068ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068cd:	c1 e8 0c             	shr    $0xc,%eax
c01068d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068d3:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c01068d8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01068db:	72 23                	jb     c0106900 <check_boot_pgdir+0x4e>
c01068dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068e0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068e4:	c7 44 24 08 bc e8 10 	movl   $0xc010e8bc,0x8(%esp)
c01068eb:	c0 
c01068ec:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c01068f3:	00 
c01068f4:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01068fb:	e8 f4 a4 ff ff       	call   c0100df4 <__panic>
c0106900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106903:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106908:	89 c2                	mov    %eax,%edx
c010690a:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010690f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106916:	00 
c0106917:	89 54 24 04          	mov    %edx,0x4(%esp)
c010691b:	89 04 24             	mov    %eax,(%esp)
c010691e:	e8 73 f0 ff ff       	call   c0105996 <get_pte>
c0106923:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106926:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010692a:	75 24                	jne    c0106950 <check_boot_pgdir+0x9e>
c010692c:	c7 44 24 0c 04 ed 10 	movl   $0xc010ed04,0xc(%esp)
c0106933:	c0 
c0106934:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c010693b:	c0 
c010693c:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c0106943:	00 
c0106944:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010694b:	e8 a4 a4 ff ff       	call   c0100df4 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106950:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106953:	8b 00                	mov    (%eax),%eax
c0106955:	89 c2                	mov    %eax,%edx
c0106957:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010695d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106960:	39 c2                	cmp    %eax,%edx
c0106962:	74 24                	je     c0106988 <check_boot_pgdir+0xd6>
c0106964:	c7 44 24 0c 41 ed 10 	movl   $0xc010ed41,0xc(%esp)
c010696b:	c0 
c010696c:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106973:	c0 
c0106974:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c010697b:	00 
c010697c:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106983:	e8 6c a4 ff ff       	call   c0100df4 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106988:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010698f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106992:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0106997:	39 c2                	cmp    %eax,%edx
c0106999:	0f 82 25 ff ff ff    	jb     c01068c4 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010699f:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01069a4:	05 ac 0f 00 00       	add    $0xfac,%eax
c01069a9:	8b 00                	mov    (%eax),%eax
c01069ab:	89 c2                	mov    %eax,%edx
c01069ad:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c01069b3:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c01069b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01069bb:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01069c2:	77 23                	ja     c01069e7 <check_boot_pgdir+0x135>
c01069c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01069cb:	c7 44 24 08 60 e9 10 	movl   $0xc010e960,0x8(%esp)
c01069d2:	c0 
c01069d3:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c01069da:	00 
c01069db:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c01069e2:	e8 0d a4 ff ff       	call   c0100df4 <__panic>
c01069e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069ea:	05 00 00 00 40       	add    $0x40000000,%eax
c01069ef:	39 c2                	cmp    %eax,%edx
c01069f1:	74 24                	je     c0106a17 <check_boot_pgdir+0x165>
c01069f3:	c7 44 24 0c 58 ed 10 	movl   $0xc010ed58,0xc(%esp)
c01069fa:	c0 
c01069fb:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106a02:	c0 
c0106a03:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c0106a0a:	00 
c0106a0b:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106a12:	e8 dd a3 ff ff       	call   c0100df4 <__panic>

    assert(boot_pgdir[0] == 0);
c0106a17:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106a1c:	8b 00                	mov    (%eax),%eax
c0106a1e:	85 c0                	test   %eax,%eax
c0106a20:	74 24                	je     c0106a46 <check_boot_pgdir+0x194>
c0106a22:	c7 44 24 0c 8c ed 10 	movl   $0xc010ed8c,0xc(%esp)
c0106a29:	c0 
c0106a2a:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106a31:	c0 
c0106a32:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c0106a39:	00 
c0106a3a:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106a41:	e8 ae a3 ff ff       	call   c0100df4 <__panic>

    struct Page *p;
    p = alloc_page();
c0106a46:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106a4d:	e8 cb e7 ff ff       	call   c010521d <alloc_pages>
c0106a52:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106a55:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106a5a:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106a61:	00 
c0106a62:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106a69:	00 
c0106a6a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a6d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a71:	89 04 24             	mov    %eax,(%esp)
c0106a74:	e8 91 f5 ff ff       	call   c010600a <page_insert>
c0106a79:	85 c0                	test   %eax,%eax
c0106a7b:	74 24                	je     c0106aa1 <check_boot_pgdir+0x1ef>
c0106a7d:	c7 44 24 0c a0 ed 10 	movl   $0xc010eda0,0xc(%esp)
c0106a84:	c0 
c0106a85:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106a8c:	c0 
c0106a8d:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c0106a94:	00 
c0106a95:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106a9c:	e8 53 a3 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p) == 1);
c0106aa1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aa4:	89 04 24             	mov    %eax,(%esp)
c0106aa7:	e8 67 e5 ff ff       	call   c0105013 <page_ref>
c0106aac:	83 f8 01             	cmp    $0x1,%eax
c0106aaf:	74 24                	je     c0106ad5 <check_boot_pgdir+0x223>
c0106ab1:	c7 44 24 0c ce ed 10 	movl   $0xc010edce,0xc(%esp)
c0106ab8:	c0 
c0106ab9:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106ac0:	c0 
c0106ac1:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c0106ac8:	00 
c0106ac9:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106ad0:	e8 1f a3 ff ff       	call   c0100df4 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106ad5:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106ada:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106ae1:	00 
c0106ae2:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106ae9:	00 
c0106aea:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106aed:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106af1:	89 04 24             	mov    %eax,(%esp)
c0106af4:	e8 11 f5 ff ff       	call   c010600a <page_insert>
c0106af9:	85 c0                	test   %eax,%eax
c0106afb:	74 24                	je     c0106b21 <check_boot_pgdir+0x26f>
c0106afd:	c7 44 24 0c e0 ed 10 	movl   $0xc010ede0,0xc(%esp)
c0106b04:	c0 
c0106b05:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106b0c:	c0 
c0106b0d:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0106b14:	00 
c0106b15:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106b1c:	e8 d3 a2 ff ff       	call   c0100df4 <__panic>
    assert(page_ref(p) == 2);
c0106b21:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b24:	89 04 24             	mov    %eax,(%esp)
c0106b27:	e8 e7 e4 ff ff       	call   c0105013 <page_ref>
c0106b2c:	83 f8 02             	cmp    $0x2,%eax
c0106b2f:	74 24                	je     c0106b55 <check_boot_pgdir+0x2a3>
c0106b31:	c7 44 24 0c 17 ee 10 	movl   $0xc010ee17,0xc(%esp)
c0106b38:	c0 
c0106b39:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106b40:	c0 
c0106b41:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0106b48:	00 
c0106b49:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106b50:	e8 9f a2 ff ff       	call   c0100df4 <__panic>

    const char *str = "ucore: Hello world!!";
c0106b55:	c7 45 dc 28 ee 10 c0 	movl   $0xc010ee28,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106b5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b5f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106b63:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106b6a:	e8 b7 6a 00 00       	call   c010d626 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106b6f:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106b76:	00 
c0106b77:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106b7e:	e8 20 6b 00 00       	call   c010d6a3 <strcmp>
c0106b83:	85 c0                	test   %eax,%eax
c0106b85:	74 24                	je     c0106bab <check_boot_pgdir+0x2f9>
c0106b87:	c7 44 24 0c 40 ee 10 	movl   $0xc010ee40,0xc(%esp)
c0106b8e:	c0 
c0106b8f:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106b96:	c0 
c0106b97:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c0106b9e:	00 
c0106b9f:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106ba6:	e8 49 a2 ff ff       	call   c0100df4 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106bab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106bae:	89 04 24             	mov    %eax,(%esp)
c0106bb1:	e8 b3 e3 ff ff       	call   c0104f69 <page2kva>
c0106bb6:	05 00 01 00 00       	add    $0x100,%eax
c0106bbb:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106bbe:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106bc5:	e8 fe 69 00 00       	call   c010d5c8 <strlen>
c0106bca:	85 c0                	test   %eax,%eax
c0106bcc:	74 24                	je     c0106bf2 <check_boot_pgdir+0x340>
c0106bce:	c7 44 24 0c 78 ee 10 	movl   $0xc010ee78,0xc(%esp)
c0106bd5:	c0 
c0106bd6:	c7 44 24 08 a9 e9 10 	movl   $0xc010e9a9,0x8(%esp)
c0106bdd:	c0 
c0106bde:	c7 44 24 04 ca 02 00 	movl   $0x2ca,0x4(%esp)
c0106be5:	00 
c0106be6:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c0106bed:	e8 02 a2 ff ff       	call   c0100df4 <__panic>

    free_page(p);
c0106bf2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106bf9:	00 
c0106bfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106bfd:	89 04 24             	mov    %eax,(%esp)
c0106c00:	e8 83 e6 ff ff       	call   c0105288 <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106c05:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106c0a:	8b 00                	mov    (%eax),%eax
c0106c0c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106c11:	89 04 24             	mov    %eax,(%esp)
c0106c14:	e8 0b e3 ff ff       	call   c0104f24 <pa2page>
c0106c19:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106c20:	00 
c0106c21:	89 04 24             	mov    %eax,(%esp)
c0106c24:	e8 5f e6 ff ff       	call   c0105288 <free_pages>
    boot_pgdir[0] = 0;
c0106c29:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c0106c2e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106c34:	c7 04 24 9c ee 10 c0 	movl   $0xc010ee9c,(%esp)
c0106c3b:	e8 23 97 ff ff       	call   c0100363 <cprintf>
}
c0106c40:	c9                   	leave  
c0106c41:	c3                   	ret    

c0106c42 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106c42:	55                   	push   %ebp
c0106c43:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106c45:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c48:	83 e0 04             	and    $0x4,%eax
c0106c4b:	85 c0                	test   %eax,%eax
c0106c4d:	74 07                	je     c0106c56 <perm2str+0x14>
c0106c4f:	b8 75 00 00 00       	mov    $0x75,%eax
c0106c54:	eb 05                	jmp    c0106c5b <perm2str+0x19>
c0106c56:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106c5b:	a2 28 44 1c c0       	mov    %al,0xc01c4428
    str[1] = 'r';
c0106c60:	c6 05 29 44 1c c0 72 	movb   $0x72,0xc01c4429
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c6a:	83 e0 02             	and    $0x2,%eax
c0106c6d:	85 c0                	test   %eax,%eax
c0106c6f:	74 07                	je     c0106c78 <perm2str+0x36>
c0106c71:	b8 77 00 00 00       	mov    $0x77,%eax
c0106c76:	eb 05                	jmp    c0106c7d <perm2str+0x3b>
c0106c78:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106c7d:	a2 2a 44 1c c0       	mov    %al,0xc01c442a
    str[3] = '\0';
c0106c82:	c6 05 2b 44 1c c0 00 	movb   $0x0,0xc01c442b
    return str;
c0106c89:	b8 28 44 1c c0       	mov    $0xc01c4428,%eax
}
c0106c8e:	5d                   	pop    %ebp
c0106c8f:	c3                   	ret    

c0106c90 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106c90:	55                   	push   %ebp
c0106c91:	89 e5                	mov    %esp,%ebp
c0106c93:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106c96:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c99:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c9c:	72 0e                	jb     c0106cac <get_pgtable_items+0x1c>
        return 0;
c0106c9e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ca3:	e9 98 00 00 00       	jmp    c0106d40 <get_pgtable_items+0xb0>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106ca8:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106cac:	8b 45 10             	mov    0x10(%ebp),%eax
c0106caf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106cb2:	73 18                	jae    c0106ccc <get_pgtable_items+0x3c>
c0106cb4:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cb7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106cbe:	8b 45 14             	mov    0x14(%ebp),%eax
c0106cc1:	01 d0                	add    %edx,%eax
c0106cc3:	8b 00                	mov    (%eax),%eax
c0106cc5:	83 e0 01             	and    $0x1,%eax
c0106cc8:	85 c0                	test   %eax,%eax
c0106cca:	74 dc                	je     c0106ca8 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0106ccc:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ccf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106cd2:	73 67                	jae    c0106d3b <get_pgtable_items+0xab>
        if (left_store != NULL) {
c0106cd4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106cd8:	74 08                	je     c0106ce2 <get_pgtable_items+0x52>
            *left_store = start;
c0106cda:	8b 45 18             	mov    0x18(%ebp),%eax
c0106cdd:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ce0:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106ce2:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ce5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106cec:	8b 45 14             	mov    0x14(%ebp),%eax
c0106cef:	01 d0                	add    %edx,%eax
c0106cf1:	8b 00                	mov    (%eax),%eax
c0106cf3:	83 e0 07             	and    $0x7,%eax
c0106cf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106cf9:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106cfd:	eb 04                	jmp    c0106d03 <get_pgtable_items+0x73>
            start ++;
c0106cff:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106d03:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d06:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d09:	73 1d                	jae    c0106d28 <get_pgtable_items+0x98>
c0106d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106d15:	8b 45 14             	mov    0x14(%ebp),%eax
c0106d18:	01 d0                	add    %edx,%eax
c0106d1a:	8b 00                	mov    (%eax),%eax
c0106d1c:	89 c2                	mov    %eax,%edx
c0106d1e:	83 e2 07             	and    $0x7,%edx
c0106d21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d24:	39 c2                	cmp    %eax,%edx
c0106d26:	74 d7                	je     c0106cff <get_pgtable_items+0x6f>
            start ++;
        }
        if (right_store != NULL) {
c0106d28:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106d2c:	74 08                	je     c0106d36 <get_pgtable_items+0xa6>
            *right_store = start;
c0106d2e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106d31:	8b 55 10             	mov    0x10(%ebp),%edx
c0106d34:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106d36:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d39:	eb 05                	jmp    c0106d40 <get_pgtable_items+0xb0>
    }
    return 0;
c0106d3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106d40:	c9                   	leave  
c0106d41:	c3                   	ret    

c0106d42 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106d42:	55                   	push   %ebp
c0106d43:	89 e5                	mov    %esp,%ebp
c0106d45:	57                   	push   %edi
c0106d46:	56                   	push   %esi
c0106d47:	53                   	push   %ebx
c0106d48:	83 ec 5c             	sub    $0x5c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106d4b:	c7 04 24 bc ee 10 c0 	movl   $0xc010eebc,(%esp)
c0106d52:	e8 0c 96 ff ff       	call   c0100363 <cprintf>
    size_t left, right = 0, perm;
c0106d57:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d5e:	e9 0b 01 00 00       	jmp    c0106e6e <print_pgdir+0x12c>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106d63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d66:	89 04 24             	mov    %eax,(%esp)
c0106d69:	e8 d4 fe ff ff       	call   c0106c42 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106d6e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d71:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d74:	89 cb                	mov    %ecx,%ebx
c0106d76:	29 d3                	sub    %edx,%ebx
c0106d78:	89 da                	mov    %ebx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106d7a:	89 d6                	mov    %edx,%esi
c0106d7c:	c1 e6 16             	shl    $0x16,%esi
c0106d7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106d82:	89 d3                	mov    %edx,%ebx
c0106d84:	c1 e3 16             	shl    $0x16,%ebx
c0106d87:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d8a:	89 d1                	mov    %edx,%ecx
c0106d8c:	c1 e1 16             	shl    $0x16,%ecx
c0106d8f:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106d92:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106d95:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d98:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106d9b:	29 d7                	sub    %edx,%edi
c0106d9d:	89 fa                	mov    %edi,%edx
c0106d9f:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106da3:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106da7:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106dab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106daf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106db3:	c7 04 24 ed ee 10 c0 	movl   $0xc010eeed,(%esp)
c0106dba:	e8 a4 95 ff ff       	call   c0100363 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106dbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106dc2:	c1 e0 0a             	shl    $0xa,%eax
c0106dc5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106dc8:	eb 5c                	jmp    c0106e26 <print_pgdir+0xe4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106dca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dcd:	89 04 24             	mov    %eax,(%esp)
c0106dd0:	e8 6d fe ff ff       	call   c0106c42 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106dd5:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106dd8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106ddb:	89 cb                	mov    %ecx,%ebx
c0106ddd:	29 d3                	sub    %edx,%ebx
c0106ddf:	89 da                	mov    %ebx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106de1:	89 d6                	mov    %edx,%esi
c0106de3:	c1 e6 0c             	shl    $0xc,%esi
c0106de6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106de9:	89 d3                	mov    %edx,%ebx
c0106deb:	c1 e3 0c             	shl    $0xc,%ebx
c0106dee:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106df1:	89 d1                	mov    %edx,%ecx
c0106df3:	c1 e1 0c             	shl    $0xc,%ecx
c0106df6:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106df9:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106dfc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106dff:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106e02:	29 d7                	sub    %edx,%edi
c0106e04:	89 fa                	mov    %edi,%edx
c0106e06:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106e0a:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106e0e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106e12:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106e16:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e1a:	c7 04 24 0c ef 10 c0 	movl   $0xc010ef0c,(%esp)
c0106e21:	e8 3d 95 ff ff       	call   c0100363 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106e26:	8b 15 04 e9 10 c0    	mov    0xc010e904,%edx
c0106e2c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106e2f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106e32:	89 ce                	mov    %ecx,%esi
c0106e34:	c1 e6 0a             	shl    $0xa,%esi
c0106e37:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106e3a:	89 cb                	mov    %ecx,%ebx
c0106e3c:	c1 e3 0a             	shl    $0xa,%ebx
c0106e3f:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106e42:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106e46:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106e49:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106e4d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106e55:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106e59:	89 1c 24             	mov    %ebx,(%esp)
c0106e5c:	e8 2f fe ff ff       	call   c0106c90 <get_pgtable_items>
c0106e61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106e64:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106e68:	0f 85 5c ff ff ff    	jne    c0106dca <print_pgdir+0x88>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106e6e:	8b 15 08 e9 10 c0    	mov    0xc010e908,%edx
c0106e74:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106e77:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106e7a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106e7e:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106e81:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106e85:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e89:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106e8d:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106e94:	00 
c0106e95:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106e9c:	e8 ef fd ff ff       	call   c0106c90 <get_pgtable_items>
c0106ea1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106ea4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106ea8:	0f 85 b5 fe ff ff    	jne    c0106d63 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106eae:	c7 04 24 30 ef 10 c0 	movl   $0xc010ef30,(%esp)
c0106eb5:	e8 a9 94 ff ff       	call   c0100363 <cprintf>
}
c0106eba:	83 c4 5c             	add    $0x5c,%esp
c0106ebd:	5b                   	pop    %ebx
c0106ebe:	5e                   	pop    %esi
c0106ebf:	5f                   	pop    %edi
c0106ec0:	5d                   	pop    %ebp
c0106ec1:	c3                   	ret    
c0106ec2:	66 90                	xchg   %ax,%ax

c0106ec4 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106ec4:	55                   	push   %ebp
c0106ec5:	89 e5                	mov    %esp,%ebp
c0106ec7:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106eca:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ecd:	89 c2                	mov    %eax,%edx
c0106ecf:	c1 ea 0c             	shr    $0xc,%edx
c0106ed2:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0106ed7:	39 c2                	cmp    %eax,%edx
c0106ed9:	72 1c                	jb     c0106ef7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106edb:	c7 44 24 08 64 ef 10 	movl   $0xc010ef64,0x8(%esp)
c0106ee2:	c0 
c0106ee3:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106eea:	00 
c0106eeb:	c7 04 24 83 ef 10 c0 	movl   $0xc010ef83,(%esp)
c0106ef2:	e8 fd 9e ff ff       	call   c0100df4 <__panic>
    }
    return &pages[PPN(pa)];
c0106ef7:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c0106efc:	8b 55 08             	mov    0x8(%ebp),%edx
c0106eff:	c1 ea 0c             	shr    $0xc,%edx
c0106f02:	c1 e2 05             	shl    $0x5,%edx
c0106f05:	01 d0                	add    %edx,%eax
}
c0106f07:	c9                   	leave  
c0106f08:	c3                   	ret    

c0106f09 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106f09:	55                   	push   %ebp
c0106f0a:	89 e5                	mov    %esp,%ebp
c0106f0c:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106f0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f12:	83 e0 01             	and    $0x1,%eax
c0106f15:	85 c0                	test   %eax,%eax
c0106f17:	75 1c                	jne    c0106f35 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106f19:	c7 44 24 08 94 ef 10 	movl   $0xc010ef94,0x8(%esp)
c0106f20:	c0 
c0106f21:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106f28:	00 
c0106f29:	c7 04 24 83 ef 10 c0 	movl   $0xc010ef83,(%esp)
c0106f30:	e8 bf 9e ff ff       	call   c0100df4 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f3d:	89 04 24             	mov    %eax,(%esp)
c0106f40:	e8 7f ff ff ff       	call   c0106ec4 <pa2page>
}
c0106f45:	c9                   	leave  
c0106f46:	c3                   	ret    

c0106f47 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106f47:	55                   	push   %ebp
c0106f48:	89 e5                	mov    %esp,%ebp
c0106f4a:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106f4d:	e8 e6 34 00 00       	call   c010a438 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106f52:	a1 9c 65 1c c0       	mov    0xc01c659c,%eax
c0106f57:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106f5c:	76 0c                	jbe    c0106f6a <swap_init+0x23>
c0106f5e:	a1 9c 65 1c c0       	mov    0xc01c659c,%eax
c0106f63:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106f68:	76 25                	jbe    c0106f8f <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106f6a:	a1 9c 65 1c c0       	mov    0xc01c659c,%eax
c0106f6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f73:	c7 44 24 08 b5 ef 10 	movl   $0xc010efb5,0x8(%esp)
c0106f7a:	c0 
c0106f7b:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106f82:	00 
c0106f83:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0106f8a:	e8 65 9e ff ff       	call   c0100df4 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106f8f:	c7 05 34 44 1c c0 60 	movl   $0xc0132a60,0xc01c4434
c0106f96:	2a 13 c0 
     int r = sm->init();
c0106f99:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0106f9e:	8b 40 04             	mov    0x4(%eax),%eax
c0106fa1:	ff d0                	call   *%eax
c0106fa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106fa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106faa:	75 26                	jne    c0106fd2 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106fac:	c7 05 2c 44 1c c0 01 	movl   $0x1,0xc01c442c
c0106fb3:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106fb6:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0106fbb:	8b 00                	mov    (%eax),%eax
c0106fbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fc1:	c7 04 24 df ef 10 c0 	movl   $0xc010efdf,(%esp)
c0106fc8:	e8 96 93 ff ff       	call   c0100363 <cprintf>
          check_swap();
c0106fcd:	e8 a4 04 00 00       	call   c0107476 <check_swap>
     }

     return r;
c0106fd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106fd5:	c9                   	leave  
c0106fd6:	c3                   	ret    

c0106fd7 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106fd7:	55                   	push   %ebp
c0106fd8:	89 e5                	mov    %esp,%ebp
c0106fda:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106fdd:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0106fe2:	8b 40 08             	mov    0x8(%eax),%eax
c0106fe5:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fe8:	89 14 24             	mov    %edx,(%esp)
c0106feb:	ff d0                	call   *%eax
}
c0106fed:	c9                   	leave  
c0106fee:	c3                   	ret    

c0106fef <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106fef:	55                   	push   %ebp
c0106ff0:	89 e5                	mov    %esp,%ebp
c0106ff2:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106ff5:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0106ffa:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ffd:	8b 55 08             	mov    0x8(%ebp),%edx
c0107000:	89 14 24             	mov    %edx,(%esp)
c0107003:	ff d0                	call   *%eax
}
c0107005:	c9                   	leave  
c0107006:	c3                   	ret    

c0107007 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107007:	55                   	push   %ebp
c0107008:	89 e5                	mov    %esp,%ebp
c010700a:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c010700d:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0107012:	8b 40 10             	mov    0x10(%eax),%eax
c0107015:	8b 55 14             	mov    0x14(%ebp),%edx
c0107018:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010701c:	8b 55 10             	mov    0x10(%ebp),%edx
c010701f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107023:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107026:	89 54 24 04          	mov    %edx,0x4(%esp)
c010702a:	8b 55 08             	mov    0x8(%ebp),%edx
c010702d:	89 14 24             	mov    %edx,(%esp)
c0107030:	ff d0                	call   *%eax
}
c0107032:	c9                   	leave  
c0107033:	c3                   	ret    

c0107034 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107034:	55                   	push   %ebp
c0107035:	89 e5                	mov    %esp,%ebp
c0107037:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c010703a:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c010703f:	8b 40 14             	mov    0x14(%eax),%eax
c0107042:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107045:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107049:	8b 55 08             	mov    0x8(%ebp),%edx
c010704c:	89 14 24             	mov    %edx,(%esp)
c010704f:	ff d0                	call   *%eax
}
c0107051:	c9                   	leave  
c0107052:	c3                   	ret    

c0107053 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0107053:	55                   	push   %ebp
c0107054:	89 e5                	mov    %esp,%ebp
c0107056:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0107059:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107060:	e9 5a 01 00 00       	jmp    c01071bf <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0107065:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c010706a:	8b 40 18             	mov    0x18(%eax),%eax
c010706d:	8b 55 10             	mov    0x10(%ebp),%edx
c0107070:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107074:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0107077:	89 54 24 04          	mov    %edx,0x4(%esp)
c010707b:	8b 55 08             	mov    0x8(%ebp),%edx
c010707e:	89 14 24             	mov    %edx,(%esp)
c0107081:	ff d0                	call   *%eax
c0107083:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0107086:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010708a:	74 18                	je     c01070a4 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c010708c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010708f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107093:	c7 04 24 f4 ef 10 c0 	movl   $0xc010eff4,(%esp)
c010709a:	e8 c4 92 ff ff       	call   c0100363 <cprintf>
c010709f:	e9 27 01 00 00       	jmp    c01071cb <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01070a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070a7:	8b 40 1c             	mov    0x1c(%eax),%eax
c01070aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01070ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01070b0:	8b 40 0c             	mov    0xc(%eax),%eax
c01070b3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01070ba:	00 
c01070bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01070be:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070c2:	89 04 24             	mov    %eax,(%esp)
c01070c5:	e8 cc e8 ff ff       	call   c0105996 <get_pte>
c01070ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01070cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070d0:	8b 00                	mov    (%eax),%eax
c01070d2:	83 e0 01             	and    $0x1,%eax
c01070d5:	85 c0                	test   %eax,%eax
c01070d7:	75 24                	jne    c01070fd <swap_out+0xaa>
c01070d9:	c7 44 24 0c 21 f0 10 	movl   $0xc010f021,0xc(%esp)
c01070e0:	c0 
c01070e1:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01070e8:	c0 
c01070e9:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01070f0:	00 
c01070f1:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01070f8:	e8 f7 9c ff ff       	call   c0100df4 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01070fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107100:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107103:	8b 52 1c             	mov    0x1c(%edx),%edx
c0107106:	c1 ea 0c             	shr    $0xc,%edx
c0107109:	83 c2 01             	add    $0x1,%edx
c010710c:	c1 e2 08             	shl    $0x8,%edx
c010710f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107113:	89 14 24             	mov    %edx,(%esp)
c0107116:	e8 d7 33 00 00       	call   c010a4f2 <swapfs_write>
c010711b:	85 c0                	test   %eax,%eax
c010711d:	74 34                	je     c0107153 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c010711f:	c7 04 24 4b f0 10 c0 	movl   $0xc010f04b,(%esp)
c0107126:	e8 38 92 ff ff       	call   c0100363 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c010712b:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0107130:	8b 40 10             	mov    0x10(%eax),%eax
c0107133:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107136:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010713d:	00 
c010713e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107142:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107145:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107149:	8b 55 08             	mov    0x8(%ebp),%edx
c010714c:	89 14 24             	mov    %edx,(%esp)
c010714f:	ff d0                	call   *%eax
c0107151:	eb 68                	jmp    c01071bb <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0107153:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107156:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107159:	c1 e8 0c             	shr    $0xc,%eax
c010715c:	83 c0 01             	add    $0x1,%eax
c010715f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107163:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107166:	89 44 24 08          	mov    %eax,0x8(%esp)
c010716a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010716d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107171:	c7 04 24 64 f0 10 c0 	movl   $0xc010f064,(%esp)
c0107178:	e8 e6 91 ff ff       	call   c0100363 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010717d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107180:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107183:	c1 e8 0c             	shr    $0xc,%eax
c0107186:	83 c0 01             	add    $0x1,%eax
c0107189:	89 c2                	mov    %eax,%edx
c010718b:	c1 e2 08             	shl    $0x8,%edx
c010718e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107191:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107196:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010719d:	00 
c010719e:	89 04 24             	mov    %eax,(%esp)
c01071a1:	e8 e2 e0 ff ff       	call   c0105288 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c01071a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01071a9:	8b 40 0c             	mov    0xc(%eax),%eax
c01071ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01071af:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071b3:	89 04 24             	mov    %eax,(%esp)
c01071b6:	e8 08 ef ff ff       	call   c01060c3 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01071bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01071bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071c2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01071c5:	0f 85 9a fe ff ff    	jne    c0107065 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01071cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01071ce:	c9                   	leave  
c01071cf:	c3                   	ret    

c01071d0 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01071d0:	55                   	push   %ebp
c01071d1:	89 e5                	mov    %esp,%ebp
c01071d3:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01071d6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01071dd:	e8 3b e0 ff ff       	call   c010521d <alloc_pages>
c01071e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01071e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01071e9:	75 24                	jne    c010720f <swap_in+0x3f>
c01071eb:	c7 44 24 0c a4 f0 10 	movl   $0xc010f0a4,0xc(%esp)
c01071f2:	c0 
c01071f3:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01071fa:	c0 
c01071fb:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107202:	00 
c0107203:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c010720a:	e8 e5 9b ff ff       	call   c0100df4 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010720f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107212:	8b 40 0c             	mov    0xc(%eax),%eax
c0107215:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010721c:	00 
c010721d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107220:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107224:	89 04 24             	mov    %eax,(%esp)
c0107227:	e8 6a e7 ff ff       	call   c0105996 <get_pte>
c010722c:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010722f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107232:	8b 00                	mov    (%eax),%eax
c0107234:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107237:	89 54 24 04          	mov    %edx,0x4(%esp)
c010723b:	89 04 24             	mov    %eax,(%esp)
c010723e:	e8 3d 32 00 00       	call   c010a480 <swapfs_read>
c0107243:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107246:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010724a:	74 2a                	je     c0107276 <swap_in+0xa6>
     {
        assert(r!=0);
c010724c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107250:	75 24                	jne    c0107276 <swap_in+0xa6>
c0107252:	c7 44 24 0c b1 f0 10 	movl   $0xc010f0b1,0xc(%esp)
c0107259:	c0 
c010725a:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107261:	c0 
c0107262:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107269:	00 
c010726a:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107271:	e8 7e 9b ff ff       	call   c0100df4 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107276:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107279:	8b 00                	mov    (%eax),%eax
c010727b:	89 c2                	mov    %eax,%edx
c010727d:	c1 ea 08             	shr    $0x8,%edx
c0107280:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107283:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107287:	89 54 24 04          	mov    %edx,0x4(%esp)
c010728b:	c7 04 24 b8 f0 10 c0 	movl   $0xc010f0b8,(%esp)
c0107292:	e8 cc 90 ff ff       	call   c0100363 <cprintf>
     *ptr_result=result;
c0107297:	8b 45 10             	mov    0x10(%ebp),%eax
c010729a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010729d:	89 10                	mov    %edx,(%eax)
     return 0;
c010729f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01072a4:	c9                   	leave  
c01072a5:	c3                   	ret    

c01072a6 <check_content_set>:



static inline void
check_content_set(void)
{
c01072a6:	55                   	push   %ebp
c01072a7:	89 e5                	mov    %esp,%ebp
c01072a9:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01072ac:	b8 00 10 00 00       	mov    $0x1000,%eax
c01072b1:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01072b4:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c01072b9:	83 f8 01             	cmp    $0x1,%eax
c01072bc:	74 24                	je     c01072e2 <check_content_set+0x3c>
c01072be:	c7 44 24 0c f6 f0 10 	movl   $0xc010f0f6,0xc(%esp)
c01072c5:	c0 
c01072c6:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01072cd:	c0 
c01072ce:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01072d5:	00 
c01072d6:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01072dd:	e8 12 9b ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01072e2:	b8 10 10 00 00       	mov    $0x1010,%eax
c01072e7:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01072ea:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c01072ef:	83 f8 01             	cmp    $0x1,%eax
c01072f2:	74 24                	je     c0107318 <check_content_set+0x72>
c01072f4:	c7 44 24 0c f6 f0 10 	movl   $0xc010f0f6,0xc(%esp)
c01072fb:	c0 
c01072fc:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107303:	c0 
c0107304:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010730b:	00 
c010730c:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107313:	e8 dc 9a ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107318:	b8 00 20 00 00       	mov    $0x2000,%eax
c010731d:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107320:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107325:	83 f8 02             	cmp    $0x2,%eax
c0107328:	74 24                	je     c010734e <check_content_set+0xa8>
c010732a:	c7 44 24 0c 05 f1 10 	movl   $0xc010f105,0xc(%esp)
c0107331:	c0 
c0107332:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107339:	c0 
c010733a:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107341:	00 
c0107342:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107349:	e8 a6 9a ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010734e:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107353:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107356:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c010735b:	83 f8 02             	cmp    $0x2,%eax
c010735e:	74 24                	je     c0107384 <check_content_set+0xde>
c0107360:	c7 44 24 0c 05 f1 10 	movl   $0xc010f105,0xc(%esp)
c0107367:	c0 
c0107368:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c010736f:	c0 
c0107370:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107377:	00 
c0107378:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c010737f:	e8 70 9a ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107384:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107389:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010738c:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107391:	83 f8 03             	cmp    $0x3,%eax
c0107394:	74 24                	je     c01073ba <check_content_set+0x114>
c0107396:	c7 44 24 0c 14 f1 10 	movl   $0xc010f114,0xc(%esp)
c010739d:	c0 
c010739e:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01073a5:	c0 
c01073a6:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01073ad:	00 
c01073ae:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01073b5:	e8 3a 9a ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01073ba:	b8 10 30 00 00       	mov    $0x3010,%eax
c01073bf:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01073c2:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c01073c7:	83 f8 03             	cmp    $0x3,%eax
c01073ca:	74 24                	je     c01073f0 <check_content_set+0x14a>
c01073cc:	c7 44 24 0c 14 f1 10 	movl   $0xc010f114,0xc(%esp)
c01073d3:	c0 
c01073d4:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01073db:	c0 
c01073dc:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01073e3:	00 
c01073e4:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01073eb:	e8 04 9a ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01073f0:	b8 00 40 00 00       	mov    $0x4000,%eax
c01073f5:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01073f8:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c01073fd:	83 f8 04             	cmp    $0x4,%eax
c0107400:	74 24                	je     c0107426 <check_content_set+0x180>
c0107402:	c7 44 24 0c 23 f1 10 	movl   $0xc010f123,0xc(%esp)
c0107409:	c0 
c010740a:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107411:	c0 
c0107412:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107419:	00 
c010741a:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107421:	e8 ce 99 ff ff       	call   c0100df4 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107426:	b8 10 40 00 00       	mov    $0x4010,%eax
c010742b:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010742e:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107433:	83 f8 04             	cmp    $0x4,%eax
c0107436:	74 24                	je     c010745c <check_content_set+0x1b6>
c0107438:	c7 44 24 0c 23 f1 10 	movl   $0xc010f123,0xc(%esp)
c010743f:	c0 
c0107440:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107447:	c0 
c0107448:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010744f:	00 
c0107450:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107457:	e8 98 99 ff ff       	call   c0100df4 <__panic>
}
c010745c:	c9                   	leave  
c010745d:	c3                   	ret    

c010745e <check_content_access>:

static inline int
check_content_access(void)
{
c010745e:	55                   	push   %ebp
c010745f:	89 e5                	mov    %esp,%ebp
c0107461:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107464:	a1 34 44 1c c0       	mov    0xc01c4434,%eax
c0107469:	8b 40 1c             	mov    0x1c(%eax),%eax
c010746c:	ff d0                	call   *%eax
c010746e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107471:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107474:	c9                   	leave  
c0107475:	c3                   	ret    

c0107476 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107476:	55                   	push   %ebp
c0107477:	89 e5                	mov    %esp,%ebp
c0107479:	53                   	push   %ebx
c010747a:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010747d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107484:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010748b:	c7 45 e8 dc 64 1c c0 	movl   $0xc01c64dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107492:	eb 6b                	jmp    c01074ff <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107494:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107497:	83 e8 0c             	sub    $0xc,%eax
c010749a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010749d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01074a0:	83 c0 04             	add    $0x4,%eax
c01074a3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01074aa:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01074ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01074b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01074b3:	0f a3 10             	bt     %edx,(%eax)
c01074b6:	19 db                	sbb    %ebx,%ebx
c01074b8:	89 5d bc             	mov    %ebx,-0x44(%ebp)
    return oldbit != 0;
c01074bb:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01074bf:	0f 95 c0             	setne  %al
c01074c2:	0f b6 c0             	movzbl %al,%eax
c01074c5:	85 c0                	test   %eax,%eax
c01074c7:	75 24                	jne    c01074ed <check_swap+0x77>
c01074c9:	c7 44 24 0c 32 f1 10 	movl   $0xc010f132,0xc(%esp)
c01074d0:	c0 
c01074d1:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01074d8:	c0 
c01074d9:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01074e0:	00 
c01074e1:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01074e8:	e8 07 99 ff ff       	call   c0100df4 <__panic>
        count ++, total += p->property;
c01074ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01074f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01074f4:	8b 50 08             	mov    0x8(%eax),%edx
c01074f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01074fa:	01 d0                	add    %edx,%eax
c01074fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01074ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107502:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107505:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107508:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010750b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010750e:	81 7d e8 dc 64 1c c0 	cmpl   $0xc01c64dc,-0x18(%ebp)
c0107515:	0f 85 79 ff ff ff    	jne    c0107494 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010751b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010751e:	e8 97 dd ff ff       	call   c01052ba <nr_free_pages>
c0107523:	39 c3                	cmp    %eax,%ebx
c0107525:	74 24                	je     c010754b <check_swap+0xd5>
c0107527:	c7 44 24 0c 42 f1 10 	movl   $0xc010f142,0xc(%esp)
c010752e:	c0 
c010752f:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107536:	c0 
c0107537:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010753e:	00 
c010753f:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107546:	e8 a9 98 ff ff       	call   c0100df4 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010754b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010754e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107552:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107555:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107559:	c7 04 24 5c f1 10 c0 	movl   $0xc010f15c,(%esp)
c0107560:	e8 fe 8d ff ff       	call   c0100363 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107565:	e8 4c 0a 00 00       	call   c0107fb6 <mm_create>
c010756a:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010756d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107571:	75 24                	jne    c0107597 <check_swap+0x121>
c0107573:	c7 44 24 0c 82 f1 10 	movl   $0xc010f182,0xc(%esp)
c010757a:	c0 
c010757b:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107582:	c0 
c0107583:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010758a:	00 
c010758b:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107592:	e8 5d 98 ff ff       	call   c0100df4 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107597:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c010759c:	85 c0                	test   %eax,%eax
c010759e:	74 24                	je     c01075c4 <check_swap+0x14e>
c01075a0:	c7 44 24 0c 8d f1 10 	movl   $0xc010f18d,0xc(%esp)
c01075a7:	c0 
c01075a8:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01075af:	c0 
c01075b0:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01075b7:	00 
c01075b8:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01075bf:	e8 30 98 ff ff       	call   c0100df4 <__panic>

     check_mm_struct = mm;
c01075c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075c7:	a3 cc 65 1c c0       	mov    %eax,0xc01c65cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01075cc:	8b 15 a4 43 1c c0    	mov    0xc01c43a4,%edx
c01075d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075d5:	89 50 0c             	mov    %edx,0xc(%eax)
c01075d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075db:	8b 40 0c             	mov    0xc(%eax),%eax
c01075de:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01075e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01075e4:	8b 00                	mov    (%eax),%eax
c01075e6:	85 c0                	test   %eax,%eax
c01075e8:	74 24                	je     c010760e <check_swap+0x198>
c01075ea:	c7 44 24 0c a5 f1 10 	movl   $0xc010f1a5,0xc(%esp)
c01075f1:	c0 
c01075f2:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01075f9:	c0 
c01075fa:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107601:	00 
c0107602:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107609:	e8 e6 97 ff ff       	call   c0100df4 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010760e:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107615:	00 
c0107616:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010761d:	00 
c010761e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107625:	e8 31 0a 00 00       	call   c010805b <vma_create>
c010762a:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010762d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107631:	75 24                	jne    c0107657 <check_swap+0x1e1>
c0107633:	c7 44 24 0c b3 f1 10 	movl   $0xc010f1b3,0xc(%esp)
c010763a:	c0 
c010763b:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107642:	c0 
c0107643:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010764a:	00 
c010764b:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107652:	e8 9d 97 ff ff       	call   c0100df4 <__panic>

     insert_vma_struct(mm, vma);
c0107657:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010765a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010765e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107661:	89 04 24             	mov    %eax,(%esp)
c0107664:	e8 77 0b 00 00       	call   c01081e0 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107669:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0107670:	e8 ee 8c ff ff       	call   c0100363 <cprintf>
     pte_t *temp_ptep=NULL;
c0107675:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010767c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010767f:	8b 40 0c             	mov    0xc(%eax),%eax
c0107682:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107689:	00 
c010768a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107691:	00 
c0107692:	89 04 24             	mov    %eax,(%esp)
c0107695:	e8 fc e2 ff ff       	call   c0105996 <get_pte>
c010769a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010769d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01076a1:	75 24                	jne    c01076c7 <check_swap+0x251>
c01076a3:	c7 44 24 0c f4 f1 10 	movl   $0xc010f1f4,0xc(%esp)
c01076aa:	c0 
c01076ab:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01076b2:	c0 
c01076b3:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01076ba:	00 
c01076bb:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01076c2:	e8 2d 97 ff ff       	call   c0100df4 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01076c7:	c7 04 24 08 f2 10 c0 	movl   $0xc010f208,(%esp)
c01076ce:	e8 90 8c ff ff       	call   c0100363 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076da:	e9 a3 00 00 00       	jmp    c0107782 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01076df:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01076e6:	e8 32 db ff ff       	call   c010521d <alloc_pages>
c01076eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01076ee:	89 04 95 00 65 1c c0 	mov    %eax,-0x3fe39b00(,%edx,4)
          assert(check_rp[i] != NULL );
c01076f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076f8:	8b 04 85 00 65 1c c0 	mov    -0x3fe39b00(,%eax,4),%eax
c01076ff:	85 c0                	test   %eax,%eax
c0107701:	75 24                	jne    c0107727 <check_swap+0x2b1>
c0107703:	c7 44 24 0c 2c f2 10 	movl   $0xc010f22c,0xc(%esp)
c010770a:	c0 
c010770b:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107712:	c0 
c0107713:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010771a:	00 
c010771b:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107722:	e8 cd 96 ff ff       	call   c0100df4 <__panic>
          assert(!PageProperty(check_rp[i]));
c0107727:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010772a:	8b 04 85 00 65 1c c0 	mov    -0x3fe39b00(,%eax,4),%eax
c0107731:	83 c0 04             	add    $0x4,%eax
c0107734:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c010773b:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010773e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107741:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107744:	0f a3 10             	bt     %edx,(%eax)
c0107747:	19 db                	sbb    %ebx,%ebx
c0107749:	89 5d ac             	mov    %ebx,-0x54(%ebp)
    return oldbit != 0;
c010774c:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107750:	0f 95 c0             	setne  %al
c0107753:	0f b6 c0             	movzbl %al,%eax
c0107756:	85 c0                	test   %eax,%eax
c0107758:	74 24                	je     c010777e <check_swap+0x308>
c010775a:	c7 44 24 0c 40 f2 10 	movl   $0xc010f240,0xc(%esp)
c0107761:	c0 
c0107762:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107769:	c0 
c010776a:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107771:	00 
c0107772:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107779:	e8 76 96 ff ff       	call   c0100df4 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010777e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107782:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107786:	0f 8e 53 ff ff ff    	jle    c01076df <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010778c:	a1 dc 64 1c c0       	mov    0xc01c64dc,%eax
c0107791:	8b 15 e0 64 1c c0    	mov    0xc01c64e0,%edx
c0107797:	89 45 98             	mov    %eax,-0x68(%ebp)
c010779a:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010779d:	c7 45 a8 dc 64 1c c0 	movl   $0xc01c64dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01077a4:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01077a7:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01077aa:	89 50 04             	mov    %edx,0x4(%eax)
c01077ad:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01077b0:	8b 50 04             	mov    0x4(%eax),%edx
c01077b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01077b6:	89 10                	mov    %edx,(%eax)
c01077b8:	c7 45 a4 dc 64 1c c0 	movl   $0xc01c64dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01077bf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01077c2:	8b 40 04             	mov    0x4(%eax),%eax
c01077c5:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01077c8:	0f 94 c0             	sete   %al
c01077cb:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01077ce:	85 c0                	test   %eax,%eax
c01077d0:	75 24                	jne    c01077f6 <check_swap+0x380>
c01077d2:	c7 44 24 0c 5b f2 10 	movl   $0xc010f25b,0xc(%esp)
c01077d9:	c0 
c01077da:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01077e1:	c0 
c01077e2:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01077e9:	00 
c01077ea:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01077f1:	e8 fe 95 ff ff       	call   c0100df4 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01077f6:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c01077fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01077fe:	c7 05 e4 64 1c c0 00 	movl   $0x0,0xc01c64e4
c0107805:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107808:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010780f:	eb 1e                	jmp    c010782f <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107811:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107814:	8b 04 85 00 65 1c c0 	mov    -0x3fe39b00(,%eax,4),%eax
c010781b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107822:	00 
c0107823:	89 04 24             	mov    %eax,(%esp)
c0107826:	e8 5d da ff ff       	call   c0105288 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010782b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010782f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107833:	7e dc                	jle    c0107811 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107835:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c010783a:	83 f8 04             	cmp    $0x4,%eax
c010783d:	74 24                	je     c0107863 <check_swap+0x3ed>
c010783f:	c7 44 24 0c 74 f2 10 	movl   $0xc010f274,0xc(%esp)
c0107846:	c0 
c0107847:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c010784e:	c0 
c010784f:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107856:	00 
c0107857:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c010785e:	e8 91 95 ff ff       	call   c0100df4 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107863:	c7 04 24 98 f2 10 c0 	movl   $0xc010f298,(%esp)
c010786a:	e8 f4 8a ff ff       	call   c0100363 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010786f:	c7 05 38 44 1c c0 00 	movl   $0x0,0xc01c4438
c0107876:	00 00 00 
     
     check_content_set();
c0107879:	e8 28 fa ff ff       	call   c01072a6 <check_content_set>
     assert( nr_free == 0);         
c010787e:	a1 e4 64 1c c0       	mov    0xc01c64e4,%eax
c0107883:	85 c0                	test   %eax,%eax
c0107885:	74 24                	je     c01078ab <check_swap+0x435>
c0107887:	c7 44 24 0c bf f2 10 	movl   $0xc010f2bf,0xc(%esp)
c010788e:	c0 
c010788f:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107896:	c0 
c0107897:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010789e:	00 
c010789f:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01078a6:	e8 49 95 ff ff       	call   c0100df4 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01078ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078b2:	eb 26                	jmp    c01078da <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01078b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078b7:	c7 04 85 20 65 1c c0 	movl   $0xffffffff,-0x3fe39ae0(,%eax,4)
c01078be:	ff ff ff ff 
c01078c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078c5:	8b 14 85 20 65 1c c0 	mov    -0x3fe39ae0(,%eax,4),%edx
c01078cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078cf:	89 14 85 60 65 1c c0 	mov    %edx,-0x3fe39aa0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01078d6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078da:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01078de:	7e d4                	jle    c01078b4 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078e7:	e9 eb 00 00 00       	jmp    c01079d7 <check_swap+0x561>
         check_ptep[i]=0;
c01078ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078ef:	c7 04 85 b4 65 1c c0 	movl   $0x0,-0x3fe39a4c(,%eax,4)
c01078f6:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01078fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078fd:	83 c0 01             	add    $0x1,%eax
c0107900:	c1 e0 0c             	shl    $0xc,%eax
c0107903:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010790a:	00 
c010790b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010790f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107912:	89 04 24             	mov    %eax,(%esp)
c0107915:	e8 7c e0 ff ff       	call   c0105996 <get_pte>
c010791a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010791d:	89 04 95 b4 65 1c c0 	mov    %eax,-0x3fe39a4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107924:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107927:	8b 04 85 b4 65 1c c0 	mov    -0x3fe39a4c(,%eax,4),%eax
c010792e:	85 c0                	test   %eax,%eax
c0107930:	75 24                	jne    c0107956 <check_swap+0x4e0>
c0107932:	c7 44 24 0c cc f2 10 	movl   $0xc010f2cc,0xc(%esp)
c0107939:	c0 
c010793a:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107941:	c0 
c0107942:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107949:	00 
c010794a:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107951:	e8 9e 94 ff ff       	call   c0100df4 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107956:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107959:	8b 04 85 b4 65 1c c0 	mov    -0x3fe39a4c(,%eax,4),%eax
c0107960:	8b 00                	mov    (%eax),%eax
c0107962:	89 04 24             	mov    %eax,(%esp)
c0107965:	e8 9f f5 ff ff       	call   c0106f09 <pte2page>
c010796a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010796d:	8b 14 95 00 65 1c c0 	mov    -0x3fe39b00(,%edx,4),%edx
c0107974:	39 d0                	cmp    %edx,%eax
c0107976:	74 24                	je     c010799c <check_swap+0x526>
c0107978:	c7 44 24 0c e4 f2 10 	movl   $0xc010f2e4,0xc(%esp)
c010797f:	c0 
c0107980:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107987:	c0 
c0107988:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010798f:	00 
c0107990:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107997:	e8 58 94 ff ff       	call   c0100df4 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010799c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010799f:	8b 04 85 b4 65 1c c0 	mov    -0x3fe39a4c(,%eax,4),%eax
c01079a6:	8b 00                	mov    (%eax),%eax
c01079a8:	83 e0 01             	and    $0x1,%eax
c01079ab:	85 c0                	test   %eax,%eax
c01079ad:	75 24                	jne    c01079d3 <check_swap+0x55d>
c01079af:	c7 44 24 0c 0c f3 10 	movl   $0xc010f30c,0xc(%esp)
c01079b6:	c0 
c01079b7:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c01079be:	c0 
c01079bf:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01079c6:	00 
c01079c7:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c01079ce:	e8 21 94 ff ff       	call   c0100df4 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01079d3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01079d7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01079db:	0f 8e 0b ff ff ff    	jle    c01078ec <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01079e1:	c7 04 24 28 f3 10 c0 	movl   $0xc010f328,(%esp)
c01079e8:	e8 76 89 ff ff       	call   c0100363 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01079ed:	e8 6c fa ff ff       	call   c010745e <check_content_access>
c01079f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01079f5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01079f9:	74 24                	je     c0107a1f <check_swap+0x5a9>
c01079fb:	c7 44 24 0c 4e f3 10 	movl   $0xc010f34e,0xc(%esp)
c0107a02:	c0 
c0107a03:	c7 44 24 08 36 f0 10 	movl   $0xc010f036,0x8(%esp)
c0107a0a:	c0 
c0107a0b:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107a12:	00 
c0107a13:	c7 04 24 d0 ef 10 c0 	movl   $0xc010efd0,(%esp)
c0107a1a:	e8 d5 93 ff ff       	call   c0100df4 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107a26:	eb 1e                	jmp    c0107a46 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a2b:	8b 04 85 00 65 1c c0 	mov    -0x3fe39b00(,%eax,4),%eax
c0107a32:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107a39:	00 
c0107a3a:	89 04 24             	mov    %eax,(%esp)
c0107a3d:	e8 46 d8 ff ff       	call   c0105288 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a42:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107a46:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107a4a:	7e dc                	jle    c0107a28 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0107a4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a4f:	8b 00                	mov    (%eax),%eax
c0107a51:	89 04 24             	mov    %eax,(%esp)
c0107a54:	e8 6b f4 ff ff       	call   c0106ec4 <pa2page>
c0107a59:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107a60:	00 
c0107a61:	89 04 24             	mov    %eax,(%esp)
c0107a64:	e8 1f d8 ff ff       	call   c0105288 <free_pages>
     pgdir[0] = 0;
c0107a69:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a6c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107a72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a75:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107a7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a7f:	89 04 24             	mov    %eax,(%esp)
c0107a82:	e8 8a 08 00 00       	call   c0108311 <mm_destroy>
     check_mm_struct = NULL;
c0107a87:	c7 05 cc 65 1c c0 00 	movl   $0x0,0xc01c65cc
c0107a8e:	00 00 00 
     
     nr_free = nr_free_store;
c0107a91:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107a94:	a3 e4 64 1c c0       	mov    %eax,0xc01c64e4
     free_list = free_list_store;
c0107a99:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107a9c:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107a9f:	a3 dc 64 1c c0       	mov    %eax,0xc01c64dc
c0107aa4:	89 15 e0 64 1c c0    	mov    %edx,0xc01c64e0

     
     le = &free_list;
c0107aaa:	c7 45 e8 dc 64 1c c0 	movl   $0xc01c64dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107ab1:	eb 1f                	jmp    c0107ad2 <check_swap+0x65c>
         struct Page *p = le2page(le, page_link);
c0107ab3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ab6:	83 e8 0c             	sub    $0xc,%eax
c0107ab9:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107abc:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107ac0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107ac3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107ac6:	8b 40 08             	mov    0x8(%eax),%eax
c0107ac9:	89 d1                	mov    %edx,%ecx
c0107acb:	29 c1                	sub    %eax,%ecx
c0107acd:	89 c8                	mov    %ecx,%eax
c0107acf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107ad2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ad5:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107ad8:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107adb:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107ade:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107ae1:	81 7d e8 dc 64 1c c0 	cmpl   $0xc01c64dc,-0x18(%ebp)
c0107ae8:	75 c9                	jne    c0107ab3 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107aea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107aed:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107af4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107af8:	c7 04 24 55 f3 10 c0 	movl   $0xc010f355,(%esp)
c0107aff:	e8 5f 88 ff ff       	call   c0100363 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107b04:	c7 04 24 6f f3 10 c0 	movl   $0xc010f36f,(%esp)
c0107b0b:	e8 53 88 ff ff       	call   c0100363 <cprintf>
}
c0107b10:	83 c4 74             	add    $0x74,%esp
c0107b13:	5b                   	pop    %ebx
c0107b14:	5d                   	pop    %ebp
c0107b15:	c3                   	ret    
c0107b16:	66 90                	xchg   %ax,%ax

c0107b18 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107b18:	55                   	push   %ebp
c0107b19:	89 e5                	mov    %esp,%ebp
c0107b1b:	83 ec 10             	sub    $0x10,%esp
c0107b1e:	c7 45 fc c4 65 1c c0 	movl   $0xc01c65c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107b25:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b28:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107b2b:	89 50 04             	mov    %edx,0x4(%eax)
c0107b2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b31:	8b 50 04             	mov    0x4(%eax),%edx
c0107b34:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b37:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107b39:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b3c:	c7 40 14 c4 65 1c c0 	movl   $0xc01c65c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107b43:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b48:	c9                   	leave  
c0107b49:	c3                   	ret    

c0107b4a <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107b4a:	55                   	push   %ebp
c0107b4b:	89 e5                	mov    %esp,%ebp
c0107b4d:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b50:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b53:	8b 40 14             	mov    0x14(%eax),%eax
c0107b56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107b59:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b5c:	83 c0 14             	add    $0x14,%eax
c0107b5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107b62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107b66:	74 06                	je     c0107b6e <_fifo_map_swappable+0x24>
c0107b68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b6c:	75 24                	jne    c0107b92 <_fifo_map_swappable+0x48>
c0107b6e:	c7 44 24 0c 88 f3 10 	movl   $0xc010f388,0xc(%esp)
c0107b75:	c0 
c0107b76:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107b7d:	c0 
c0107b7e:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107b85:	00 
c0107b86:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107b8d:	e8 62 92 ff ff       	call   c0100df4 <__panic>
c0107b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0107b9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ba1:	8b 00                	mov    (%eax),%eax
c0107ba3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107ba6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107ba9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107baf:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107bb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107bb5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107bb8:	89 10                	mov    %edx,(%eax)
c0107bba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107bbd:	8b 10                	mov    (%eax),%edx
c0107bbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107bc2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107bc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107bc8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107bcb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107bce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107bd1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107bd4:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2010011351*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0107bd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bdb:	c9                   	leave  
c0107bdc:	c3                   	ret    

c0107bdd <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107bdd:	55                   	push   %ebp
c0107bde:	89 e5                	mov    %esp,%ebp
c0107be0:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107be6:	8b 40 14             	mov    0x14(%eax),%eax
c0107be9:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107bec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107bf0:	75 24                	jne    c0107c16 <_fifo_swap_out_victim+0x39>
c0107bf2:	c7 44 24 0c cf f3 10 	movl   $0xc010f3cf,0xc(%esp)
c0107bf9:	c0 
c0107bfa:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107c01:	c0 
c0107c02:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107c09:	00 
c0107c0a:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107c11:	e8 de 91 ff ff       	call   c0100df4 <__panic>
     assert(in_tick==0);
c0107c16:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107c1a:	74 24                	je     c0107c40 <_fifo_swap_out_victim+0x63>
c0107c1c:	c7 44 24 0c dc f3 10 	movl   $0xc010f3dc,0xc(%esp)
c0107c23:	c0 
c0107c24:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107c2b:	c0 
c0107c2c:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107c33:	00 
c0107c34:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107c3b:	e8 b4 91 ff ff       	call   c0100df4 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2010011351*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     if (head->next == head)
c0107c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c43:	8b 40 04             	mov    0x4(%eax),%eax
c0107c46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107c49:	75 0b                	jne    c0107c56 <_fifo_swap_out_victim+0x79>
        *ptr_page = NULL;
c0107c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0107c54:	eb 39                	jmp    c0107c8f <_fifo_swap_out_victim+0xb2>
     else {
        *ptr_page = le2page(head->next, pra_page_link);
c0107c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c59:	8b 40 04             	mov    0x4(%eax),%eax
c0107c5c:	8d 50 ec             	lea    -0x14(%eax),%edx
c0107c5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c62:	89 10                	mov    %edx,(%eax)
        list_del(head->next);
c0107c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c67:	8b 40 04             	mov    0x4(%eax),%eax
c0107c6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107c6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c70:	8b 40 04             	mov    0x4(%eax),%eax
c0107c73:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107c76:	8b 12                	mov    (%edx),%edx
c0107c78:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0107c7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c81:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107c84:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107c87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107c8d:	89 10                	mov    %edx,(%eax)
     }
     return 0;
c0107c8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c94:	c9                   	leave  
c0107c95:	c3                   	ret    

c0107c96 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107c96:	55                   	push   %ebp
c0107c97:	89 e5                	mov    %esp,%ebp
c0107c99:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107c9c:	c7 04 24 e8 f3 10 c0 	movl   $0xc010f3e8,(%esp)
c0107ca3:	e8 bb 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107ca8:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107cad:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107cb0:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107cb5:	83 f8 04             	cmp    $0x4,%eax
c0107cb8:	74 24                	je     c0107cde <_fifo_check_swap+0x48>
c0107cba:	c7 44 24 0c 0e f4 10 	movl   $0xc010f40e,0xc(%esp)
c0107cc1:	c0 
c0107cc2:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107cc9:	c0 
c0107cca:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107cd1:	00 
c0107cd2:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107cd9:	e8 16 91 ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107cde:	c7 04 24 20 f4 10 c0 	movl   $0xc010f420,(%esp)
c0107ce5:	e8 79 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107cea:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107cef:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107cf2:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107cf7:	83 f8 04             	cmp    $0x4,%eax
c0107cfa:	74 24                	je     c0107d20 <_fifo_check_swap+0x8a>
c0107cfc:	c7 44 24 0c 0e f4 10 	movl   $0xc010f40e,0xc(%esp)
c0107d03:	c0 
c0107d04:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107d0b:	c0 
c0107d0c:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107d13:	00 
c0107d14:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107d1b:	e8 d4 90 ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d20:	c7 04 24 48 f4 10 c0 	movl   $0xc010f448,(%esp)
c0107d27:	e8 37 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107d2c:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107d31:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107d34:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107d39:	83 f8 04             	cmp    $0x4,%eax
c0107d3c:	74 24                	je     c0107d62 <_fifo_check_swap+0xcc>
c0107d3e:	c7 44 24 0c 0e f4 10 	movl   $0xc010f40e,0xc(%esp)
c0107d45:	c0 
c0107d46:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107d4d:	c0 
c0107d4e:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107d55:	00 
c0107d56:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107d5d:	e8 92 90 ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d62:	c7 04 24 70 f4 10 c0 	movl   $0xc010f470,(%esp)
c0107d69:	e8 f5 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d6e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d73:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107d76:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107d7b:	83 f8 04             	cmp    $0x4,%eax
c0107d7e:	74 24                	je     c0107da4 <_fifo_check_swap+0x10e>
c0107d80:	c7 44 24 0c 0e f4 10 	movl   $0xc010f40e,0xc(%esp)
c0107d87:	c0 
c0107d88:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107d8f:	c0 
c0107d90:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107d97:	00 
c0107d98:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107d9f:	e8 50 90 ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107da4:	c7 04 24 98 f4 10 c0 	movl   $0xc010f498,(%esp)
c0107dab:	e8 b3 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107db0:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107db5:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107db8:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107dbd:	83 f8 05             	cmp    $0x5,%eax
c0107dc0:	74 24                	je     c0107de6 <_fifo_check_swap+0x150>
c0107dc2:	c7 44 24 0c be f4 10 	movl   $0xc010f4be,0xc(%esp)
c0107dc9:	c0 
c0107dca:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107dd1:	c0 
c0107dd2:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107dd9:	00 
c0107dda:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107de1:	e8 0e 90 ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107de6:	c7 04 24 70 f4 10 c0 	movl   $0xc010f470,(%esp)
c0107ded:	e8 71 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107df2:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107df7:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107dfa:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107dff:	83 f8 05             	cmp    $0x5,%eax
c0107e02:	74 24                	je     c0107e28 <_fifo_check_swap+0x192>
c0107e04:	c7 44 24 0c be f4 10 	movl   $0xc010f4be,0xc(%esp)
c0107e0b:	c0 
c0107e0c:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107e13:	c0 
c0107e14:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107e1b:	00 
c0107e1c:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107e23:	e8 cc 8f ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107e28:	c7 04 24 20 f4 10 c0 	movl   $0xc010f420,(%esp)
c0107e2f:	e8 2f 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107e34:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107e39:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107e3c:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107e41:	83 f8 06             	cmp    $0x6,%eax
c0107e44:	74 24                	je     c0107e6a <_fifo_check_swap+0x1d4>
c0107e46:	c7 44 24 0c cd f4 10 	movl   $0xc010f4cd,0xc(%esp)
c0107e4d:	c0 
c0107e4e:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107e55:	c0 
c0107e56:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107e5d:	00 
c0107e5e:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107e65:	e8 8a 8f ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e6a:	c7 04 24 70 f4 10 c0 	movl   $0xc010f470,(%esp)
c0107e71:	e8 ed 84 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e76:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e7b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107e7e:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107e83:	83 f8 07             	cmp    $0x7,%eax
c0107e86:	74 24                	je     c0107eac <_fifo_check_swap+0x216>
c0107e88:	c7 44 24 0c dc f4 10 	movl   $0xc010f4dc,0xc(%esp)
c0107e8f:	c0 
c0107e90:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107e97:	c0 
c0107e98:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107e9f:	00 
c0107ea0:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107ea7:	e8 48 8f ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107eac:	c7 04 24 e8 f3 10 c0 	movl   $0xc010f3e8,(%esp)
c0107eb3:	e8 ab 84 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107eb8:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107ebd:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107ec0:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107ec5:	83 f8 08             	cmp    $0x8,%eax
c0107ec8:	74 24                	je     c0107eee <_fifo_check_swap+0x258>
c0107eca:	c7 44 24 0c eb f4 10 	movl   $0xc010f4eb,0xc(%esp)
c0107ed1:	c0 
c0107ed2:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107ed9:	c0 
c0107eda:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107ee1:	00 
c0107ee2:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107ee9:	e8 06 8f ff ff       	call   c0100df4 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107eee:	c7 04 24 48 f4 10 c0 	movl   $0xc010f448,(%esp)
c0107ef5:	e8 69 84 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107efa:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107eff:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107f02:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0107f07:	83 f8 09             	cmp    $0x9,%eax
c0107f0a:	74 24                	je     c0107f30 <_fifo_check_swap+0x29a>
c0107f0c:	c7 44 24 0c fa f4 10 	movl   $0xc010f4fa,0xc(%esp)
c0107f13:	c0 
c0107f14:	c7 44 24 08 a6 f3 10 	movl   $0xc010f3a6,0x8(%esp)
c0107f1b:	c0 
c0107f1c:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107f23:	00 
c0107f24:	c7 04 24 bb f3 10 c0 	movl   $0xc010f3bb,(%esp)
c0107f2b:	e8 c4 8e ff ff       	call   c0100df4 <__panic>
    return 0;
c0107f30:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f35:	c9                   	leave  
c0107f36:	c3                   	ret    

c0107f37 <_fifo_init>:


static int
_fifo_init(void)
{
c0107f37:	55                   	push   %ebp
c0107f38:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f3f:	5d                   	pop    %ebp
c0107f40:	c3                   	ret    

c0107f41 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107f41:	55                   	push   %ebp
c0107f42:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f49:	5d                   	pop    %ebp
c0107f4a:	c3                   	ret    

c0107f4b <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107f4b:	55                   	push   %ebp
c0107f4c:	89 e5                	mov    %esp,%ebp
c0107f4e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107f53:	5d                   	pop    %ebp
c0107f54:	c3                   	ret    
c0107f55:	66 90                	xchg   %ax,%ax
c0107f57:	90                   	nop

c0107f58 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107f58:	55                   	push   %ebp
c0107f59:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107f5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f5e:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107f61:	5d                   	pop    %ebp
c0107f62:	c3                   	ret    

c0107f63 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107f63:	55                   	push   %ebp
c0107f64:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107f66:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f69:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f6c:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107f6f:	5d                   	pop    %ebp
c0107f70:	c3                   	ret    

c0107f71 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107f71:	55                   	push   %ebp
c0107f72:	89 e5                	mov    %esp,%ebp
c0107f74:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107f77:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f7a:	89 c2                	mov    %eax,%edx
c0107f7c:	c1 ea 0c             	shr    $0xc,%edx
c0107f7f:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c0107f84:	39 c2                	cmp    %eax,%edx
c0107f86:	72 1c                	jb     c0107fa4 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107f88:	c7 44 24 08 1c f5 10 	movl   $0xc010f51c,0x8(%esp)
c0107f8f:	c0 
c0107f90:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107f97:	00 
c0107f98:	c7 04 24 3b f5 10 c0 	movl   $0xc010f53b,(%esp)
c0107f9f:	e8 50 8e ff ff       	call   c0100df4 <__panic>
    }
    return &pages[PPN(pa)];
c0107fa4:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c0107fa9:	8b 55 08             	mov    0x8(%ebp),%edx
c0107fac:	c1 ea 0c             	shr    $0xc,%edx
c0107faf:	c1 e2 05             	shl    $0x5,%edx
c0107fb2:	01 d0                	add    %edx,%eax
}
c0107fb4:	c9                   	leave  
c0107fb5:	c3                   	ret    

c0107fb6 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107fb6:	55                   	push   %ebp
c0107fb7:	89 e5                	mov    %esp,%ebp
c0107fb9:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107fbc:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107fc3:	e8 cd cd ff ff       	call   c0104d95 <kmalloc>
c0107fc8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107fcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107fcf:	0f 84 81 00 00 00    	je     c0108056 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107fdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fde:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107fe1:	89 50 04             	mov    %edx,0x4(%eax)
c0107fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fe7:	8b 50 04             	mov    0x4(%eax),%edx
c0107fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fed:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ffc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0108003:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108006:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c010800d:	a1 2c 44 1c c0       	mov    0xc01c442c,%eax
c0108012:	85 c0                	test   %eax,%eax
c0108014:	74 0d                	je     c0108023 <mm_create+0x6d>
c0108016:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108019:	89 04 24             	mov    %eax,(%esp)
c010801c:	e8 b6 ef ff ff       	call   c0106fd7 <swap_init_mm>
c0108021:	eb 0a                	jmp    c010802d <mm_create+0x77>
        else mm->sm_priv = NULL;
c0108023:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108026:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c010802d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108034:	00 
c0108035:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108038:	89 04 24             	mov    %eax,(%esp)
c010803b:	e8 23 ff ff ff       	call   c0107f63 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0108040:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108043:	83 c0 1c             	add    $0x1c,%eax
c0108046:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010804d:	00 
c010804e:	89 04 24             	mov    %eax,(%esp)
c0108051:	e8 a4 1c 00 00       	call   c0109cfa <sem_init>
    }    
    return mm;
c0108056:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108059:	c9                   	leave  
c010805a:	c3                   	ret    

c010805b <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c010805b:	55                   	push   %ebp
c010805c:	89 e5                	mov    %esp,%ebp
c010805e:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108061:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0108068:	e8 28 cd ff ff       	call   c0104d95 <kmalloc>
c010806d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108070:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108074:	74 1b                	je     c0108091 <vma_create+0x36>
        vma->vm_start = vm_start;
c0108076:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108079:	8b 55 08             	mov    0x8(%ebp),%edx
c010807c:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c010807f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108082:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108085:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0108088:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808b:	8b 55 10             	mov    0x10(%ebp),%edx
c010808e:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0108091:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108094:	c9                   	leave  
c0108095:	c3                   	ret    

c0108096 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0108096:	55                   	push   %ebp
c0108097:	89 e5                	mov    %esp,%ebp
c0108099:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c010809c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01080a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01080a7:	0f 84 8a 00 00 00    	je     c0108137 <find_vma+0xa1>
        vma = mm->mmap_cache;
c01080ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01080b0:	8b 40 08             	mov    0x8(%eax),%eax
c01080b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01080b6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080ba:	74 16                	je     c01080d2 <find_vma+0x3c>
c01080bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080bf:	8b 40 04             	mov    0x4(%eax),%eax
c01080c2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080c5:	77 0b                	ja     c01080d2 <find_vma+0x3c>
c01080c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080ca:	8b 40 08             	mov    0x8(%eax),%eax
c01080cd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080d0:	77 56                	ja     c0108128 <find_vma+0x92>
                bool found = 0;
c01080d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01080d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01080dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01080e5:	eb 1d                	jmp    c0108104 <find_vma+0x6e>
                    vma = le2vma(le, list_link);
c01080e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080ea:	83 e8 10             	sub    $0x10,%eax
c01080ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (addr < vma->vm_end) {
c01080f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080f3:	8b 40 08             	mov    0x8(%eax),%eax
c01080f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080f9:	76 09                	jbe    c0108104 <find_vma+0x6e>
                        found = 1;
c01080fb:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108102:	eb 17                	jmp    c010811b <find_vma+0x85>
c0108104:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108107:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010810a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010810d:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0108110:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108113:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108116:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108119:	75 cc                	jne    c01080e7 <find_vma+0x51>
                    if (addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010811b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010811f:	75 07                	jne    c0108128 <find_vma+0x92>
                    vma = NULL;
c0108121:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0108128:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010812c:	74 09                	je     c0108137 <find_vma+0xa1>
            mm->mmap_cache = vma;
c010812e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108131:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108134:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0108137:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010813a:	c9                   	leave  
c010813b:	c3                   	ret    

c010813c <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010813c:	55                   	push   %ebp
c010813d:	89 e5                	mov    %esp,%ebp
c010813f:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108142:	8b 45 08             	mov    0x8(%ebp),%eax
c0108145:	8b 50 04             	mov    0x4(%eax),%edx
c0108148:	8b 45 08             	mov    0x8(%ebp),%eax
c010814b:	8b 40 08             	mov    0x8(%eax),%eax
c010814e:	39 c2                	cmp    %eax,%edx
c0108150:	72 24                	jb     c0108176 <check_vma_overlap+0x3a>
c0108152:	c7 44 24 0c 49 f5 10 	movl   $0xc010f549,0xc(%esp)
c0108159:	c0 
c010815a:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108161:	c0 
c0108162:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108169:	00 
c010816a:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108171:	e8 7e 8c ff ff       	call   c0100df4 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108176:	8b 45 08             	mov    0x8(%ebp),%eax
c0108179:	8b 50 08             	mov    0x8(%eax),%edx
c010817c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010817f:	8b 40 04             	mov    0x4(%eax),%eax
c0108182:	39 c2                	cmp    %eax,%edx
c0108184:	76 24                	jbe    c01081aa <check_vma_overlap+0x6e>
c0108186:	c7 44 24 0c 8c f5 10 	movl   $0xc010f58c,0xc(%esp)
c010818d:	c0 
c010818e:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108195:	c0 
c0108196:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010819d:	00 
c010819e:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c01081a5:	e8 4a 8c ff ff       	call   c0100df4 <__panic>
    assert(next->vm_start < next->vm_end);
c01081aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ad:	8b 50 04             	mov    0x4(%eax),%edx
c01081b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081b3:	8b 40 08             	mov    0x8(%eax),%eax
c01081b6:	39 c2                	cmp    %eax,%edx
c01081b8:	72 24                	jb     c01081de <check_vma_overlap+0xa2>
c01081ba:	c7 44 24 0c ab f5 10 	movl   $0xc010f5ab,0xc(%esp)
c01081c1:	c0 
c01081c2:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c01081c9:	c0 
c01081ca:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01081d1:	00 
c01081d2:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c01081d9:	e8 16 8c ff ff       	call   c0100df4 <__panic>
}
c01081de:	c9                   	leave  
c01081df:	c3                   	ret    

c01081e0 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01081e0:	55                   	push   %ebp
c01081e1:	89 e5                	mov    %esp,%ebp
c01081e3:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01081e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081e9:	8b 50 04             	mov    0x4(%eax),%edx
c01081ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ef:	8b 40 08             	mov    0x8(%eax),%eax
c01081f2:	39 c2                	cmp    %eax,%edx
c01081f4:	72 24                	jb     c010821a <insert_vma_struct+0x3a>
c01081f6:	c7 44 24 0c c9 f5 10 	movl   $0xc010f5c9,0xc(%esp)
c01081fd:	c0 
c01081fe:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108205:	c0 
c0108206:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010820d:	00 
c010820e:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108215:	e8 da 8b ff ff       	call   c0100df4 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010821a:	8b 45 08             	mov    0x8(%ebp),%eax
c010821d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108220:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108223:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108226:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108229:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010822c:	eb 1f                	jmp    c010824d <insert_vma_struct+0x6d>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c010822e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108231:	83 e8 10             	sub    $0x10,%eax
c0108234:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0108237:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010823a:	8b 50 04             	mov    0x4(%eax),%edx
c010823d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108240:	8b 40 04             	mov    0x4(%eax),%eax
c0108243:	39 c2                	cmp    %eax,%edx
c0108245:	77 1f                	ja     c0108266 <insert_vma_struct+0x86>
                break;
            }
            le_prev = le;
c0108247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010824a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010824d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108250:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108253:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108256:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0108259:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010825c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010825f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108262:	75 ca                	jne    c010822e <insert_vma_struct+0x4e>
c0108264:	eb 01                	jmp    c0108267 <insert_vma_struct+0x87>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0108266:	90                   	nop
c0108267:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010826a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010826d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108270:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108273:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108276:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108279:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010827c:	74 15                	je     c0108293 <insert_vma_struct+0xb3>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010827e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108281:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108284:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108287:	89 44 24 04          	mov    %eax,0x4(%esp)
c010828b:	89 14 24             	mov    %edx,(%esp)
c010828e:	e8 a9 fe ff ff       	call   c010813c <check_vma_overlap>
    }
    if (le_next != list) {
c0108293:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108296:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108299:	74 15                	je     c01082b0 <insert_vma_struct+0xd0>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010829b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010829e:	83 e8 10             	sub    $0x10,%eax
c01082a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082a8:	89 04 24             	mov    %eax,(%esp)
c01082ab:	e8 8c fe ff ff       	call   c010813c <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01082b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082b3:	8b 55 08             	mov    0x8(%ebp),%edx
c01082b6:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01082b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082bb:	8d 50 10             	lea    0x10(%eax),%edx
c01082be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082c1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01082c4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01082c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01082ca:	8b 40 04             	mov    0x4(%eax),%eax
c01082cd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01082d0:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01082d3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01082d6:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01082d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01082dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082df:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01082e2:	89 10                	mov    %edx,(%eax)
c01082e4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082e7:	8b 10                	mov    (%eax),%edx
c01082e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01082ec:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01082ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01082f2:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01082f5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01082f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01082fb:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01082fe:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108300:	8b 45 08             	mov    0x8(%ebp),%eax
c0108303:	8b 40 10             	mov    0x10(%eax),%eax
c0108306:	8d 50 01             	lea    0x1(%eax),%edx
c0108309:	8b 45 08             	mov    0x8(%ebp),%eax
c010830c:	89 50 10             	mov    %edx,0x10(%eax)
}
c010830f:	c9                   	leave  
c0108310:	c3                   	ret    

c0108311 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108311:	55                   	push   %ebp
c0108312:	89 e5                	mov    %esp,%ebp
c0108314:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0108317:	8b 45 08             	mov    0x8(%ebp),%eax
c010831a:	89 04 24             	mov    %eax,(%esp)
c010831d:	e8 36 fc ff ff       	call   c0107f58 <mm_count>
c0108322:	85 c0                	test   %eax,%eax
c0108324:	74 24                	je     c010834a <mm_destroy+0x39>
c0108326:	c7 44 24 0c e5 f5 10 	movl   $0xc010f5e5,0xc(%esp)
c010832d:	c0 
c010832e:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108335:	c0 
c0108336:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010833d:	00 
c010833e:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108345:	e8 aa 8a ff ff       	call   c0100df4 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010834a:	8b 45 08             	mov    0x8(%ebp),%eax
c010834d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108350:	eb 36                	jmp    c0108388 <mm_destroy+0x77>
c0108352:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108355:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108358:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010835b:	8b 40 04             	mov    0x4(%eax),%eax
c010835e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108361:	8b 12                	mov    (%edx),%edx
c0108363:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108366:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108369:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010836c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010836f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108372:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108375:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108378:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010837a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010837d:	83 e8 10             	sub    $0x10,%eax
c0108380:	89 04 24             	mov    %eax,(%esp)
c0108383:	e8 28 ca ff ff       	call   c0104db0 <kfree>
c0108388:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010838b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010838e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108391:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108394:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108397:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010839a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010839d:	75 b3                	jne    c0108352 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c010839f:	8b 45 08             	mov    0x8(%ebp),%eax
c01083a2:	89 04 24             	mov    %eax,(%esp)
c01083a5:	e8 06 ca ff ff       	call   c0104db0 <kfree>
    mm=NULL;
c01083aa:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01083b1:	c9                   	leave  
c01083b2:	c3                   	ret    

c01083b3 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01083b3:	55                   	push   %ebp
c01083b4:	89 e5                	mov    %esp,%ebp
c01083b6:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01083b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01083c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01083ca:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01083d1:	8b 45 10             	mov    0x10(%ebp),%eax
c01083d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01083d7:	01 c2                	add    %eax,%edx
c01083d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01083dc:	01 d0                	add    %edx,%eax
c01083de:	83 e8 01             	sub    $0x1,%eax
c01083e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01083e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083e7:	ba 00 00 00 00       	mov    $0x0,%edx
c01083ec:	f7 75 e8             	divl   -0x18(%ebp)
c01083ef:	89 d0                	mov    %edx,%eax
c01083f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01083f4:	89 d1                	mov    %edx,%ecx
c01083f6:	29 c1                	sub    %eax,%ecx
c01083f8:	89 c8                	mov    %ecx,%eax
c01083fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01083fd:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108404:	76 11                	jbe    c0108417 <mm_map+0x64>
c0108406:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108409:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010840c:	73 09                	jae    c0108417 <mm_map+0x64>
c010840e:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108415:	76 0a                	jbe    c0108421 <mm_map+0x6e>
        return -E_INVAL;
c0108417:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010841c:	e9 b0 00 00 00       	jmp    c01084d1 <mm_map+0x11e>
    }

    assert(mm != NULL);
c0108421:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108425:	75 24                	jne    c010844b <mm_map+0x98>
c0108427:	c7 44 24 0c f7 f5 10 	movl   $0xc010f5f7,0xc(%esp)
c010842e:	c0 
c010842f:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108436:	c0 
c0108437:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010843e:	00 
c010843f:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108446:	e8 a9 89 ff ff       	call   c0100df4 <__panic>

    int ret = -E_INVAL;
c010844b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108452:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108455:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108459:	8b 45 08             	mov    0x8(%ebp),%eax
c010845c:	89 04 24             	mov    %eax,(%esp)
c010845f:	e8 32 fc ff ff       	call   c0108096 <find_vma>
c0108464:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108467:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010846b:	74 0b                	je     c0108478 <mm_map+0xc5>
c010846d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108470:	8b 40 04             	mov    0x4(%eax),%eax
c0108473:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108476:	72 52                	jb     c01084ca <mm_map+0x117>
        goto out;
    }
    ret = -E_NO_MEM;
c0108478:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010847f:	8b 45 14             	mov    0x14(%ebp),%eax
c0108482:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108486:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108489:	89 44 24 04          	mov    %eax,0x4(%esp)
c010848d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108490:	89 04 24             	mov    %eax,(%esp)
c0108493:	e8 c3 fb ff ff       	call   c010805b <vma_create>
c0108498:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010849b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010849f:	74 2c                	je     c01084cd <mm_map+0x11a>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01084a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01084ab:	89 04 24             	mov    %eax,(%esp)
c01084ae:	e8 2d fd ff ff       	call   c01081e0 <insert_vma_struct>
    if (vma_store != NULL) {
c01084b3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01084b7:	74 08                	je     c01084c1 <mm_map+0x10e>
        *vma_store = vma;
c01084b9:	8b 45 18             	mov    0x18(%ebp),%eax
c01084bc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01084bf:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01084c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01084c8:	eb 04                	jmp    c01084ce <mm_map+0x11b>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c01084ca:	90                   	nop
c01084cb:	eb 01                	jmp    c01084ce <mm_map+0x11b>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c01084cd:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c01084ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01084d1:	c9                   	leave  
c01084d2:	c3                   	ret    

c01084d3 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01084d3:	55                   	push   %ebp
c01084d4:	89 e5                	mov    %esp,%ebp
c01084d6:	56                   	push   %esi
c01084d7:	53                   	push   %ebx
c01084d8:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01084db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084df:	74 06                	je     c01084e7 <dup_mmap+0x14>
c01084e1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01084e5:	75 24                	jne    c010850b <dup_mmap+0x38>
c01084e7:	c7 44 24 0c 02 f6 10 	movl   $0xc010f602,0xc(%esp)
c01084ee:	c0 
c01084ef:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c01084f6:	c0 
c01084f7:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01084fe:	00 
c01084ff:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108506:	e8 e9 88 ff ff       	call   c0100df4 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010850b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010850e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108511:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108514:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108517:	e9 92 00 00 00       	jmp    c01085ae <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010851c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010851f:	83 e8 10             	sub    $0x10,%eax
c0108522:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108525:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108528:	8b 48 0c             	mov    0xc(%eax),%ecx
c010852b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010852e:	8b 50 08             	mov    0x8(%eax),%edx
c0108531:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108534:	8b 40 04             	mov    0x4(%eax),%eax
c0108537:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010853b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010853f:	89 04 24             	mov    %eax,(%esp)
c0108542:	e8 14 fb ff ff       	call   c010805b <vma_create>
c0108547:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010854a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010854e:	75 07                	jne    c0108557 <dup_mmap+0x84>
            return -E_NO_MEM;
c0108550:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108555:	eb 76                	jmp    c01085cd <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108557:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010855a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010855e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108561:	89 04 24             	mov    %eax,(%esp)
c0108564:	e8 77 fc ff ff       	call   c01081e0 <insert_vma_struct>

        bool share = 0;
c0108569:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108570:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108573:	8b 58 08             	mov    0x8(%eax),%ebx
c0108576:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108579:	8b 48 04             	mov    0x4(%eax),%ecx
c010857c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010857f:	8b 50 0c             	mov    0xc(%eax),%edx
c0108582:	8b 45 08             	mov    0x8(%ebp),%eax
c0108585:	8b 40 0c             	mov    0xc(%eax),%eax
c0108588:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010858b:	89 74 24 10          	mov    %esi,0x10(%esp)
c010858f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108593:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108597:	89 54 24 04          	mov    %edx,0x4(%esp)
c010859b:	89 04 24             	mov    %eax,(%esp)
c010859e:	e8 03 d8 ff ff       	call   c0105da6 <copy_range>
c01085a3:	85 c0                	test   %eax,%eax
c01085a5:	74 07                	je     c01085ae <dup_mmap+0xdb>
            return -E_NO_MEM;
c01085a7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01085ac:	eb 1f                	jmp    c01085cd <dup_mmap+0xfa>
c01085ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01085b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085b7:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01085b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085bf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01085c2:	0f 85 54 ff ff ff    	jne    c010851c <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01085c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01085cd:	83 c4 40             	add    $0x40,%esp
c01085d0:	5b                   	pop    %ebx
c01085d1:	5e                   	pop    %esi
c01085d2:	5d                   	pop    %ebp
c01085d3:	c3                   	ret    

c01085d4 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01085d4:	55                   	push   %ebp
c01085d5:	89 e5                	mov    %esp,%ebp
c01085d7:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01085da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01085de:	74 0f                	je     c01085ef <exit_mmap+0x1b>
c01085e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01085e3:	89 04 24             	mov    %eax,(%esp)
c01085e6:	e8 6d f9 ff ff       	call   c0107f58 <mm_count>
c01085eb:	85 c0                	test   %eax,%eax
c01085ed:	74 24                	je     c0108613 <exit_mmap+0x3f>
c01085ef:	c7 44 24 0c 20 f6 10 	movl   $0xc010f620,0xc(%esp)
c01085f6:	c0 
c01085f7:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c01085fe:	c0 
c01085ff:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108606:	00 
c0108607:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c010860e:	e8 e1 87 ff ff       	call   c0100df4 <__panic>
    pde_t *pgdir = mm->pgdir;
c0108613:	8b 45 08             	mov    0x8(%ebp),%eax
c0108616:	8b 40 0c             	mov    0xc(%eax),%eax
c0108619:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010861c:	8b 45 08             	mov    0x8(%ebp),%eax
c010861f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108622:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108625:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108628:	eb 28                	jmp    c0108652 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010862a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010862d:	83 e8 10             	sub    $0x10,%eax
c0108630:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108633:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108636:	8b 50 08             	mov    0x8(%eax),%edx
c0108639:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010863c:	8b 40 04             	mov    0x4(%eax),%eax
c010863f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108643:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108647:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010864a:	89 04 24             	mov    %eax,(%esp)
c010864d:	e8 59 d5 ff ff       	call   c0105bab <unmap_range>
c0108652:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108655:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108658:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010865b:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010865e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108661:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108664:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108667:	75 c1                	jne    c010862a <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108669:	eb 28                	jmp    c0108693 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010866b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010866e:	83 e8 10             	sub    $0x10,%eax
c0108671:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108674:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108677:	8b 50 08             	mov    0x8(%eax),%edx
c010867a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010867d:	8b 40 04             	mov    0x4(%eax),%eax
c0108680:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108684:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108688:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010868b:	89 04 24             	mov    %eax,(%esp)
c010868e:	e8 0c d6 ff ff       	call   c0105c9f <exit_range>
c0108693:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108696:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108699:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010869c:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010869f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086a5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01086a8:	75 c1                	jne    c010866b <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01086aa:	c9                   	leave  
c01086ab:	c3                   	ret    

c01086ac <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01086ac:	55                   	push   %ebp
c01086ad:	89 e5                	mov    %esp,%ebp
c01086af:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01086b2:	8b 45 10             	mov    0x10(%ebp),%eax
c01086b5:	8b 55 18             	mov    0x18(%ebp),%edx
c01086b8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01086bc:	8b 55 14             	mov    0x14(%ebp),%edx
c01086bf:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01086ca:	89 04 24             	mov    %eax,(%esp)
c01086cd:	e8 ef 07 00 00       	call   c0108ec1 <user_mem_check>
c01086d2:	85 c0                	test   %eax,%eax
c01086d4:	75 07                	jne    c01086dd <copy_from_user+0x31>
        return 0;
c01086d6:	b8 00 00 00 00       	mov    $0x0,%eax
c01086db:	eb 1e                	jmp    c01086fb <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01086dd:	8b 45 14             	mov    0x14(%ebp),%eax
c01086e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01086e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086ee:	89 04 24             	mov    %eax,(%esp)
c01086f1:	e8 13 53 00 00       	call   c010da09 <memcpy>
    return 1;
c01086f6:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01086fb:	c9                   	leave  
c01086fc:	c3                   	ret    

c01086fd <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01086fd:	55                   	push   %ebp
c01086fe:	89 e5                	mov    %esp,%ebp
c0108700:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108703:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108706:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010870d:	00 
c010870e:	8b 55 14             	mov    0x14(%ebp),%edx
c0108711:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108715:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108719:	8b 45 08             	mov    0x8(%ebp),%eax
c010871c:	89 04 24             	mov    %eax,(%esp)
c010871f:	e8 9d 07 00 00       	call   c0108ec1 <user_mem_check>
c0108724:	85 c0                	test   %eax,%eax
c0108726:	75 07                	jne    c010872f <copy_to_user+0x32>
        return 0;
c0108728:	b8 00 00 00 00       	mov    $0x0,%eax
c010872d:	eb 1e                	jmp    c010874d <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c010872f:	8b 45 14             	mov    0x14(%ebp),%eax
c0108732:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108736:	8b 45 10             	mov    0x10(%ebp),%eax
c0108739:	89 44 24 04          	mov    %eax,0x4(%esp)
c010873d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108740:	89 04 24             	mov    %eax,(%esp)
c0108743:	e8 c1 52 00 00       	call   c010da09 <memcpy>
    return 1;
c0108748:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010874d:	c9                   	leave  
c010874e:	c3                   	ret    

c010874f <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010874f:	55                   	push   %ebp
c0108750:	89 e5                	mov    %esp,%ebp
c0108752:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108755:	e8 02 00 00 00       	call   c010875c <check_vmm>
}
c010875a:	c9                   	leave  
c010875b:	c3                   	ret    

c010875c <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010875c:	55                   	push   %ebp
c010875d:	89 e5                	mov    %esp,%ebp
c010875f:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108762:	e8 53 cb ff ff       	call   c01052ba <nr_free_pages>
c0108767:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c010876a:	e8 13 00 00 00       	call   c0108782 <check_vma_struct>
    check_pgfault();
c010876f:	e8 22 03 00 00       	call   c0108a96 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108774:	c7 04 24 40 f6 10 c0 	movl   $0xc010f640,(%esp)
c010877b:	e8 e3 7b ff ff       	call   c0100363 <cprintf>
}
c0108780:	c9                   	leave  
c0108781:	c3                   	ret    

c0108782 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108782:	55                   	push   %ebp
c0108783:	89 e5                	mov    %esp,%ebp
c0108785:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108788:	e8 2d cb ff ff       	call   c01052ba <nr_free_pages>
c010878d:	89 45 e8             	mov    %eax,-0x18(%ebp)

    struct mm_struct *mm = mm_create();
c0108790:	e8 21 f8 ff ff       	call   c0107fb6 <mm_create>
c0108795:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(mm != NULL);
c0108798:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010879c:	75 24                	jne    c01087c2 <check_vma_struct+0x40>
c010879e:	c7 44 24 0c f7 f5 10 	movl   $0xc010f5f7,0xc(%esp)
c01087a5:	c0 
c01087a6:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c01087ad:	c0 
c01087ae:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01087b5:	00 
c01087b6:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c01087bd:	e8 32 86 ff ff       	call   c0100df4 <__panic>

    int step1 = 10, step2 = step1 * 10;
c01087c2:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
c01087c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01087cc:	89 d0                	mov    %edx,%eax
c01087ce:	c1 e0 02             	shl    $0x2,%eax
c01087d1:	01 d0                	add    %edx,%eax
c01087d3:	01 c0                	add    %eax,%eax
c01087d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int i;
    for (i = step1; i >= 0; i --) {
c01087d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01087db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087de:	eb 70                	jmp    c0108850 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01087e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087e3:	89 d0                	mov    %edx,%eax
c01087e5:	c1 e0 02             	shl    $0x2,%eax
c01087e8:	01 d0                	add    %edx,%eax
c01087ea:	83 c0 02             	add    $0x2,%eax
c01087ed:	89 c1                	mov    %eax,%ecx
c01087ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087f2:	89 d0                	mov    %edx,%eax
c01087f4:	c1 e0 02             	shl    $0x2,%eax
c01087f7:	01 d0                	add    %edx,%eax
c01087f9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108800:	00 
c0108801:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108805:	89 04 24             	mov    %eax,(%esp)
c0108808:	e8 4e f8 ff ff       	call   c010805b <vma_create>
c010880d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108810:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108814:	75 24                	jne    c010883a <check_vma_struct+0xb8>
c0108816:	c7 44 24 0c 58 f6 10 	movl   $0xc010f658,0xc(%esp)
c010881d:	c0 
c010881e:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108825:	c0 
c0108826:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c010882d:	00 
c010882e:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108835:	e8 ba 85 ff ff       	call   c0100df4 <__panic>
        insert_vma_struct(mm, vma);
c010883a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010883d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108841:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108844:	89 04 24             	mov    %eax,(%esp)
c0108847:	e8 94 f9 ff ff       	call   c01081e0 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 0; i --) {
c010884c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108850:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108854:	79 8a                	jns    c01087e0 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108856:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108859:	83 c0 01             	add    $0x1,%eax
c010885c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010885f:	eb 70                	jmp    c01088d1 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108861:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108864:	89 d0                	mov    %edx,%eax
c0108866:	c1 e0 02             	shl    $0x2,%eax
c0108869:	01 d0                	add    %edx,%eax
c010886b:	83 c0 02             	add    $0x2,%eax
c010886e:	89 c1                	mov    %eax,%ecx
c0108870:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108873:	89 d0                	mov    %edx,%eax
c0108875:	c1 e0 02             	shl    $0x2,%eax
c0108878:	01 d0                	add    %edx,%eax
c010887a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108881:	00 
c0108882:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108886:	89 04 24             	mov    %eax,(%esp)
c0108889:	e8 cd f7 ff ff       	call   c010805b <vma_create>
c010888e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(vma != NULL);
c0108891:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0108895:	75 24                	jne    c01088bb <check_vma_struct+0x139>
c0108897:	c7 44 24 0c 58 f6 10 	movl   $0xc010f658,0xc(%esp)
c010889e:	c0 
c010889f:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c01088a6:	c0 
c01088a7:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01088ae:	00 
c01088af:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c01088b6:	e8 39 85 ff ff       	call   c0100df4 <__panic>
        insert_vma_struct(mm, vma);
c01088bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088c5:	89 04 24             	mov    %eax,(%esp)
c01088c8:	e8 13 f9 ff ff       	call   c01081e0 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01088cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01088d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088d4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01088d7:	7e 88                	jle    c0108861 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01088d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01088df:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01088e2:	8b 40 04             	mov    0x4(%eax),%eax
c01088e5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 0; i <= step2; i ++) {
c01088e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01088ef:	e9 97 00 00 00       	jmp    c010898b <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01088f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01088fa:	75 24                	jne    c0108920 <check_vma_struct+0x19e>
c01088fc:	c7 44 24 0c 64 f6 10 	movl   $0xc010f664,0xc(%esp)
c0108903:	c0 
c0108904:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c010890b:	c0 
c010890c:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108913:	00 
c0108914:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c010891b:	e8 d4 84 ff ff       	call   c0100df4 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108920:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108923:	83 e8 10             	sub    $0x10,%eax
c0108926:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108929:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010892c:	8b 48 04             	mov    0x4(%eax),%ecx
c010892f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108932:	89 d0                	mov    %edx,%eax
c0108934:	c1 e0 02             	shl    $0x2,%eax
c0108937:	01 d0                	add    %edx,%eax
c0108939:	39 c1                	cmp    %eax,%ecx
c010893b:	75 17                	jne    c0108954 <check_vma_struct+0x1d2>
c010893d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108940:	8b 48 08             	mov    0x8(%eax),%ecx
c0108943:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108946:	89 d0                	mov    %edx,%eax
c0108948:	c1 e0 02             	shl    $0x2,%eax
c010894b:	01 d0                	add    %edx,%eax
c010894d:	83 c0 02             	add    $0x2,%eax
c0108950:	39 c1                	cmp    %eax,%ecx
c0108952:	74 24                	je     c0108978 <check_vma_struct+0x1f6>
c0108954:	c7 44 24 0c 7c f6 10 	movl   $0xc010f67c,0xc(%esp)
c010895b:	c0 
c010895c:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108963:	c0 
c0108964:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010896b:	00 
c010896c:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108973:	e8 7c 84 ff ff       	call   c0100df4 <__panic>
c0108978:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010897b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010897e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108981:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108984:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 0; i <= step2; i ++) {
c0108987:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010898b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010898e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0108991:	0f 8e 5d ff ff ff    	jle    c01088f4 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 0; i < 5 * step2 + 2; i ++) {
c0108997:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010899e:	e9 c4 00 00 00       	jmp    c0108a67 <check_vma_struct+0x2e5>
        struct vma_struct *vma = find_vma(mm, i);
c01089a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089ad:	89 04 24             	mov    %eax,(%esp)
c01089b0:	e8 e1 f6 ff ff       	call   c0108096 <find_vma>
c01089b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma != NULL);
c01089b8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01089bc:	75 24                	jne    c01089e2 <check_vma_struct+0x260>
c01089be:	c7 44 24 0c 58 f6 10 	movl   $0xc010f658,0xc(%esp)
c01089c5:	c0 
c01089c6:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c01089cd:	c0 
c01089ce:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01089d5:	00 
c01089d6:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c01089dd:	e8 12 84 ff ff       	call   c0100df4 <__panic>
        int j = i / 5;
c01089e2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01089e5:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01089ea:	89 c8                	mov    %ecx,%eax
c01089ec:	f7 ea                	imul   %edx
c01089ee:	d1 fa                	sar    %edx
c01089f0:	89 c8                	mov    %ecx,%eax
c01089f2:	c1 f8 1f             	sar    $0x1f,%eax
c01089f5:	89 d1                	mov    %edx,%ecx
c01089f7:	29 c1                	sub    %eax,%ecx
c01089f9:	89 c8                	mov    %ecx,%eax
c01089fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (i >= 5 * j + 2) {
c01089fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108a01:	89 d0                	mov    %edx,%eax
c0108a03:	c1 e0 02             	shl    $0x2,%eax
c0108a06:	01 d0                	add    %edx,%eax
c0108a08:	83 c0 02             	add    $0x2,%eax
c0108a0b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108a0e:	7f 04                	jg     c0108a14 <check_vma_struct+0x292>
            j ++;
c0108a10:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
        }
        assert(vma->vm_start == j * 5 && vma->vm_end == j * 5 + 2);
c0108a14:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a17:	8b 48 04             	mov    0x4(%eax),%ecx
c0108a1a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108a1d:	89 d0                	mov    %edx,%eax
c0108a1f:	c1 e0 02             	shl    $0x2,%eax
c0108a22:	01 d0                	add    %edx,%eax
c0108a24:	39 c1                	cmp    %eax,%ecx
c0108a26:	75 17                	jne    c0108a3f <check_vma_struct+0x2bd>
c0108a28:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a2b:	8b 48 08             	mov    0x8(%eax),%ecx
c0108a2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108a31:	89 d0                	mov    %edx,%eax
c0108a33:	c1 e0 02             	shl    $0x2,%eax
c0108a36:	01 d0                	add    %edx,%eax
c0108a38:	83 c0 02             	add    $0x2,%eax
c0108a3b:	39 c1                	cmp    %eax,%ecx
c0108a3d:	74 24                	je     c0108a63 <check_vma_struct+0x2e1>
c0108a3f:	c7 44 24 0c b4 f6 10 	movl   $0xc010f6b4,0xc(%esp)
c0108a46:	c0 
c0108a47:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108a4e:	c0 
c0108a4f:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
c0108a56:	00 
c0108a57:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108a5e:	e8 91 83 ff ff       	call   c0100df4 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 0; i < 5 * step2 + 2; i ++) {
c0108a63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108a67:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108a6a:	89 d0                	mov    %edx,%eax
c0108a6c:	c1 e0 02             	shl    $0x2,%eax
c0108a6f:	01 d0                	add    %edx,%eax
c0108a71:	83 c0 02             	add    $0x2,%eax
c0108a74:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108a77:	0f 8f 26 ff ff ff    	jg     c01089a3 <check_vma_struct+0x221>
            j ++;
        }
        assert(vma->vm_start == j * 5 && vma->vm_end == j * 5 + 2);
    }

    mm_destroy(mm);
c0108a7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a80:	89 04 24             	mov    %eax,(%esp)
c0108a83:	e8 89 f8 ff ff       	call   c0108311 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108a88:	c7 04 24 e8 f6 10 c0 	movl   $0xc010f6e8,(%esp)
c0108a8f:	e8 cf 78 ff ff       	call   c0100363 <cprintf>
}
c0108a94:	c9                   	leave  
c0108a95:	c3                   	ret    

c0108a96 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108a96:	55                   	push   %ebp
c0108a97:	89 e5                	mov    %esp,%ebp
c0108a99:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108a9c:	e8 19 c8 ff ff       	call   c01052ba <nr_free_pages>
c0108aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108aa4:	e8 0d f5 ff ff       	call   c0107fb6 <mm_create>
c0108aa9:	a3 cc 65 1c c0       	mov    %eax,0xc01c65cc
    assert(check_mm_struct != NULL);
c0108aae:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c0108ab3:	85 c0                	test   %eax,%eax
c0108ab5:	75 24                	jne    c0108adb <check_pgfault+0x45>
c0108ab7:	c7 44 24 0c 07 f7 10 	movl   $0xc010f707,0xc(%esp)
c0108abe:	c0 
c0108abf:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108ac6:	c0 
c0108ac7:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0108ace:	00 
c0108acf:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108ad6:	e8 19 83 ff ff       	call   c0100df4 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108adb:	a1 cc 65 1c c0       	mov    0xc01c65cc,%eax
c0108ae0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108ae3:	8b 15 a4 43 1c c0    	mov    0xc01c43a4,%edx
c0108ae9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108aec:	89 50 0c             	mov    %edx,0xc(%eax)
c0108aef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108af2:	8b 40 0c             	mov    0xc(%eax),%eax
c0108af5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108af8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108afb:	8b 00                	mov    (%eax),%eax
c0108afd:	85 c0                	test   %eax,%eax
c0108aff:	74 24                	je     c0108b25 <check_pgfault+0x8f>
c0108b01:	c7 44 24 0c 1f f7 10 	movl   $0xc010f71f,0xc(%esp)
c0108b08:	c0 
c0108b09:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108b10:	c0 
c0108b11:	c7 44 24 04 41 01 00 	movl   $0x141,0x4(%esp)
c0108b18:	00 
c0108b19:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108b20:	e8 cf 82 ff ff       	call   c0100df4 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108b25:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108b2c:	00 
c0108b2d:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108b34:	00 
c0108b35:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108b3c:	e8 1a f5 ff ff       	call   c010805b <vma_create>
c0108b41:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108b44:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108b48:	75 24                	jne    c0108b6e <check_pgfault+0xd8>
c0108b4a:	c7 44 24 0c 58 f6 10 	movl   $0xc010f658,0xc(%esp)
c0108b51:	c0 
c0108b52:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108b59:	c0 
c0108b5a:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
c0108b61:	00 
c0108b62:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108b69:	e8 86 82 ff ff       	call   c0100df4 <__panic>

    insert_vma_struct(mm, vma);
c0108b6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108b71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b78:	89 04 24             	mov    %eax,(%esp)
c0108b7b:	e8 60 f6 ff ff       	call   c01081e0 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108b80:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108b87:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108b8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b91:	89 04 24             	mov    %eax,(%esp)
c0108b94:	e8 fd f4 ff ff       	call   c0108096 <find_vma>
c0108b99:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108b9c:	74 24                	je     c0108bc2 <check_pgfault+0x12c>
c0108b9e:	c7 44 24 0c 2d f7 10 	movl   $0xc010f72d,0xc(%esp)
c0108ba5:	c0 
c0108ba6:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108bad:	c0 
c0108bae:	c7 44 24 04 49 01 00 	movl   $0x149,0x4(%esp)
c0108bb5:	00 
c0108bb6:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108bbd:	e8 32 82 ff ff       	call   c0100df4 <__panic>

    int i, sum = 0;
c0108bc2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108bc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108bd0:	eb 17                	jmp    c0108be9 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108bd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108bd5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108bd8:	01 d0                	add    %edx,%eax
c0108bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108bdd:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108be2:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108be5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108be9:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108bed:	7e e3                	jle    c0108bd2 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108bef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108bf6:	eb 15                	jmp    c0108c0d <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108bf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108bfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108bfe:	01 d0                	add    %edx,%eax
c0108c00:	0f b6 00             	movzbl (%eax),%eax
c0108c03:	0f be c0             	movsbl %al,%eax
c0108c06:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c09:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c0d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c11:	7e e5                	jle    c0108bf8 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108c13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108c17:	74 24                	je     c0108c3d <check_pgfault+0x1a7>
c0108c19:	c7 44 24 0c 47 f7 10 	movl   $0xc010f747,0xc(%esp)
c0108c20:	c0 
c0108c21:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108c28:	c0 
c0108c29:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c0108c30:	00 
c0108c31:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108c38:	e8 b7 81 ff ff       	call   c0100df4 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108c3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c40:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108c43:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108c46:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108c4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c52:	89 04 24             	mov    %eax,(%esp)
c0108c55:	e8 6c d3 ff ff       	call   c0105fc6 <page_remove>
    free_page(pa2page(pgdir[0]));
c0108c5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c5d:	8b 00                	mov    (%eax),%eax
c0108c5f:	89 04 24             	mov    %eax,(%esp)
c0108c62:	e8 0a f3 ff ff       	call   c0107f71 <pa2page>
c0108c67:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108c6e:	00 
c0108c6f:	89 04 24             	mov    %eax,(%esp)
c0108c72:	e8 11 c6 ff ff       	call   c0105288 <free_pages>
    pgdir[0] = 0;
c0108c77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c7a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108c80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c83:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108c8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c8d:	89 04 24             	mov    %eax,(%esp)
c0108c90:	e8 7c f6 ff ff       	call   c0108311 <mm_destroy>
    check_mm_struct = NULL;
c0108c95:	c7 05 cc 65 1c c0 00 	movl   $0x0,0xc01c65cc
c0108c9c:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108c9f:	e8 16 c6 ff ff       	call   c01052ba <nr_free_pages>
c0108ca4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108ca7:	74 24                	je     c0108ccd <check_pgfault+0x237>
c0108ca9:	c7 44 24 0c 50 f7 10 	movl   $0xc010f750,0xc(%esp)
c0108cb0:	c0 
c0108cb1:	c7 44 24 08 67 f5 10 	movl   $0xc010f567,0x8(%esp)
c0108cb8:	c0 
c0108cb9:	c7 44 24 04 5d 01 00 	movl   $0x15d,0x4(%esp)
c0108cc0:	00 
c0108cc1:	c7 04 24 7c f5 10 c0 	movl   $0xc010f57c,(%esp)
c0108cc8:	e8 27 81 ff ff       	call   c0100df4 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108ccd:	c7 04 24 77 f7 10 c0 	movl   $0xc010f777,(%esp)
c0108cd4:	e8 8a 76 ff ff       	call   c0100363 <cprintf>
}
c0108cd9:	c9                   	leave  
c0108cda:	c3                   	ret    

c0108cdb <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108cdb:	55                   	push   %ebp
c0108cdc:	89 e5                	mov    %esp,%ebp
c0108cde:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108ce1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108ce8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ceb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cef:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cf2:	89 04 24             	mov    %eax,(%esp)
c0108cf5:	e8 9c f3 ff ff       	call   c0108096 <find_vma>
c0108cfa:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108cfd:	a1 38 44 1c c0       	mov    0xc01c4438,%eax
c0108d02:	83 c0 01             	add    $0x1,%eax
c0108d05:	a3 38 44 1c c0       	mov    %eax,0xc01c4438
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108d0a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108d0e:	74 0b                	je     c0108d1b <do_pgfault+0x40>
c0108d10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d13:	8b 40 04             	mov    0x4(%eax),%eax
c0108d16:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108d19:	76 18                	jbe    c0108d33 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108d1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d22:	c7 04 24 94 f7 10 c0 	movl   $0xc010f794,(%esp)
c0108d29:	e8 35 76 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108d2e:	e9 89 01 00 00       	jmp    c0108ebc <do_pgfault+0x1e1>
    }
    //check the error_code
    switch (error_code & 3) {
c0108d33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d36:	83 e0 03             	and    $0x3,%eax
c0108d39:	85 c0                	test   %eax,%eax
c0108d3b:	74 34                	je     c0108d71 <do_pgfault+0x96>
c0108d3d:	83 f8 01             	cmp    $0x1,%eax
c0108d40:	74 1e                	je     c0108d60 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108d42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d45:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d48:	83 e0 02             	and    $0x2,%eax
c0108d4b:	85 c0                	test   %eax,%eax
c0108d4d:	75 40                	jne    c0108d8f <do_pgfault+0xb4>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108d4f:	c7 04 24 c4 f7 10 c0 	movl   $0xc010f7c4,(%esp)
c0108d56:	e8 08 76 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108d5b:	e9 5c 01 00 00       	jmp    c0108ebc <do_pgfault+0x1e1>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108d60:	c7 04 24 24 f8 10 c0 	movl   $0xc010f824,(%esp)
c0108d67:	e8 f7 75 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108d6c:	e9 4b 01 00 00       	jmp    c0108ebc <do_pgfault+0x1e1>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108d71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d74:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d77:	83 e0 05             	and    $0x5,%eax
c0108d7a:	85 c0                	test   %eax,%eax
c0108d7c:	75 12                	jne    c0108d90 <do_pgfault+0xb5>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108d7e:	c7 04 24 5c f8 10 c0 	movl   $0xc010f85c,(%esp)
c0108d85:	e8 d9 75 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108d8a:	e9 2d 01 00 00       	jmp    c0108ebc <do_pgfault+0x1e1>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0108d8f:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108d90:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108d97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d9a:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d9d:	83 e0 02             	and    $0x2,%eax
c0108da0:	85 c0                	test   %eax,%eax
c0108da2:	74 04                	je     c0108da8 <do_pgfault+0xcd>
        perm |= PTE_W;
c0108da4:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108da8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108dab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108dae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108db1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108db6:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108db9:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108dc0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    if (*ptep == 0) {
                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr

    }
#endif
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL)
c0108dc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dca:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dcd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108dd4:	00 
c0108dd5:	8b 55 10             	mov    0x10(%ebp),%edx
c0108dd8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ddc:	89 04 24             	mov    %eax,(%esp)
c0108ddf:	e8 b2 cb ff ff       	call   c0105996 <get_pte>
c0108de4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108de7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108deb:	0f 84 ca 00 00 00    	je     c0108ebb <do_pgfault+0x1e0>
        goto failed;
    if (*ptep == 0) {
c0108df1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108df4:	8b 00                	mov    (%eax),%eax
c0108df6:	85 c0                	test   %eax,%eax
c0108df8:	75 29                	jne    c0108e23 <do_pgfault+0x148>
       if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL)
c0108dfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dfd:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e00:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e03:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108e07:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e0a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e0e:	89 04 24             	mov    %eax,(%esp)
c0108e11:	e8 0f d3 ff ff       	call   c0106125 <pgdir_alloc_page>
c0108e16:	85 c0                	test   %eax,%eax
c0108e18:	0f 85 94 00 00 00    	jne    c0108eb2 <do_pgfault+0x1d7>
          goto failed;
c0108e1e:	e9 99 00 00 00       	jmp    c0108ebc <do_pgfault+0x1e1>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
*/
       if (swap_init_ok) {
c0108e23:	a1 2c 44 1c c0       	mov    0xc01c442c,%eax
c0108e28:	85 c0                	test   %eax,%eax
c0108e2a:	74 6f                	je     c0108e9b <do_pgfault+0x1c0>
	  struct Page *page = NULL;
c0108e2c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
          if ((ret = swap_in(mm, addr, &page)) != 0)
c0108e33:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108e36:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e3a:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e41:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e44:	89 04 24             	mov    %eax,(%esp)
c0108e47:	e8 84 e3 ff ff       	call   c01071d0 <swap_in>
c0108e4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108e4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e53:	75 67                	jne    c0108ebc <do_pgfault+0x1e1>
             goto failed;
          page_insert(mm->pgdir, page, addr, perm);
c0108e55:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e5b:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e5e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108e61:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108e65:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108e68:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108e6c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e70:	89 04 24             	mov    %eax,(%esp)
c0108e73:	e8 92 d1 ff ff       	call   c010600a <page_insert>
          //page->pra_vaddr = addr;
          swap_map_swappable(mm, addr, page, 0);
c0108e78:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108e7b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108e82:	00 
c0108e83:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e87:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e91:	89 04 24             	mov    %eax,(%esp)
c0108e94:	e8 6e e1 ff ff       	call   c0107007 <swap_map_swappable>
c0108e99:	eb 17                	jmp    c0108eb2 <do_pgfault+0x1d7>
       }
       else {
           cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108e9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e9e:	8b 00                	mov    (%eax),%eax
c0108ea0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ea4:	c7 04 24 c0 f8 10 c0 	movl   $0xc010f8c0,(%esp)
c0108eab:	e8 b3 74 ff ff       	call   c0100363 <cprintf>
           goto failed;
c0108eb0:	eb 0a                	jmp    c0108ebc <do_pgfault+0x1e1>
       }
    }
   ret = 0;
c0108eb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108eb9:	eb 01                	jmp    c0108ebc <do_pgfault+0x1e1>
                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr

    }
#endif
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL)
        goto failed;
c0108ebb:	90                   	nop
           goto failed;
       }
    }
   ret = 0;
failed:
    return ret;
c0108ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108ebf:	c9                   	leave  
c0108ec0:	c3                   	ret    

c0108ec1 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108ec1:	55                   	push   %ebp
c0108ec2:	89 e5                	mov    %esp,%ebp
c0108ec4:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108ec7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108ecb:	0f 84 e0 00 00 00    	je     c0108fb1 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108ed1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108ed8:	76 1c                	jbe    c0108ef6 <user_mem_check+0x35>
c0108eda:	8b 45 10             	mov    0x10(%ebp),%eax
c0108edd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108ee0:	01 d0                	add    %edx,%eax
c0108ee2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108ee5:	76 0f                	jbe    c0108ef6 <user_mem_check+0x35>
c0108ee7:	8b 45 10             	mov    0x10(%ebp),%eax
c0108eea:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108eed:	01 d0                	add    %edx,%eax
c0108eef:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108ef4:	76 0a                	jbe    c0108f00 <user_mem_check+0x3f>
            return 0;
c0108ef6:	b8 00 00 00 00       	mov    $0x0,%eax
c0108efb:	e9 e2 00 00 00       	jmp    c0108fe2 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108f00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f03:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108f06:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f09:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f0c:	01 d0                	add    %edx,%eax
c0108f0e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108f11:	e9 88 00 00 00       	jmp    c0108f9e <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108f16:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f20:	89 04 24             	mov    %eax,(%esp)
c0108f23:	e8 6e f1 ff ff       	call   c0108096 <find_vma>
c0108f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f2f:	74 0b                	je     c0108f3c <user_mem_check+0x7b>
c0108f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f34:	8b 40 04             	mov    0x4(%eax),%eax
c0108f37:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108f3a:	76 0a                	jbe    c0108f46 <user_mem_check+0x85>
                return 0;
c0108f3c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f41:	e9 9c 00 00 00       	jmp    c0108fe2 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f49:	8b 50 0c             	mov    0xc(%eax),%edx
c0108f4c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108f50:	74 07                	je     c0108f59 <user_mem_check+0x98>
c0108f52:	b8 02 00 00 00       	mov    $0x2,%eax
c0108f57:	eb 05                	jmp    c0108f5e <user_mem_check+0x9d>
c0108f59:	b8 01 00 00 00       	mov    $0x1,%eax
c0108f5e:	21 d0                	and    %edx,%eax
c0108f60:	85 c0                	test   %eax,%eax
c0108f62:	75 07                	jne    c0108f6b <user_mem_check+0xaa>
                return 0;
c0108f64:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f69:	eb 77                	jmp    c0108fe2 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108f6b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108f6f:	74 24                	je     c0108f95 <user_mem_check+0xd4>
c0108f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f74:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f77:	83 e0 08             	and    $0x8,%eax
c0108f7a:	85 c0                	test   %eax,%eax
c0108f7c:	74 17                	je     c0108f95 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f81:	8b 40 04             	mov    0x4(%eax),%eax
c0108f84:	05 00 10 00 00       	add    $0x1000,%eax
c0108f89:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108f8c:	76 07                	jbe    c0108f95 <user_mem_check+0xd4>
                    return 0;
c0108f8e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f93:	eb 4d                	jmp    c0108fe2 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0108f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f98:	8b 40 08             	mov    0x8(%eax),%eax
c0108f9b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0108f9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108fa1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0108fa4:	0f 82 6c ff ff ff    	jb     c0108f16 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0108faa:	b8 01 00 00 00       	mov    $0x1,%eax
c0108faf:	eb 31                	jmp    c0108fe2 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0108fb1:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0108fb8:	76 23                	jbe    c0108fdd <user_mem_check+0x11c>
c0108fba:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fbd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108fc0:	01 d0                	add    %edx,%eax
c0108fc2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108fc5:	76 16                	jbe    c0108fdd <user_mem_check+0x11c>
c0108fc7:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fca:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108fcd:	01 d0                	add    %edx,%eax
c0108fcf:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0108fd4:	77 07                	ja     c0108fdd <user_mem_check+0x11c>
c0108fd6:	b8 01 00 00 00       	mov    $0x1,%eax
c0108fdb:	eb 05                	jmp    c0108fe2 <user_mem_check+0x121>
c0108fdd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108fe2:	c9                   	leave  
c0108fe3:	c3                   	ret    

c0108fe4 <myrand>:
struct proc_struct *user_proc_sema[USER_NUM];
struct proc_struct *cinema_proc_sema;

volatile int wait_num[N];     // the number of users waiting for film i

uint32_t myrand() {  //A simple random number generator
c0108fe4:	55                   	push   %ebp
c0108fe5:	89 e5                	mov    %esp,%ebp
c0108fe7:	83 ec 28             	sub    $0x28,%esp
   down(&rand_s);
c0108fea:	c7 04 24 e0 65 1c c0 	movl   $0xc01c65e0,(%esp)
c0108ff1:	e8 92 0e 00 00       	call   c0109e88 <down>
   seed1 = 36969 * (seed1 & 65535) + (seed1 >> 16);
c0108ff6:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c0108ffb:	25 ff ff 00 00       	and    $0xffff,%eax
c0109000:	69 c0 69 90 00 00    	imul   $0x9069,%eax,%eax
c0109006:	8b 15 80 2a 13 c0    	mov    0xc0132a80,%edx
c010900c:	c1 ea 10             	shr    $0x10,%edx
c010900f:	01 d0                	add    %edx,%eax
c0109011:	a3 80 2a 13 c0       	mov    %eax,0xc0132a80
   seed2 = 18000 * (seed2 & 65535) + (seed2 >> 16);
c0109016:	a1 84 2a 13 c0       	mov    0xc0132a84,%eax
c010901b:	25 ff ff 00 00       	and    $0xffff,%eax
c0109020:	69 c0 50 46 00 00    	imul   $0x4650,%eax,%eax
c0109026:	8b 15 84 2a 13 c0    	mov    0xc0132a84,%edx
c010902c:	c1 ea 10             	shr    $0x10,%edx
c010902f:	01 d0                	add    %edx,%eax
c0109031:	a3 84 2a 13 c0       	mov    %eax,0xc0132a84
   uint32_t re = (seed1 << 16) + seed2;
c0109036:	a1 80 2a 13 c0       	mov    0xc0132a80,%eax
c010903b:	89 c2                	mov    %eax,%edx
c010903d:	c1 e2 10             	shl    $0x10,%edx
c0109040:	a1 84 2a 13 c0       	mov    0xc0132a84,%eax
c0109045:	01 d0                	add    %edx,%eax
c0109047:	89 45 f4             	mov    %eax,-0xc(%ebp)
   up(&rand_s);
c010904a:	c7 04 24 e0 65 1c c0 	movl   $0xc01c65e0,(%esp)
c0109051:	e8 17 0e 00 00       	call   c0109e6d <up>
   return re; 
c0109056:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109059:	c9                   	leave  
c010905a:	c3                   	ret    

c010905b <switch_film_sema>:

int switch_film_sema(int arg) {
c010905b:	55                   	push   %ebp
c010905c:	89 e5                	mov    %esp,%ebp
c010905e:	83 ec 38             	sub    $0x38,%esp
     int j;
     int tmp[N];          // A temporary array
     while (1) {
        down(&current_s);           //Lock the variable current
c0109061:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c0109068:	e8 1b 0e 00 00       	call   c0109e88 <down>

        int tot = 0;
c010906d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        int pre = current_sema;
c0109074:	a1 ec 65 1c c0       	mov    0xc01c65ec,%eax
c0109079:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (j = 0; j < N; j++)
c010907c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109083:	eb 20                	jmp    c01090a5 <switch_film_sema+0x4a>
           if (wait_num[j] > 0)
c0109085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109088:	8b 04 85 28 67 1c c0 	mov    -0x3fe398d8(,%eax,4),%eax
c010908f:	85 c0                	test   %eax,%eax
c0109091:	7e 0e                	jle    c01090a1 <switch_film_sema+0x46>
              tmp[tot++] = j;      //Find all films for which there is someone waiting.
c0109093:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109096:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109099:	89 54 85 e0          	mov    %edx,-0x20(%ebp,%eax,4)
c010909d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
     while (1) {
        down(&current_s);           //Lock the variable current

        int tot = 0;
        int pre = current_sema;
        for (j = 0; j < N; j++)
c01090a1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01090a5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
c01090a9:	7e da                	jle    c0109085 <switch_film_sema+0x2a>
           if (wait_num[j] > 0)
              tmp[tot++] = j;      //Find all films for which there is someone waiting.
        if (tot == 0) {            //No body is waiting.
c01090ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01090af:	75 24                	jne    c01090d5 <switch_film_sema+0x7a>
           current_sema = -1;
c01090b1:	c7 05 ec 65 1c c0 ff 	movl   $0xffffffff,0xc01c65ec
c01090b8:	ff ff ff 
           cprintf("Semaphore: The cinema stops to play film since there is no waiting user.\n");
c01090bb:	c7 04 24 e8 f8 10 c0 	movl   $0xc010f8e8,(%esp)
c01090c2:	e8 9c 72 ff ff       	call   c0100363 <cprintf>
           up(&current_s);
c01090c7:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c01090ce:	e8 9a 0d 00 00       	call   c0109e6d <up>
c01090d3:	eb 5e                	jmp    c0109133 <switch_film_sema+0xd8>
        }
        else {
          current_sema = tmp[myrand() % tot];  //Choose a random film for which there is users waiting.
c01090d5:	e8 0a ff ff ff       	call   c0108fe4 <myrand>
c01090da:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01090dd:	ba 00 00 00 00       	mov    $0x0,%edx
c01090e2:	f7 f1                	div    %ecx
c01090e4:	89 d0                	mov    %edx,%eax
c01090e6:	8b 44 85 e0          	mov    -0x20(%ebp,%eax,4),%eax
c01090ea:	a3 ec 65 1c c0       	mov    %eax,0xc01c65ec
                                        //The reason to do this is to avoid the situation that 
                                        //there is a film never playing.
                                        //A better solution is choose a film according to some
                                        //workload balance principle. 
          cprintf("Semaphore: The cinema starts to play film %d from film %d.\n", current_sema, pre);
c01090ef:	a1 ec 65 1c c0       	mov    0xc01c65ec,%eax
c01090f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01090f7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01090fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090ff:	c7 04 24 34 f9 10 c0 	movl   $0xc010f934,(%esp)
c0109106:	e8 58 72 ff ff       	call   c0100363 <cprintf>
          up(&current_s);
c010910b:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c0109112:	e8 56 0d 00 00       	call   c0109e6d <up>
          up(&film_s[current_sema]);
c0109117:	8b 15 ec 65 1c c0    	mov    0xc01c65ec,%edx
c010911d:	89 d0                	mov    %edx,%eax
c010911f:	01 c0                	add    %eax,%eax
c0109121:	01 d0                	add    %edx,%eax
c0109123:	c1 e0 02             	shl    $0x2,%eax
c0109126:	05 40 66 1c c0       	add    $0xc01c6640,%eax
c010912b:	89 04 24             	mov    %eax,(%esp)
c010912e:	e8 3a 0d 00 00       	call   c0109e6d <up>
        }
        if (pre != -1)
c0109133:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0109137:	74 19                	je     c0109152 <switch_film_sema+0xf7>
           up(&wait_num_s[pre]);
c0109139:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010913c:	89 d0                	mov    %edx,%eax
c010913e:	01 c0                	add    %eax,%eax
c0109140:	01 d0                	add    %edx,%eax
c0109142:	c1 e0 02             	shl    $0x2,%eax
c0109145:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c010914a:	89 04 24             	mov    %eax,(%esp)
c010914d:	e8 1b 0d 00 00       	call   c0109e6d <up>
        cprintf("Semaphore: The cinema is waiting for the next switch\n");
c0109152:	c7 04 24 70 f9 10 c0 	movl   $0xc010f970,(%esp)
c0109159:	e8 05 72 ff ff       	call   c0100363 <cprintf>
        down(&cinema_s);
c010915e:	c7 04 24 34 67 1c c0 	movl   $0xc01c6734,(%esp)
c0109165:	e8 1e 0d 00 00       	call   c0109e88 <down>
    }
c010916a:	e9 f2 fe ff ff       	jmp    c0109061 <switch_film_sema+0x6>

c010916f <try_to_watch_sema>:
    return 0;
}

void try_to_watch_sema(int i) {
c010916f:	55                   	push   %ebp
c0109170:	89 e5                	mov    %esp,%ebp
c0109172:	83 ec 18             	sub    $0x18,%esp
     down(&wait_num_s[i]);
c0109175:	8b 55 08             	mov    0x8(%ebp),%edx
c0109178:	89 d0                	mov    %edx,%eax
c010917a:	01 c0                	add    %eax,%eax
c010917c:	01 d0                	add    %edx,%eax
c010917e:	c1 e0 02             	shl    $0x2,%eax
c0109181:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c0109186:	89 04 24             	mov    %eax,(%esp)
c0109189:	e8 fa 0c 00 00       	call   c0109e88 <down>
     wait_num[i]++;
c010918e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109191:	8b 04 85 28 67 1c c0 	mov    -0x3fe398d8(,%eax,4),%eax
c0109198:	8d 50 01             	lea    0x1(%eax),%edx
c010919b:	8b 45 08             	mov    0x8(%ebp),%eax
c010919e:	89 14 85 28 67 1c c0 	mov    %edx,-0x3fe398d8(,%eax,4)
     down(&current_s);
c01091a5:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c01091ac:	e8 d7 0c 00 00       	call   c0109e88 <down>
     if (current_sema == -1) {
c01091b1:	a1 ec 65 1c c0       	mov    0xc01c65ec,%eax
c01091b6:	83 f8 ff             	cmp    $0xffffffff,%eax
c01091b9:	75 26                	jne    c01091e1 <try_to_watch_sema+0x72>
         cprintf("Semaphore: wake the cinema to switch the film.\n");
c01091bb:	c7 04 24 a8 f9 10 c0 	movl   $0xc010f9a8,(%esp)
c01091c2:	e8 9c 71 ff ff       	call   c0100363 <cprintf>
        up(&current_s);
c01091c7:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c01091ce:	e8 9a 0c 00 00       	call   c0109e6d <up>
        up(&cinema_s);
c01091d3:	c7 04 24 34 67 1c c0 	movl   $0xc01c6734,(%esp)
c01091da:	e8 8e 0c 00 00       	call   c0109e6d <up>
c01091df:	eb 0c                	jmp    c01091ed <try_to_watch_sema+0x7e>
     }
     else up(&current_s);
c01091e1:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c01091e8:	e8 80 0c 00 00       	call   c0109e6d <up>
     while (1) {
        down(&current_s);
c01091ed:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c01091f4:	e8 8f 0c 00 00       	call   c0109e88 <down>
        if (current_sema == i) {
c01091f9:	a1 ec 65 1c c0       	mov    0xc01c65ec,%eax
c01091fe:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109201:	75 28                	jne    c010922b <try_to_watch_sema+0xbc>
           up(&current_s); 
c0109203:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c010920a:	e8 5e 0c 00 00       	call   c0109e6d <up>
           break;
c010920f:	90                   	nop
        }
        up(&current_s);
        down(&film_s[i]); //If the current playing film is not i, then waiting.
     }   
     up(&wait_num_s[i]);
c0109210:	8b 55 08             	mov    0x8(%ebp),%edx
c0109213:	89 d0                	mov    %edx,%eax
c0109215:	01 c0                	add    %eax,%eax
c0109217:	01 d0                	add    %edx,%eax
c0109219:	c1 e0 02             	shl    $0x2,%eax
c010921c:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c0109221:	89 04 24             	mov    %eax,(%esp)
c0109224:	e8 44 0c 00 00       	call   c0109e6d <up>
c0109229:	eb 27                	jmp    c0109252 <try_to_watch_sema+0xe3>
        down(&current_s);
        if (current_sema == i) {
           up(&current_s); 
           break;
        }
        up(&current_s);
c010922b:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c0109232:	e8 36 0c 00 00       	call   c0109e6d <up>
        down(&film_s[i]); //If the current playing film is not i, then waiting.
c0109237:	8b 55 08             	mov    0x8(%ebp),%edx
c010923a:	89 d0                	mov    %edx,%eax
c010923c:	01 c0                	add    %eax,%eax
c010923e:	01 d0                	add    %edx,%eax
c0109240:	c1 e0 02             	shl    $0x2,%eax
c0109243:	05 40 66 1c c0       	add    $0xc01c6640,%eax
c0109248:	89 04 24             	mov    %eax,(%esp)
c010924b:	e8 38 0c 00 00       	call   c0109e88 <down>
     }   
c0109250:	eb 9b                	jmp    c01091ed <try_to_watch_sema+0x7e>
     up(&wait_num_s[i]);
}
c0109252:	c9                   	leave  
c0109253:	c3                   	ret    

c0109254 <quit_watch_sema>:

void quit_watch_sema(int i) {
c0109254:	55                   	push   %ebp
c0109255:	89 e5                	mov    %esp,%ebp
c0109257:	83 ec 18             	sub    $0x18,%esp
     down(&wait_num_s[i]);
c010925a:	8b 55 08             	mov    0x8(%ebp),%edx
c010925d:	89 d0                	mov    %edx,%eax
c010925f:	01 c0                	add    %eax,%eax
c0109261:	01 d0                	add    %edx,%eax
c0109263:	c1 e0 02             	shl    $0x2,%eax
c0109266:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c010926b:	89 04 24             	mov    %eax,(%esp)
c010926e:	e8 15 0c 00 00       	call   c0109e88 <down>
     wait_num[i]--;
c0109273:	8b 45 08             	mov    0x8(%ebp),%eax
c0109276:	8b 04 85 28 67 1c c0 	mov    -0x3fe398d8(,%eax,4),%eax
c010927d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109280:	8b 45 08             	mov    0x8(%ebp),%eax
c0109283:	89 14 85 28 67 1c c0 	mov    %edx,-0x3fe398d8(,%eax,4)
     if (wait_num[i] == 0) {
c010928a:	8b 45 08             	mov    0x8(%ebp),%eax
c010928d:	8b 04 85 28 67 1c c0 	mov    -0x3fe398d8(,%eax,4),%eax
c0109294:	85 c0                	test   %eax,%eax
c0109296:	75 3a                	jne    c01092d2 <quit_watch_sema+0x7e>
        cprintf("Semaphore: No user watching film %d, wake cinema to switch.\n", i);
c0109298:	8b 45 08             	mov    0x8(%ebp),%eax
c010929b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010929f:	c7 04 24 d8 f9 10 c0 	movl   $0xc010f9d8,(%esp)
c01092a6:	e8 b8 70 ff ff       	call   c0100363 <cprintf>
        up(&cinema_s);
c01092ab:	c7 04 24 34 67 1c c0 	movl   $0xc01c6734,(%esp)
c01092b2:	e8 b6 0b 00 00       	call   c0109e6d <up>
        down(&wait_num_s[i]);   //Lock the film i to avoid there is no switching occurs
c01092b7:	8b 55 08             	mov    0x8(%ebp),%edx
c01092ba:	89 d0                	mov    %edx,%eax
c01092bc:	01 c0                	add    %eax,%eax
c01092be:	01 d0                	add    %edx,%eax
c01092c0:	c1 e0 02             	shl    $0x2,%eax
c01092c3:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c01092c8:	89 04 24             	mov    %eax,(%esp)
c01092cb:	e8 b8 0b 00 00       	call   c0109e88 <down>
c01092d0:	eb 19                	jmp    c01092eb <quit_watch_sema+0x97>
                                //And unlock it when a switching is done.
     }
     else up(&film_s[i]);
c01092d2:	8b 55 08             	mov    0x8(%ebp),%edx
c01092d5:	89 d0                	mov    %edx,%eax
c01092d7:	01 c0                	add    %eax,%eax
c01092d9:	01 d0                	add    %edx,%eax
c01092db:	c1 e0 02             	shl    $0x2,%eax
c01092de:	05 40 66 1c c0       	add    $0xc01c6640,%eax
c01092e3:	89 04 24             	mov    %eax,(%esp)
c01092e6:	e8 82 0b 00 00       	call   c0109e6d <up>
     up(&wait_num_s[i]);
c01092eb:	8b 55 08             	mov    0x8(%ebp),%edx
c01092ee:	89 d0                	mov    %edx,%eax
c01092f0:	01 c0                	add    %eax,%eax
c01092f2:	01 d0                	add    %edx,%eax
c01092f4:	c1 e0 02             	shl    $0x2,%eax
c01092f7:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c01092fc:	89 04 24             	mov    %eax,(%esp)
c01092ff:	e8 69 0b 00 00       	call   c0109e6d <up>
}
c0109304:	c9                   	leave  
c0109305:	c3                   	ret    

c0109306 <watch_film_sema>:

void watch_film_sema(int i)  {  // The process of the user id to watch film i
c0109306:	55                   	push   %ebp
c0109307:	89 e5                	mov    %esp,%ebp
c0109309:	83 ec 28             	sub    $0x28,%esp
     down(&id_num_s);
c010930c:	c7 04 24 64 66 1c c0 	movl   $0xc01c6664,(%esp)
c0109313:	e8 70 0b 00 00       	call   c0109e88 <down>
     int id = id_num++;
c0109318:	a1 e0 66 1c c0       	mov    0xc01c66e0,%eax
c010931d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109320:	83 c0 01             	add    $0x1,%eax
c0109323:	a3 e0 66 1c c0       	mov    %eax,0xc01c66e0
     up(&id_num_s);
c0109328:	c7 04 24 64 66 1c c0 	movl   $0xc01c6664,(%esp)
c010932f:	e8 39 0b 00 00       	call   c0109e6d <up>
     try_to_watch_sema(i);
c0109334:	8b 45 08             	mov    0x8(%ebp),%eax
c0109337:	89 04 24             	mov    %eax,(%esp)
c010933a:	e8 30 fe ff ff       	call   c010916f <try_to_watch_sema>

     cprintf("Semaphore: The user %d is watching film %d.\n", id, i);
c010933f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109342:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109346:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109349:	89 44 24 04          	mov    %eax,0x4(%esp)
c010934d:	c7 04 24 18 fa 10 c0 	movl   $0xc010fa18,(%esp)
c0109354:	e8 0a 70 ff ff       	call   c0100363 <cprintf>
     do_sleep(SLEEP_TIME);
c0109359:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
c0109360:	e8 83 2e 00 00       	call   c010c1e8 <do_sleep>
     cprintf("Semaphore: The user %d finishes watching film %d\n", id, i);
c0109365:	8b 45 08             	mov    0x8(%ebp),%eax
c0109368:	89 44 24 08          	mov    %eax,0x8(%esp)
c010936c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010936f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109373:	c7 04 24 48 fa 10 c0 	movl   $0xc010fa48,(%esp)
c010937a:	e8 e4 6f ff ff       	call   c0100363 <cprintf>

     quit_watch_sema(i);
c010937f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109382:	89 04 24             	mov    %eax,(%esp)
c0109385:	e8 ca fe ff ff       	call   c0109254 <quit_watch_sema>
}
c010938a:	c9                   	leave  
c010938b:	c3                   	ret    

c010938c <switch_film_monitor>:
int current_monitor;
int num_waiting_monitor[N];
struct proc_struct *user_proc_monitor[USER_NUM];
struct proc_struct *cinema_proc_monitor;

int switch_film_monitor(int arg) {
c010938c:	55                   	push   %ebp
c010938d:	89 e5                	mov    %esp,%ebp
c010938f:	83 ec 38             	sub    $0x38,%esp
int j;
int tmp[N];          // A temporary array
while (1) {
     down(&(mtp->mutex));    //Enter a monitor routine
c0109392:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109397:	89 04 24             	mov    %eax,(%esp)
c010939a:	e8 e9 0a 00 00       	call   c0109e88 <down>
     int tot = 0;
c010939f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     int pre = current_monitor;
c01093a6:	a1 74 66 1c c0       	mov    0xc01c6674,%eax
c01093ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
     for (j = 0; j < N; j++)
c01093ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01093b5:	eb 20                	jmp    c01093d7 <switch_film_monitor+0x4b>
         if (num_waiting_monitor[j] > 0)
c01093b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093ba:	8b 04 85 f0 66 1c c0 	mov    -0x3fe39910(,%eax,4),%eax
c01093c1:	85 c0                	test   %eax,%eax
c01093c3:	7e 0e                	jle    c01093d3 <switch_film_monitor+0x47>
            tmp[tot++] = j;      //Find all films for which there is someone wait
c01093c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01093cb:	89 54 85 e0          	mov    %edx,-0x20(%ebp,%eax,4)
c01093cf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
int tmp[N];          // A temporary array
while (1) {
     down(&(mtp->mutex));    //Enter a monitor routine
     int tot = 0;
     int pre = current_monitor;
     for (j = 0; j < N; j++)
c01093d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01093d7:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
c01093db:	7e da                	jle    c01093b7 <switch_film_monitor+0x2b>
         if (num_waiting_monitor[j] > 0)
            tmp[tot++] = j;      //Find all films for which there is someone wait
     if (tot == 0) {            //No body is waiting.
c01093dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01093e1:	75 18                	jne    c01093fb <switch_film_monitor+0x6f>
         current_monitor = -1;
c01093e3:	c7 05 74 66 1c c0 ff 	movl   $0xffffffff,0xc01c6674
c01093ea:	ff ff ff 
         cprintf("Monitor: The cinema stops to play film since there is no waiting user.\n");
c01093ed:	c7 04 24 7c fa 10 c0 	movl   $0xc010fa7c,(%esp)
c01093f4:	e8 6a 6f ff ff       	call   c0100363 <cprintf>
c01093f9:	eb 59                	jmp    c0109454 <switch_film_monitor+0xc8>
     }
     else {
         current_monitor = tmp[myrand() % tot];  //Choose a random film for which there is users waiting.
c01093fb:	e8 e4 fb ff ff       	call   c0108fe4 <myrand>
c0109400:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109403:	ba 00 00 00 00       	mov    $0x0,%edx
c0109408:	f7 f1                	div    %ecx
c010940a:	89 d0                	mov    %edx,%eax
c010940c:	8b 44 85 e0          	mov    -0x20(%ebp,%eax,4),%eax
c0109410:	a3 74 66 1c c0       	mov    %eax,0xc01c6674
                                        //The reason to do this is to avoid the situation that 
                                        //there is a film never playing.
                                        //A better solution is choose a film according to some
                                        //workload balance principle. 
         cprintf("Monitor: The cinema starts to play film %d from film %d.\n", current_monitor, pre);
c0109415:	a1 74 66 1c c0       	mov    0xc01c6674,%eax
c010941a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010941d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109421:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109425:	c7 04 24 c4 fa 10 c0 	movl   $0xc010fac4,(%esp)
c010942c:	e8 32 6f ff ff       	call   c0100363 <cprintf>
         cond_signal(&mtp->cv[current_monitor]);
c0109431:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109436:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109439:	a1 74 66 1c c0       	mov    0xc01c6674,%eax
c010943e:	89 c2                	mov    %eax,%edx
c0109440:	89 d0                	mov    %edx,%eax
c0109442:	c1 e0 02             	shl    $0x2,%eax
c0109445:	01 d0                	add    %edx,%eax
c0109447:	c1 e0 02             	shl    $0x2,%eax
c010944a:	01 c8                	add    %ecx,%eax
c010944c:	89 04 24             	mov    %eax,(%esp)
c010944f:	e8 0e 07 00 00       	call   c0109b62 <cond_signal>
     }
     cprintf("Monitor: The cinema is waiting for the next switch\n");
c0109454:	c7 04 24 00 fb 10 c0 	movl   $0xc010fb00,(%esp)
c010945b:	e8 03 6f ff ff       	call   c0100363 <cprintf>
     cond_wait(&mtp->cv[N]);
c0109460:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109465:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109468:	83 c0 3c             	add    $0x3c,%eax
c010946b:	89 04 24             	mov    %eax,(%esp)
c010946e:	e8 8f 07 00 00       	call   c0109c02 <cond_wait>
     if(mtp->next_count>0)   //Leave a monitor routine
c0109473:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109478:	8b 40 18             	mov    0x18(%eax),%eax
c010947b:	85 c0                	test   %eax,%eax
c010947d:	7e 15                	jle    c0109494 <switch_film_monitor+0x108>
        up(&(mtp->next));
c010947f:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109484:	83 c0 0c             	add    $0xc,%eax
c0109487:	89 04 24             	mov    %eax,(%esp)
c010948a:	e8 de 09 00 00       	call   c0109e6d <up>
     else
        up(&(mtp->mutex));
}
c010948f:	e9 fe fe ff ff       	jmp    c0109392 <switch_film_monitor+0x6>
     cprintf("Monitor: The cinema is waiting for the next switch\n");
     cond_wait(&mtp->cv[N]);
     if(mtp->next_count>0)   //Leave a monitor routine
        up(&(mtp->next));
     else
        up(&(mtp->mutex));
c0109494:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109499:	89 04 24             	mov    %eax,(%esp)
c010949c:	e8 cc 09 00 00       	call   c0109e6d <up>
}
c01094a1:	e9 ec fe ff ff       	jmp    c0109392 <switch_film_monitor+0x6>

c01094a6 <try_to_watch_monitor>:
return 0;
}

void try_to_watch_monitor(int id, int i)  {  // The user id want to watch film i
c01094a6:	55                   	push   %ebp
c01094a7:	89 e5                	mov    %esp,%ebp
c01094a9:	83 ec 18             	sub    $0x18,%esp
cprintf("monitor %d %d\n", id, i);
c01094ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01094b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094ba:	c7 04 24 34 fb 10 c0 	movl   $0xc010fb34,(%esp)
c01094c1:	e8 9d 6e ff ff       	call   c0100363 <cprintf>
     down(&(mtp->mutex));    //Enter a monitor routine
c01094c6:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01094cb:	89 04 24             	mov    %eax,(%esp)
c01094ce:	e8 b5 09 00 00       	call   c0109e88 <down>
     
     num_waiting_monitor[i]++;
c01094d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094d6:	8b 04 85 f0 66 1c c0 	mov    -0x3fe39910(,%eax,4),%eax
c01094dd:	8d 50 01             	lea    0x1(%eax),%edx
c01094e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094e3:	89 14 85 f0 66 1c c0 	mov    %edx,-0x3fe39910(,%eax,4)

     if (current_monitor == -1)     //No film is playing
c01094ea:	a1 74 66 1c c0       	mov    0xc01c6674,%eax
c01094ef:	83 f8 ff             	cmp    $0xffffffff,%eax
c01094f2:	75 13                	jne    c0109507 <try_to_watch_monitor+0x61>
        cond_signal(&mtp->cv[N]); //Wake the cinema process to allocate a new film
c01094f4:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01094f9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01094fc:	83 c0 3c             	add    $0x3c,%eax
c01094ff:	89 04 24             	mov    %eax,(%esp)
c0109502:	e8 5b 06 00 00       	call   c0109b62 <cond_signal>

     if (current_monitor != i)     
c0109507:	a1 74 66 1c c0       	mov    0xc01c6674,%eax
c010950c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010950f:	74 1f                	je     c0109530 <try_to_watch_monitor+0x8a>
        cond_wait(&mtp->cv[i]);  //Wait if the current playing movie is not i
c0109511:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109516:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109519:	8b 55 0c             	mov    0xc(%ebp),%edx
c010951c:	89 d0                	mov    %edx,%eax
c010951e:	c1 e0 02             	shl    $0x2,%eax
c0109521:	01 d0                	add    %edx,%eax
c0109523:	c1 e0 02             	shl    $0x2,%eax
c0109526:	01 c8                	add    %ecx,%eax
c0109528:	89 04 24             	mov    %eax,(%esp)
c010952b:	e8 d2 06 00 00       	call   c0109c02 <cond_wait>
    
     if(mtp->next_count>0)   //Leave a monitor routine
c0109530:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109535:	8b 40 18             	mov    0x18(%eax),%eax
c0109538:	85 c0                	test   %eax,%eax
c010953a:	7e 12                	jle    c010954e <try_to_watch_monitor+0xa8>
        up(&(mtp->next));
c010953c:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109541:	83 c0 0c             	add    $0xc,%eax
c0109544:	89 04 24             	mov    %eax,(%esp)
c0109547:	e8 21 09 00 00       	call   c0109e6d <up>
c010954c:	eb 0d                	jmp    c010955b <try_to_watch_monitor+0xb5>
     else
        up(&(mtp->mutex));
c010954e:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109553:	89 04 24             	mov    %eax,(%esp)
c0109556:	e8 12 09 00 00       	call   c0109e6d <up>
}
c010955b:	c9                   	leave  
c010955c:	c3                   	ret    

c010955d <quit_watch_monitor>:

void quit_watch_monitor(int i) {
c010955d:	55                   	push   %ebp
c010955e:	89 e5                	mov    %esp,%ebp
c0109560:	83 ec 18             	sub    $0x18,%esp
    down(&(mtp->mutex));    //Enter a monitor routine
c0109563:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c0109568:	89 04 24             	mov    %eax,(%esp)
c010956b:	e8 18 09 00 00       	call   c0109e88 <down>
    
    num_waiting_monitor[i]--; 
c0109570:	8b 45 08             	mov    0x8(%ebp),%eax
c0109573:	8b 04 85 f0 66 1c c0 	mov    -0x3fe39910(,%eax,4),%eax
c010957a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010957d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109580:	89 14 85 f0 66 1c c0 	mov    %edx,-0x3fe39910(,%eax,4)
    if (num_waiting_monitor[i] == 0)  { //Nobody is watching the current film 
c0109587:	8b 45 08             	mov    0x8(%ebp),%eax
c010958a:	8b 04 85 f0 66 1c c0 	mov    -0x3fe39910(,%eax,4),%eax
c0109591:	85 c0                	test   %eax,%eax
c0109593:	75 21                	jne    c01095b6 <quit_watch_monitor+0x59>
       cprintf("Monitor: Try to wake the cinema\n");
c0109595:	c7 04 24 44 fb 10 c0 	movl   $0xc010fb44,(%esp)
c010959c:	e8 c2 6d ff ff       	call   c0100363 <cprintf>
       cond_signal(&mtp->cv[N]); //Wake the cinema process to allocate a new film
c01095a1:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01095a6:	8b 40 1c             	mov    0x1c(%eax),%eax
c01095a9:	83 c0 3c             	add    $0x3c,%eax
c01095ac:	89 04 24             	mov    %eax,(%esp)
c01095af:	e8 ae 05 00 00       	call   c0109b62 <cond_signal>
c01095b4:	eb 1f                	jmp    c01095d5 <quit_watch_monitor+0x78>
    }
    else cond_signal(&mtp->cv[i]);  //Wake the another guy is wathing the same film
c01095b6:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01095bb:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01095be:	8b 55 08             	mov    0x8(%ebp),%edx
c01095c1:	89 d0                	mov    %edx,%eax
c01095c3:	c1 e0 02             	shl    $0x2,%eax
c01095c6:	01 d0                	add    %edx,%eax
c01095c8:	c1 e0 02             	shl    $0x2,%eax
c01095cb:	01 c8                	add    %ecx,%eax
c01095cd:	89 04 24             	mov    %eax,(%esp)
c01095d0:	e8 8d 05 00 00       	call   c0109b62 <cond_signal>

    if(mtp->next_count>0)   //Leave a monitor routine
c01095d5:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01095da:	8b 40 18             	mov    0x18(%eax),%eax
c01095dd:	85 c0                	test   %eax,%eax
c01095df:	7e 12                	jle    c01095f3 <quit_watch_monitor+0x96>
       up(&(mtp->next));
c01095e1:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01095e6:	83 c0 0c             	add    $0xc,%eax
c01095e9:	89 04 24             	mov    %eax,(%esp)
c01095ec:	e8 7c 08 00 00       	call   c0109e6d <up>
c01095f1:	eb 0d                	jmp    c0109600 <quit_watch_monitor+0xa3>
    else
       up(&(mtp->mutex));
c01095f3:	a1 88 2a 13 c0       	mov    0xc0132a88,%eax
c01095f8:	89 04 24             	mov    %eax,(%esp)
c01095fb:	e8 6d 08 00 00       	call   c0109e6d <up>
}
c0109600:	c9                   	leave  
c0109601:	c3                   	ret    

c0109602 <watch_film_monitor>:

void watch_film_monitor(int i)  {  // The process of the user id to watch film i
c0109602:	55                   	push   %ebp
c0109603:	89 e5                	mov    %esp,%ebp
c0109605:	83 ec 28             	sub    $0x28,%esp
     down(&id_num_s);
c0109608:	c7 04 24 64 66 1c c0 	movl   $0xc01c6664,(%esp)
c010960f:	e8 74 08 00 00       	call   c0109e88 <down>
     int id = id_num++;
c0109614:	a1 e0 66 1c c0       	mov    0xc01c66e0,%eax
c0109619:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010961c:	83 c0 01             	add    $0x1,%eax
c010961f:	a3 e0 66 1c c0       	mov    %eax,0xc01c66e0
     up(&id_num_s);
c0109624:	c7 04 24 64 66 1c c0 	movl   $0xc01c6664,(%esp)
c010962b:	e8 3d 08 00 00       	call   c0109e6d <up>

     try_to_watch_monitor(id, i);
c0109630:	8b 45 08             	mov    0x8(%ebp),%eax
c0109633:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109637:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010963a:	89 04 24             	mov    %eax,(%esp)
c010963d:	e8 64 fe ff ff       	call   c01094a6 <try_to_watch_monitor>

     cprintf("Monitor: The user %d is watching film %d.\n", id, i);
c0109642:	8b 45 08             	mov    0x8(%ebp),%eax
c0109645:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109649:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010964c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109650:	c7 04 24 68 fb 10 c0 	movl   $0xc010fb68,(%esp)
c0109657:	e8 07 6d ff ff       	call   c0100363 <cprintf>
     do_sleep(SLEEP_TIME);
c010965c:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
c0109663:	e8 80 2b 00 00       	call   c010c1e8 <do_sleep>
     cprintf("Monitor: The user %d finishes watching film %d\n", id, i);
c0109668:	8b 45 08             	mov    0x8(%ebp),%eax
c010966b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010966f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109672:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109676:	c7 04 24 94 fb 10 c0 	movl   $0xc010fb94,(%esp)
c010967d:	e8 e1 6c ff ff       	call   c0100363 <cprintf>

     quit_watch_monitor(i);
c0109682:	8b 45 08             	mov    0x8(%ebp),%eax
c0109685:	89 04 24             	mov    %eax,(%esp)
c0109688:	e8 d0 fe ff ff       	call   c010955d <quit_watch_monitor>
}
c010968d:	c9                   	leave  
c010968e:	c3                   	ret    

c010968f <check_sync>:

void check_sync(void){
c010968f:	55                   	push   %ebp
c0109690:	89 e5                	mov    %esp,%ebp
c0109692:	83 ec 38             	sub    $0x38,%esp
    int i;

    cprintf("Start to check semaphore!\n");
c0109695:	c7 04 24 c4 fb 10 c0 	movl   $0xc010fbc4,(%esp)
c010969c:	e8 c2 6c ff ff       	call   c0100363 <cprintf>
    sem_init(&id_num_s, 1);
c01096a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01096a8:	00 
c01096a9:	c7 04 24 64 66 1c c0 	movl   $0xc01c6664,(%esp)
c01096b0:	e8 45 06 00 00       	call   c0109cfa <sem_init>
    //check semaphore
    id_num = 0;
c01096b5:	c7 05 e0 66 1c c0 00 	movl   $0x0,0xc01c66e0
c01096bc:	00 00 00 
    sem_init(&cinema_s, 0);
c01096bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01096c6:	00 
c01096c7:	c7 04 24 34 67 1c c0 	movl   $0xc01c6734,(%esp)
c01096ce:	e8 27 06 00 00       	call   c0109cfa <sem_init>
    sem_init(&current_s, 1);
c01096d3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01096da:	00 
c01096db:	c7 04 24 e4 66 1c c0 	movl   $0xc01c66e4,(%esp)
c01096e2:	e8 13 06 00 00       	call   c0109cfa <sem_init>
    sem_init(&rand_s, 1);
c01096e7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01096ee:	00 
c01096ef:	c7 04 24 e0 65 1c c0 	movl   $0xc01c65e0,(%esp)
c01096f6:	e8 ff 05 00 00       	call   c0109cfa <sem_init>
    for (i = 0; i < N; i++) {
c01096fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109702:	eb 54                	jmp    c0109758 <check_sync+0xc9>
       sem_init(&film_s[i], 1);
c0109704:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109707:	89 d0                	mov    %edx,%eax
c0109709:	01 c0                	add    %eax,%eax
c010970b:	01 d0                	add    %edx,%eax
c010970d:	c1 e0 02             	shl    $0x2,%eax
c0109710:	05 40 66 1c c0       	add    $0xc01c6640,%eax
c0109715:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010971c:	00 
c010971d:	89 04 24             	mov    %eax,(%esp)
c0109720:	e8 d5 05 00 00       	call   c0109cfa <sem_init>
       sem_init(&wait_num_s[i], 1);
c0109725:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109728:	89 d0                	mov    %edx,%eax
c010972a:	01 c0                	add    %eax,%eax
c010972c:	01 d0                	add    %edx,%eax
c010972e:	c1 e0 02             	shl    $0x2,%eax
c0109731:	05 80 66 1c c0       	add    $0xc01c6680,%eax
c0109736:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010973d:	00 
c010973e:	89 04 24             	mov    %eax,(%esp)
c0109741:	e8 b4 05 00 00       	call   c0109cfa <sem_init>
       wait_num[i] = 0;
c0109746:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109749:	c7 04 85 28 67 1c c0 	movl   $0x0,-0x3fe398d8(,%eax,4)
c0109750:	00 00 00 00 
    //check semaphore
    id_num = 0;
    sem_init(&cinema_s, 0);
    sem_init(&current_s, 1);
    sem_init(&rand_s, 1);
    for (i = 0; i < N; i++) {
c0109754:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109758:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
c010975c:	7e a6                	jle    c0109704 <check_sync+0x75>
       sem_init(&film_s[i], 1);
       sem_init(&wait_num_s[i], 1);
       wait_num[i] = 0;
    }
    current_sema = -1;
c010975e:	c7 05 ec 65 1c c0 ff 	movl   $0xffffffff,0xc01c65ec
c0109765:	ff ff ff 

    int pid = kernel_thread(switch_film_sema, NULL, 0);
c0109768:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010976f:	00 
c0109770:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109777:	00 
c0109778:	c7 04 24 5b 90 10 c0 	movl   $0xc010905b,(%esp)
c010977f:	e8 dc 15 00 00       	call   c010ad60 <kernel_thread>
c0109784:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0)
c0109787:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010978b:	7f 1c                	jg     c01097a9 <check_sync+0x11a>
       panic("create the cinema process with sema failed.\n");
c010978d:	c7 44 24 08 e0 fb 10 	movl   $0xc010fbe0,0x8(%esp)
c0109794:	c0 
c0109795:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010979c:	00 
c010979d:	c7 04 24 0d fc 10 c0 	movl   $0xc010fc0d,(%esp)
c01097a4:	e8 4b 76 ff ff       	call   c0100df4 <__panic>
    cinema_proc_sema = find_proc(pid); 
c01097a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097ac:	89 04 24             	mov    %eax,(%esp)
c01097af:	e8 38 15 00 00       	call   c010acec <find_proc>
c01097b4:	a3 40 67 1c c0       	mov    %eax,0xc01c6740
    set_proc_name(cinema_proc_sema, "cinema_sema_proc");
c01097b9:	a1 40 67 1c c0       	mov    0xc01c6740,%eax
c01097be:	c7 44 24 04 24 fc 10 	movl   $0xc010fc24,0x4(%esp)
c01097c5:	c0 
c01097c6:	89 04 24             	mov    %eax,(%esp)
c01097c9:	e8 05 11 00 00       	call   c010a8d3 <set_proc_name>
    do_sleep(1000);
c01097ce:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
c01097d5:	e8 0e 2a 00 00       	call   c010c1e8 <do_sleep>
    for (i = 0; i < USER_NUM; i++) {  
c01097da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01097e1:	e9 b6 00 00 00       	jmp    c010989c <check_sync+0x20d>
        uint32_t t = myrand() % N;  //a random film to watch
c01097e6:	e8 f9 f7 ff ff       	call   c0108fe4 <myrand>
c01097eb:	89 c1                	mov    %eax,%ecx
c01097ed:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
c01097f2:	89 c8                	mov    %ecx,%eax
c01097f4:	f7 e2                	mul    %edx
c01097f6:	89 d0                	mov    %edx,%eax
c01097f8:	d1 e8                	shr    %eax
c01097fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01097fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109800:	89 d0                	mov    %edx,%eax
c0109802:	01 c0                	add    %eax,%eax
c0109804:	01 d0                	add    %edx,%eax
c0109806:	89 ca                	mov    %ecx,%edx
c0109808:	29 c2                	sub    %eax,%edx
c010980a:	89 d0                	mov    %edx,%eax
c010980c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        cprintf("Semaphore: Create a user want to watch film %d.\n", t);
c010980f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109812:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109816:	c7 04 24 38 fc 10 c0 	movl   $0xc010fc38,(%esp)
c010981d:	e8 41 6b ff ff       	call   c0100363 <cprintf>
        int pid = kernel_thread(watch_film_sema, (void *) t, 0);
c0109822:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109825:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010982c:	00 
c010982d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109831:	c7 04 24 06 93 10 c0 	movl   $0xc0109306,(%esp)
c0109838:	e8 23 15 00 00       	call   c010ad60 <kernel_thread>
c010983d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (pid <= 0) {
c0109840:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109844:	7f 23                	jg     c0109869 <check_sync+0x1da>
            panic("create No.%d user with sema failed.\n", i);
c0109846:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109849:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010984d:	c7 44 24 08 6c fc 10 	movl   $0xc010fc6c,0x8(%esp)
c0109854:	c0 
c0109855:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010985c:	00 
c010985d:	c7 04 24 0d fc 10 c0 	movl   $0xc010fc0d,(%esp)
c0109864:	e8 8b 75 ff ff       	call   c0100df4 <__panic>
        }
        user_proc_sema[i] = find_proc(pid);
c0109869:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010986c:	89 04 24             	mov    %eax,(%esp)
c010986f:	e8 78 14 00 00       	call   c010acec <find_proc>
c0109874:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109877:	89 04 95 00 67 1c c0 	mov    %eax,-0x3fe39900(,%edx,4)
        set_proc_name(user_proc_sema[i], "user_sema_proc");
c010987e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109881:	8b 04 85 00 67 1c c0 	mov    -0x3fe39900(,%eax,4),%eax
c0109888:	c7 44 24 04 91 fc 10 	movl   $0xc010fc91,0x4(%esp)
c010988f:	c0 
c0109890:	89 04 24             	mov    %eax,(%esp)
c0109893:	e8 3b 10 00 00       	call   c010a8d3 <set_proc_name>
    if (pid <= 0)
       panic("create the cinema process with sema failed.\n");
    cinema_proc_sema = find_proc(pid); 
    set_proc_name(cinema_proc_sema, "cinema_sema_proc");
    do_sleep(1000);
    for (i = 0; i < USER_NUM; i++) {  
c0109898:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010989c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c01098a0:	0f 8e 40 ff ff ff    	jle    c01097e6 <check_sync+0x157>
        set_proc_name(user_proc_sema[i], "user_sema_proc");
    }

   // do_sleep(5000);

    cprintf("Start to check monitor!\n");
c01098a6:	c7 04 24 a0 fc 10 c0 	movl   $0xc010fca0,(%esp)
c01098ad:	e8 b1 6a ff ff       	call   c0100363 <cprintf>
    //check monitor
    monitor_init(&mt, N + 1);
c01098b2:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
c01098b9:	00 
c01098ba:	c7 04 24 c0 66 1c c0 	movl   $0xc01c66c0,(%esp)
c01098c1:	e8 72 01 00 00       	call   c0109a38 <monitor_init>
    for (i = 0; i < N; i++)
c01098c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01098cd:	eb 12                	jmp    c01098e1 <check_sync+0x252>
       num_waiting_monitor[i] = 0;
c01098cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098d2:	c7 04 85 f0 66 1c c0 	movl   $0x0,-0x3fe39910(,%eax,4)
c01098d9:	00 00 00 00 
   // do_sleep(5000);

    cprintf("Start to check monitor!\n");
    //check monitor
    monitor_init(&mt, N + 1);
    for (i = 0; i < N; i++)
c01098dd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01098e1:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
c01098e5:	7e e8                	jle    c01098cf <check_sync+0x240>
       num_waiting_monitor[i] = 0;
    current_monitor = -1;
c01098e7:	c7 05 74 66 1c c0 ff 	movl   $0xffffffff,0xc01c6674
c01098ee:	ff ff ff 

    pid = kernel_thread(switch_film_monitor, NULL, 0);
c01098f1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01098f8:	00 
c01098f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109900:	00 
c0109901:	c7 04 24 8c 93 10 c0 	movl   $0xc010938c,(%esp)
c0109908:	e8 53 14 00 00       	call   c010ad60 <kernel_thread>
c010990d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0)
c0109910:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109914:	7f 1c                	jg     c0109932 <check_sync+0x2a3>
       panic("create the cinema process with monitor failed.\n");
c0109916:	c7 44 24 08 bc fc 10 	movl   $0xc010fcbc,0x8(%esp)
c010991d:	c0 
c010991e:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0109925:	00 
c0109926:	c7 04 24 0d fc 10 c0 	movl   $0xc010fc0d,(%esp)
c010992d:	e8 c2 74 ff ff       	call   c0100df4 <__panic>
    cinema_proc_monitor = find_proc(pid); 
c0109932:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109935:	89 04 24             	mov    %eax,(%esp)
c0109938:	e8 af 13 00 00       	call   c010acec <find_proc>
c010993d:	a3 70 66 1c c0       	mov    %eax,0xc01c6670
    set_proc_name(cinema_proc_monitor, "cinema_monitor_proc");
c0109942:	a1 70 66 1c c0       	mov    0xc01c6670,%eax
c0109947:	c7 44 24 04 ec fc 10 	movl   $0xc010fcec,0x4(%esp)
c010994e:	c0 
c010994f:	89 04 24             	mov    %eax,(%esp)
c0109952:	e8 7c 0f 00 00       	call   c010a8d3 <set_proc_name>
    do_sleep(500);    //Wait the cinema process to prepare
c0109957:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
c010995e:	e8 85 28 00 00       	call   c010c1e8 <do_sleep>
    for(i=0;i<USER_NUM;i++){
c0109963:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010996a:	e9 b1 00 00 00       	jmp    c0109a20 <check_sync+0x391>
        uint32_t t = rand() % N;  //a random film to watch
c010996f:	e8 50 3b 00 00       	call   c010d4c4 <rand>
c0109974:	89 c1                	mov    %eax,%ecx
c0109976:	ba 56 55 55 55       	mov    $0x55555556,%edx
c010997b:	89 c8                	mov    %ecx,%eax
c010997d:	f7 ea                	imul   %edx
c010997f:	89 c8                	mov    %ecx,%eax
c0109981:	c1 f8 1f             	sar    $0x1f,%eax
c0109984:	29 c2                	sub    %eax,%edx
c0109986:	89 d0                	mov    %edx,%eax
c0109988:	01 c0                	add    %eax,%eax
c010998a:	01 d0                	add    %edx,%eax
c010998c:	89 ca                	mov    %ecx,%edx
c010998e:	29 c2                	sub    %eax,%edx
c0109990:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        cprintf("Monitor: Create a user want to watch film %d.\n", t);
c0109993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109996:	89 44 24 04          	mov    %eax,0x4(%esp)
c010999a:	c7 04 24 00 fd 10 c0 	movl   $0xc010fd00,(%esp)
c01099a1:	e8 bd 69 ff ff       	call   c0100363 <cprintf>
        int pid = kernel_thread(watch_film_monitor, (void *) t, 0);
c01099a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01099a9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01099b0:	00 
c01099b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099b5:	c7 04 24 02 96 10 c0 	movl   $0xc0109602,(%esp)
c01099bc:	e8 9f 13 00 00       	call   c010ad60 <kernel_thread>
c01099c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (pid <= 0) {
c01099c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01099c8:	7f 23                	jg     c01099ed <check_sync+0x35e>
            panic("create No.%d user with monitor failed.\n", i);
c01099ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099cd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01099d1:	c7 44 24 08 30 fd 10 	movl   $0xc010fd30,0x8(%esp)
c01099d8:	c0 
c01099d9:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c01099e0:	00 
c01099e1:	c7 04 24 0d fc 10 c0 	movl   $0xc010fc0d,(%esp)
c01099e8:	e8 07 74 ff ff       	call   c0100df4 <__panic>
        }
        user_proc_monitor[i] = find_proc(pid);
c01099ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01099f0:	89 04 24             	mov    %eax,(%esp)
c01099f3:	e8 f4 12 00 00       	call   c010acec <find_proc>
c01099f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099fb:	89 04 95 00 66 1c c0 	mov    %eax,-0x3fe39a00(,%edx,4)
        set_proc_name(user_proc_monitor[i], "user_monitor_proc");
c0109a02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a05:	8b 04 85 00 66 1c c0 	mov    -0x3fe39a00(,%eax,4),%eax
c0109a0c:	c7 44 24 04 58 fd 10 	movl   $0xc010fd58,0x4(%esp)
c0109a13:	c0 
c0109a14:	89 04 24             	mov    %eax,(%esp)
c0109a17:	e8 b7 0e 00 00       	call   c010a8d3 <set_proc_name>
    if (pid <= 0)
       panic("create the cinema process with monitor failed.\n");
    cinema_proc_monitor = find_proc(pid); 
    set_proc_name(cinema_proc_monitor, "cinema_monitor_proc");
    do_sleep(500);    //Wait the cinema process to prepare
    for(i=0;i<USER_NUM;i++){
c0109a1c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109a20:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c0109a24:	0f 8e 45 ff ff ff    	jle    c010996f <check_sync+0x2e0>
        }
        user_proc_monitor[i] = find_proc(pid);
        set_proc_name(user_proc_monitor[i], "user_monitor_proc");
    }

    cprintf("End of Test\n");
c0109a2a:	c7 04 24 6a fd 10 c0 	movl   $0xc010fd6a,(%esp)
c0109a31:	e8 2d 69 ff ff       	call   c0100363 <cprintf>
}
c0109a36:	c9                   	leave  
c0109a37:	c3                   	ret    

c0109a38 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109a38:	55                   	push   %ebp
c0109a39:	89 e5                	mov    %esp,%ebp
c0109a3b:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109a3e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109a42:	75 24                	jne    c0109a68 <monitor_init+0x30>
c0109a44:	c7 44 24 0c 78 fd 10 	movl   $0xc010fd78,0xc(%esp)
c0109a4b:	c0 
c0109a4c:	c7 44 24 08 81 fd 10 	movl   $0xc010fd81,0x8(%esp)
c0109a53:	c0 
c0109a54:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109a5b:	00 
c0109a5c:	c7 04 24 96 fd 10 c0 	movl   $0xc010fd96,(%esp)
c0109a63:	e8 8c 73 ff ff       	call   c0100df4 <__panic>
    mtp->next_count = 0;
c0109a68:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a6b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109a72:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a75:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109a86:	00 
c0109a87:	89 04 24             	mov    %eax,(%esp)
c0109a8a:	e8 6b 02 00 00       	call   c0109cfa <sem_init>
    sem_init(&(mtp->next), 0);
c0109a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a92:	83 c0 0c             	add    $0xc,%eax
c0109a95:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109a9c:	00 
c0109a9d:	89 04 24             	mov    %eax,(%esp)
c0109aa0:	e8 55 02 00 00       	call   c0109cfa <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109aa5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109aa8:	89 d0                	mov    %edx,%eax
c0109aaa:	c1 e0 02             	shl    $0x2,%eax
c0109aad:	01 d0                	add    %edx,%eax
c0109aaf:	c1 e0 02             	shl    $0x2,%eax
c0109ab2:	89 04 24             	mov    %eax,(%esp)
c0109ab5:	e8 db b2 ff ff       	call   c0104d95 <kmalloc>
c0109aba:	8b 55 08             	mov    0x8(%ebp),%edx
c0109abd:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109ac0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac3:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109ac6:	85 c0                	test   %eax,%eax
c0109ac8:	75 24                	jne    c0109aee <monitor_init+0xb6>
c0109aca:	c7 44 24 0c aa fd 10 	movl   $0xc010fdaa,0xc(%esp)
c0109ad1:	c0 
c0109ad2:	c7 44 24 08 81 fd 10 	movl   $0xc010fd81,0x8(%esp)
c0109ad9:	c0 
c0109ada:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109ae1:	00 
c0109ae2:	c7 04 24 96 fd 10 c0 	movl   $0xc010fd96,(%esp)
c0109ae9:	e8 06 73 ff ff       	call   c0100df4 <__panic>
    for(i=0; i<num_cv; i++){
c0109aee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109af5:	eb 61                	jmp    c0109b58 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109af7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109afa:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109afd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b00:	89 d0                	mov    %edx,%eax
c0109b02:	c1 e0 02             	shl    $0x2,%eax
c0109b05:	01 d0                	add    %edx,%eax
c0109b07:	c1 e0 02             	shl    $0x2,%eax
c0109b0a:	01 c8                	add    %ecx,%eax
c0109b0c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b16:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109b19:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b1c:	89 d0                	mov    %edx,%eax
c0109b1e:	c1 e0 02             	shl    $0x2,%eax
c0109b21:	01 d0                	add    %edx,%eax
c0109b23:	c1 e0 02             	shl    $0x2,%eax
c0109b26:	01 c8                	add    %ecx,%eax
c0109b28:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109b2f:	00 
c0109b30:	89 04 24             	mov    %eax,(%esp)
c0109b33:	e8 c2 01 00 00       	call   c0109cfa <sem_init>
        mtp->cv[i].owner=mtp;
c0109b38:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b3b:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109b3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b41:	89 d0                	mov    %edx,%eax
c0109b43:	c1 e0 02             	shl    $0x2,%eax
c0109b46:	01 d0                	add    %edx,%eax
c0109b48:	c1 e0 02             	shl    $0x2,%eax
c0109b4b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109b4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b51:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109b54:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b5e:	72 97                	jb     c0109af7 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109b60:	c9                   	leave  
c0109b61:	c3                   	ret    

c0109b62 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c0109b62:	55                   	push   %ebp
c0109b63:	89 e5                	mov    %esp,%ebp
c0109b65:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: 2010011351
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109b68:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6b:	8b 40 10             	mov    0x10(%eax),%eax
c0109b6e:	8b 50 18             	mov    0x18(%eax),%edx
c0109b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b74:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b77:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b7b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b86:	c7 04 24 b8 fd 10 c0 	movl   $0xc010fdb8,(%esp)
c0109b8d:	e8 d1 67 ff ff       	call   c0100363 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   if ((cvp->count) > 0) {
c0109b92:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b95:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b98:	85 c0                	test   %eax,%eax
c0109b9a:	7e 3a                	jle    c0109bd6 <cond_signal+0x74>
       cvp->owner->next_count++;
c0109b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b9f:	8b 40 10             	mov    0x10(%eax),%eax
c0109ba2:	8b 50 18             	mov    0x18(%eax),%edx
c0109ba5:	83 c2 01             	add    $0x1,%edx
c0109ba8:	89 50 18             	mov    %edx,0x18(%eax)
       up(&cvp->sem);
c0109bab:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bae:	89 04 24             	mov    %eax,(%esp)
c0109bb1:	e8 b7 02 00 00       	call   c0109e6d <up>
       down(&cvp->owner->next);
c0109bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb9:	8b 40 10             	mov    0x10(%eax),%eax
c0109bbc:	83 c0 0c             	add    $0xc,%eax
c0109bbf:	89 04 24             	mov    %eax,(%esp)
c0109bc2:	e8 c1 02 00 00       	call   c0109e88 <down>
       cvp->owner->next_count--;
c0109bc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bca:	8b 40 10             	mov    0x10(%eax),%eax
c0109bcd:	8b 50 18             	mov    0x18(%eax),%edx
c0109bd0:	83 ea 01             	sub    $0x1,%edx
c0109bd3:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109bd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd9:	8b 40 10             	mov    0x10(%eax),%eax
c0109bdc:	8b 50 18             	mov    0x18(%eax),%edx
c0109bdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be2:	8b 40 0c             	mov    0xc(%eax),%eax
c0109be5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109be9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bed:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bf4:	c7 04 24 00 fe 10 c0 	movl   $0xc010fe00,(%esp)
c0109bfb:	e8 63 67 ff ff       	call   c0100363 <cprintf>
}
c0109c00:	c9                   	leave  
c0109c01:	c3                   	ret    

c0109c02 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109c02:	55                   	push   %ebp
c0109c03:	89 e5                	mov    %esp,%ebp
c0109c05:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2010011351
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109c08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0b:	8b 40 10             	mov    0x10(%eax),%eax
c0109c0e:	8b 50 18             	mov    0x18(%eax),%edx
c0109c11:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c14:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c17:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c1b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c26:	c7 04 24 44 fe 10 c0 	movl   $0xc010fe44,(%esp)
c0109c2d:	e8 31 67 ff ff       	call   c0100363 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cvp->count++;
c0109c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c35:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c38:	8d 50 01             	lea    0x1(%eax),%edx
c0109c3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3e:	89 50 0c             	mov    %edx,0xc(%eax)
    if (cvp->owner->next_count > 0)
c0109c41:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c44:	8b 40 10             	mov    0x10(%eax),%eax
c0109c47:	8b 40 18             	mov    0x18(%eax),%eax
c0109c4a:	85 c0                	test   %eax,%eax
c0109c4c:	7e 13                	jle    c0109c61 <cond_wait+0x5f>
       up(&cvp->owner->next);
c0109c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c51:	8b 40 10             	mov    0x10(%eax),%eax
c0109c54:	83 c0 0c             	add    $0xc,%eax
c0109c57:	89 04 24             	mov    %eax,(%esp)
c0109c5a:	e8 0e 02 00 00       	call   c0109e6d <up>
c0109c5f:	eb 0e                	jmp    c0109c6f <cond_wait+0x6d>
    else
       up(&cvp->owner->mutex);
c0109c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c64:	8b 40 10             	mov    0x10(%eax),%eax
c0109c67:	89 04 24             	mov    %eax,(%esp)
c0109c6a:	e8 fe 01 00 00       	call   c0109e6d <up>
    down(&cvp->sem);
c0109c6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c72:	89 04 24             	mov    %eax,(%esp)
c0109c75:	e8 0e 02 00 00       	call   c0109e88 <down>
    cvp->count--;
c0109c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c7d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c80:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c83:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c86:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109c89:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c8c:	8b 40 10             	mov    0x10(%eax),%eax
c0109c8f:	8b 50 18             	mov    0x18(%eax),%edx
c0109c92:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c95:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c98:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c9c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ca7:	c7 04 24 88 fe 10 c0 	movl   $0xc010fe88,(%esp)
c0109cae:	e8 b0 66 ff ff       	call   c0100363 <cprintf>
}
c0109cb3:	c9                   	leave  
c0109cb4:	c3                   	ret    
c0109cb5:	66 90                	xchg   %ax,%ax
c0109cb7:	90                   	nop

c0109cb8 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109cb8:	55                   	push   %ebp
c0109cb9:	89 e5                	mov    %esp,%ebp
c0109cbb:	53                   	push   %ebx
c0109cbc:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109cbf:	9c                   	pushf  
c0109cc0:	5b                   	pop    %ebx
c0109cc1:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0109cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109cc7:	25 00 02 00 00       	and    $0x200,%eax
c0109ccc:	85 c0                	test   %eax,%eax
c0109cce:	74 0c                	je     c0109cdc <__intr_save+0x24>
        intr_disable();
c0109cd0:	e8 45 84 ff ff       	call   c010211a <intr_disable>
        return 1;
c0109cd5:	b8 01 00 00 00       	mov    $0x1,%eax
c0109cda:	eb 05                	jmp    c0109ce1 <__intr_save+0x29>
    }
    return 0;
c0109cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ce1:	83 c4 14             	add    $0x14,%esp
c0109ce4:	5b                   	pop    %ebx
c0109ce5:	5d                   	pop    %ebp
c0109ce6:	c3                   	ret    

c0109ce7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109ce7:	55                   	push   %ebp
c0109ce8:	89 e5                	mov    %esp,%ebp
c0109cea:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109ced:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109cf1:	74 05                	je     c0109cf8 <__intr_restore+0x11>
        intr_enable();
c0109cf3:	e8 1c 84 ff ff       	call   c0102114 <intr_enable>
    }
}
c0109cf8:	c9                   	leave  
c0109cf9:	c3                   	ret    

c0109cfa <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109cfa:	55                   	push   %ebp
c0109cfb:	89 e5                	mov    %esp,%ebp
c0109cfd:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d03:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d06:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109d08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0b:	83 c0 04             	add    $0x4,%eax
c0109d0e:	89 04 24             	mov    %eax,(%esp)
c0109d11:	e8 35 02 00 00       	call   c0109f4b <wait_queue_init>
}
c0109d16:	c9                   	leave  
c0109d17:	c3                   	ret    

c0109d18 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109d18:	55                   	push   %ebp
c0109d19:	89 e5                	mov    %esp,%ebp
c0109d1b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109d1e:	e8 95 ff ff ff       	call   c0109cb8 <__intr_save>
c0109d23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d29:	83 c0 04             	add    $0x4,%eax
c0109d2c:	89 04 24             	mov    %eax,(%esp)
c0109d2f:	e8 6b 04 00 00       	call   c010a19f <wait_queue_first>
c0109d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109d3b:	75 0f                	jne    c0109d4c <__up+0x34>
            sem->value ++;
c0109d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d40:	8b 00                	mov    (%eax),%eax
c0109d42:	8d 50 01             	lea    0x1(%eax),%edx
c0109d45:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d48:	89 10                	mov    %edx,(%eax)
c0109d4a:	eb 58                	jmp    c0109da4 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109d4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d4f:	8b 00                	mov    (%eax),%eax
c0109d51:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109d57:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109d5a:	74 24                	je     c0109d80 <__up+0x68>
c0109d5c:	c7 44 24 0c cc fe 10 	movl   $0xc010fecc,0xc(%esp)
c0109d63:	c0 
c0109d64:	c7 44 24 08 f1 fe 10 	movl   $0xc010fef1,0x8(%esp)
c0109d6b:	c0 
c0109d6c:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109d73:	00 
c0109d74:	c7 04 24 06 ff 10 c0 	movl   $0xc010ff06,(%esp)
c0109d7b:	e8 74 70 ff ff       	call   c0100df4 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109d80:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d83:	8d 50 04             	lea    0x4(%eax),%edx
c0109d86:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109d8d:	00 
c0109d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d91:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d98:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d9c:	89 14 24             	mov    %edx,(%esp)
c0109d9f:	e8 97 04 00 00       	call   c010a23b <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109da7:	89 04 24             	mov    %eax,(%esp)
c0109daa:	e8 38 ff ff ff       	call   c0109ce7 <__intr_restore>
}
c0109daf:	c9                   	leave  
c0109db0:	c3                   	ret    

c0109db1 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109db1:	55                   	push   %ebp
c0109db2:	89 e5                	mov    %esp,%ebp
c0109db4:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109db7:	e8 fc fe ff ff       	call   c0109cb8 <__intr_save>
c0109dbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109dbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dc2:	8b 00                	mov    (%eax),%eax
c0109dc4:	85 c0                	test   %eax,%eax
c0109dc6:	7e 22                	jle    c0109dea <__down+0x39>
        sem->value --;
c0109dc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dcb:	8b 00                	mov    (%eax),%eax
c0109dcd:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109dd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dd3:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dd8:	89 04 24             	mov    %eax,(%esp)
c0109ddb:	e8 07 ff ff ff       	call   c0109ce7 <__intr_restore>
        return 0;
c0109de0:	b8 00 00 00 00       	mov    $0x0,%eax
c0109de5:	e9 81 00 00 00       	jmp    c0109e6b <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109dea:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109ded:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109df3:	8d 50 04             	lea    0x4(%eax),%edx
c0109df6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109df9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e04:	89 14 24             	mov    %edx,(%esp)
c0109e07:	e8 36 05 00 00       	call   c010a342 <wait_current_set>
    local_intr_restore(intr_flag);
c0109e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e0f:	89 04 24             	mov    %eax,(%esp)
c0109e12:	e8 d0 fe ff ff       	call   c0109ce7 <__intr_restore>

    schedule();
c0109e17:	e8 a4 29 00 00       	call   c010c7c0 <schedule>

    local_intr_save(intr_flag);
c0109e1c:	e8 97 fe ff ff       	call   c0109cb8 <__intr_save>
c0109e21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109e24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e27:	89 04 24             	mov    %eax,(%esp)
c0109e2a:	e8 e4 03 00 00       	call   c010a213 <wait_in_queue>
c0109e2f:	85 c0                	test   %eax,%eax
c0109e31:	74 15                	je     c0109e48 <__down+0x97>
c0109e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e36:	8d 50 04             	lea    0x4(%eax),%edx
c0109e39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e40:	89 14 24             	mov    %edx,(%esp)
c0109e43:	e8 c6 01 00 00       	call   c010a00e <wait_queue_del>
    local_intr_restore(intr_flag);
c0109e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e4b:	89 04 24             	mov    %eax,(%esp)
c0109e4e:	e8 94 fe ff ff       	call   c0109ce7 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e56:	8b 40 04             	mov    0x4(%eax),%eax
c0109e59:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109e5c:	74 08                	je     c0109e66 <__down+0xb5>
        return wait->wakeup_flags;
c0109e5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e61:	8b 40 04             	mov    0x4(%eax),%eax
c0109e64:	eb 05                	jmp    c0109e6b <__down+0xba>
    }
    return 0;
c0109e66:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e6b:	c9                   	leave  
c0109e6c:	c3                   	ret    

c0109e6d <up>:

void
up(semaphore_t *sem) {
c0109e6d:	55                   	push   %ebp
c0109e6e:	89 e5                	mov    %esp,%ebp
c0109e70:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109e73:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109e7a:	00 
c0109e7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e7e:	89 04 24             	mov    %eax,(%esp)
c0109e81:	e8 92 fe ff ff       	call   c0109d18 <__up>
}
c0109e86:	c9                   	leave  
c0109e87:	c3                   	ret    

c0109e88 <down>:

void
down(semaphore_t *sem) {
c0109e88:	55                   	push   %ebp
c0109e89:	89 e5                	mov    %esp,%ebp
c0109e8b:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109e8e:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109e95:	00 
c0109e96:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e99:	89 04 24             	mov    %eax,(%esp)
c0109e9c:	e8 10 ff ff ff       	call   c0109db1 <__down>
c0109ea1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109ea4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ea8:	74 24                	je     c0109ece <down+0x46>
c0109eaa:	c7 44 24 0c 16 ff 10 	movl   $0xc010ff16,0xc(%esp)
c0109eb1:	c0 
c0109eb2:	c7 44 24 08 f1 fe 10 	movl   $0xc010fef1,0x8(%esp)
c0109eb9:	c0 
c0109eba:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109ec1:	00 
c0109ec2:	c7 04 24 06 ff 10 c0 	movl   $0xc010ff06,(%esp)
c0109ec9:	e8 26 6f ff ff       	call   c0100df4 <__panic>
}
c0109ece:	c9                   	leave  
c0109ecf:	c3                   	ret    

c0109ed0 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109ed0:	55                   	push   %ebp
c0109ed1:	89 e5                	mov    %esp,%ebp
c0109ed3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109ed6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109edd:	e8 d6 fd ff ff       	call   c0109cb8 <__intr_save>
c0109ee2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee8:	8b 00                	mov    (%eax),%eax
c0109eea:	85 c0                	test   %eax,%eax
c0109eec:	7e 14                	jle    c0109f02 <try_down+0x32>
        sem->value --, ret = 1;
c0109eee:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef1:	8b 00                	mov    (%eax),%eax
c0109ef3:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef9:	89 10                	mov    %edx,(%eax)
c0109efb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109f02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f05:	89 04 24             	mov    %eax,(%esp)
c0109f08:	e8 da fd ff ff       	call   c0109ce7 <__intr_restore>
    return ret;
c0109f0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109f10:	c9                   	leave  
c0109f11:	c3                   	ret    
c0109f12:	66 90                	xchg   %ax,%ax

c0109f14 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109f14:	55                   	push   %ebp
c0109f15:	89 e5                	mov    %esp,%ebp
c0109f17:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109f1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109f20:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f25:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109f2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f2f:	83 c0 0c             	add    $0xc,%eax
c0109f32:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109f35:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f38:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109f3b:	89 50 04             	mov    %edx,0x4(%eax)
c0109f3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f41:	8b 50 04             	mov    0x4(%eax),%edx
c0109f44:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f47:	89 10                	mov    %edx,(%eax)
}
c0109f49:	c9                   	leave  
c0109f4a:	c3                   	ret    

c0109f4b <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109f4b:	55                   	push   %ebp
c0109f4c:	89 e5                	mov    %esp,%ebp
c0109f4e:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f54:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109f57:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f5a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109f5d:	89 50 04             	mov    %edx,0x4(%eax)
c0109f60:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f63:	8b 50 04             	mov    0x4(%eax),%edx
c0109f66:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f69:	89 10                	mov    %edx,(%eax)
}
c0109f6b:	c9                   	leave  
c0109f6c:	c3                   	ret    

c0109f6d <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109f6d:	55                   	push   %ebp
c0109f6e:	89 e5                	mov    %esp,%ebp
c0109f70:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f76:	83 c0 0c             	add    $0xc,%eax
c0109f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f7f:	8b 40 04             	mov    0x4(%eax),%eax
c0109f82:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109f85:	0f 94 c0             	sete   %al
c0109f88:	0f b6 c0             	movzbl %al,%eax
c0109f8b:	85 c0                	test   %eax,%eax
c0109f8d:	74 09                	je     c0109f98 <wait_queue_add+0x2b>
c0109f8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f92:	8b 00                	mov    (%eax),%eax
c0109f94:	85 c0                	test   %eax,%eax
c0109f96:	75 24                	jne    c0109fbc <wait_queue_add+0x4f>
c0109f98:	c7 44 24 0c 24 ff 10 	movl   $0xc010ff24,0xc(%esp)
c0109f9f:	c0 
c0109fa0:	c7 44 24 08 59 ff 10 	movl   $0xc010ff59,0x8(%esp)
c0109fa7:	c0 
c0109fa8:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109faf:	00 
c0109fb0:	c7 04 24 6e ff 10 c0 	movl   $0xc010ff6e,(%esp)
c0109fb7:	e8 38 6e ff ff       	call   c0100df4 <__panic>
    wait->wait_queue = queue;
c0109fbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fbf:	8b 55 08             	mov    0x8(%ebp),%edx
c0109fc2:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fc8:	8d 50 0c             	lea    0xc(%eax),%edx
c0109fcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fce:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109fd1:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109fd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fd7:	8b 00                	mov    (%eax),%eax
c0109fd9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109fdc:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109fdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109fe2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fe5:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109fe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109feb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109fee:	89 10                	mov    %edx,(%eax)
c0109ff0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ff3:	8b 10                	mov    (%eax),%edx
c0109ff5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ff8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109ffb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ffe:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a001:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a004:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a007:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a00a:	89 10                	mov    %edx,(%eax)
}
c010a00c:	c9                   	leave  
c010a00d:	c3                   	ret    

c010a00e <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c010a00e:	55                   	push   %ebp
c010a00f:	89 e5                	mov    %esp,%ebp
c010a011:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a014:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a017:	83 c0 0c             	add    $0xc,%eax
c010a01a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a020:	8b 40 04             	mov    0x4(%eax),%eax
c010a023:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a026:	0f 94 c0             	sete   %al
c010a029:	0f b6 c0             	movzbl %al,%eax
c010a02c:	85 c0                	test   %eax,%eax
c010a02e:	75 0b                	jne    c010a03b <wait_queue_del+0x2d>
c010a030:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a033:	8b 40 08             	mov    0x8(%eax),%eax
c010a036:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a039:	74 24                	je     c010a05f <wait_queue_del+0x51>
c010a03b:	c7 44 24 0c 80 ff 10 	movl   $0xc010ff80,0xc(%esp)
c010a042:	c0 
c010a043:	c7 44 24 08 59 ff 10 	movl   $0xc010ff59,0x8(%esp)
c010a04a:	c0 
c010a04b:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c010a052:	00 
c010a053:	c7 04 24 6e ff 10 c0 	movl   $0xc010ff6e,(%esp)
c010a05a:	e8 95 6d ff ff       	call   c0100df4 <__panic>
    list_del_init(&(wait->wait_link));
c010a05f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a062:	83 c0 0c             	add    $0xc,%eax
c010a065:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a068:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a06b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a06e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a071:	8b 40 04             	mov    0x4(%eax),%eax
c010a074:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a077:	8b 12                	mov    (%edx),%edx
c010a079:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a07c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a07f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a082:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a085:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a088:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a08b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a08e:	89 10                	mov    %edx,(%eax)
c010a090:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a093:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a096:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a099:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a09c:	89 50 04             	mov    %edx,0x4(%eax)
c010a09f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0a2:	8b 50 04             	mov    0x4(%eax),%edx
c010a0a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0a8:	89 10                	mov    %edx,(%eax)
}
c010a0aa:	c9                   	leave  
c010a0ab:	c3                   	ret    

c010a0ac <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010a0ac:	55                   	push   %ebp
c010a0ad:	89 e5                	mov    %esp,%ebp
c010a0af:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a0b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0b5:	83 c0 0c             	add    $0xc,%eax
c010a0b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a0bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0be:	8b 40 04             	mov    0x4(%eax),%eax
c010a0c1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a0c4:	0f 94 c0             	sete   %al
c010a0c7:	0f b6 c0             	movzbl %al,%eax
c010a0ca:	85 c0                	test   %eax,%eax
c010a0cc:	75 0b                	jne    c010a0d9 <wait_queue_next+0x2d>
c010a0ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0d1:	8b 40 08             	mov    0x8(%eax),%eax
c010a0d4:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a0d7:	74 24                	je     c010a0fd <wait_queue_next+0x51>
c010a0d9:	c7 44 24 0c 80 ff 10 	movl   $0xc010ff80,0xc(%esp)
c010a0e0:	c0 
c010a0e1:	c7 44 24 08 59 ff 10 	movl   $0xc010ff59,0x8(%esp)
c010a0e8:	c0 
c010a0e9:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c010a0f0:	00 
c010a0f1:	c7 04 24 6e ff 10 c0 	movl   $0xc010ff6e,(%esp)
c010a0f8:	e8 f7 6c ff ff       	call   c0100df4 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010a0fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a100:	83 c0 0c             	add    $0xc,%eax
c010a103:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a109:	8b 40 04             	mov    0x4(%eax),%eax
c010a10c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a10f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a112:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a115:	74 08                	je     c010a11f <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c010a117:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a11a:	83 e8 0c             	sub    $0xc,%eax
c010a11d:	eb 05                	jmp    c010a124 <wait_queue_next+0x78>
    }
    return NULL;
c010a11f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a124:	c9                   	leave  
c010a125:	c3                   	ret    

c010a126 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c010a126:	55                   	push   %ebp
c010a127:	89 e5                	mov    %esp,%ebp
c010a129:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a12c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a12f:	83 c0 0c             	add    $0xc,%eax
c010a132:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a135:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a138:	8b 40 04             	mov    0x4(%eax),%eax
c010a13b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a13e:	0f 94 c0             	sete   %al
c010a141:	0f b6 c0             	movzbl %al,%eax
c010a144:	85 c0                	test   %eax,%eax
c010a146:	75 0b                	jne    c010a153 <wait_queue_prev+0x2d>
c010a148:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a14b:	8b 40 08             	mov    0x8(%eax),%eax
c010a14e:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a151:	74 24                	je     c010a177 <wait_queue_prev+0x51>
c010a153:	c7 44 24 0c 80 ff 10 	movl   $0xc010ff80,0xc(%esp)
c010a15a:	c0 
c010a15b:	c7 44 24 08 59 ff 10 	movl   $0xc010ff59,0x8(%esp)
c010a162:	c0 
c010a163:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010a16a:	00 
c010a16b:	c7 04 24 6e ff 10 c0 	movl   $0xc010ff6e,(%esp)
c010a172:	e8 7d 6c ff ff       	call   c0100df4 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a177:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a17a:	83 c0 0c             	add    $0xc,%eax
c010a17d:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a183:	8b 00                	mov    (%eax),%eax
c010a185:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a188:	8b 45 08             	mov    0x8(%ebp),%eax
c010a18b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a18e:	74 08                	je     c010a198 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a190:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a193:	83 e8 0c             	sub    $0xc,%eax
c010a196:	eb 05                	jmp    c010a19d <wait_queue_prev+0x77>
    }
    return NULL;
c010a198:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a19d:	c9                   	leave  
c010a19e:	c3                   	ret    

c010a19f <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a19f:	55                   	push   %ebp
c010a1a0:	89 e5                	mov    %esp,%ebp
c010a1a2:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a1a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a1ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1ae:	8b 40 04             	mov    0x4(%eax),%eax
c010a1b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a1b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a1ba:	74 08                	je     c010a1c4 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a1bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1bf:	83 e8 0c             	sub    $0xc,%eax
c010a1c2:	eb 05                	jmp    c010a1c9 <wait_queue_first+0x2a>
    }
    return NULL;
c010a1c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a1c9:	c9                   	leave  
c010a1ca:	c3                   	ret    

c010a1cb <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a1cb:	55                   	push   %ebp
c010a1cc:	89 e5                	mov    %esp,%ebp
c010a1ce:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a1d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1da:	8b 00                	mov    (%eax),%eax
c010a1dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a1df:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a1e5:	74 08                	je     c010a1ef <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a1e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1ea:	83 e8 0c             	sub    $0xc,%eax
c010a1ed:	eb 05                	jmp    c010a1f4 <wait_queue_last+0x29>
    }
    return NULL;
c010a1ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a1f4:	c9                   	leave  
c010a1f5:	c3                   	ret    

c010a1f6 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a1f6:	55                   	push   %ebp
c010a1f7:	89 e5                	mov    %esp,%ebp
c010a1f9:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a1fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a202:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a205:	8b 40 04             	mov    0x4(%eax),%eax
c010a208:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a20b:	0f 94 c0             	sete   %al
c010a20e:	0f b6 c0             	movzbl %al,%eax
}
c010a211:	c9                   	leave  
c010a212:	c3                   	ret    

c010a213 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a213:	55                   	push   %ebp
c010a214:	89 e5                	mov    %esp,%ebp
c010a216:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a219:	8b 45 08             	mov    0x8(%ebp),%eax
c010a21c:	83 c0 0c             	add    $0xc,%eax
c010a21f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a222:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a225:	8b 40 04             	mov    0x4(%eax),%eax
c010a228:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a22b:	0f 94 c0             	sete   %al
c010a22e:	0f b6 c0             	movzbl %al,%eax
c010a231:	85 c0                	test   %eax,%eax
c010a233:	0f 94 c0             	sete   %al
c010a236:	0f b6 c0             	movzbl %al,%eax
}
c010a239:	c9                   	leave  
c010a23a:	c3                   	ret    

c010a23b <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a23b:	55                   	push   %ebp
c010a23c:	89 e5                	mov    %esp,%ebp
c010a23e:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a241:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a245:	74 12                	je     c010a259 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a247:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a24a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a24e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a251:	89 04 24             	mov    %eax,(%esp)
c010a254:	e8 b5 fd ff ff       	call   c010a00e <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a259:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a25c:	8b 55 10             	mov    0x10(%ebp),%edx
c010a25f:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a262:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a265:	8b 00                	mov    (%eax),%eax
c010a267:	89 04 24             	mov    %eax,(%esp)
c010a26a:	e8 b5 24 00 00       	call   c010c724 <wakeup_proc>
}
c010a26f:	c9                   	leave  
c010a270:	c3                   	ret    

c010a271 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a271:	55                   	push   %ebp
c010a272:	89 e5                	mov    %esp,%ebp
c010a274:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a277:	8b 45 08             	mov    0x8(%ebp),%eax
c010a27a:	89 04 24             	mov    %eax,(%esp)
c010a27d:	e8 1d ff ff ff       	call   c010a19f <wait_queue_first>
c010a282:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a285:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a289:	74 20                	je     c010a2ab <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a28b:	8b 45 10             	mov    0x10(%ebp),%eax
c010a28e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a292:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a295:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a299:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a29c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a3:	89 04 24             	mov    %eax,(%esp)
c010a2a6:	e8 90 ff ff ff       	call   c010a23b <wakeup_wait>
    }
}
c010a2ab:	c9                   	leave  
c010a2ac:	c3                   	ret    

c010a2ad <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a2ad:	55                   	push   %ebp
c010a2ae:	89 e5                	mov    %esp,%ebp
c010a2b0:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a2b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b6:	89 04 24             	mov    %eax,(%esp)
c010a2b9:	e8 e1 fe ff ff       	call   c010a19f <wait_queue_first>
c010a2be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2c5:	74 79                	je     c010a340 <wakeup_queue+0x93>
        if (del) {
c010a2c7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a2cb:	74 37                	je     c010a304 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a2cd:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a2d4:	00 
c010a2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a2dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2df:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2e6:	89 04 24             	mov    %eax,(%esp)
c010a2e9:	e8 4d ff ff ff       	call   c010a23b <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f1:	89 04 24             	mov    %eax,(%esp)
c010a2f4:	e8 a6 fe ff ff       	call   c010a19f <wait_queue_first>
c010a2f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a300:	75 cb                	jne    c010a2cd <wakeup_queue+0x20>
c010a302:	eb 3c                	jmp    c010a340 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a304:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a30b:	00 
c010a30c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a30f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a313:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a316:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a31a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31d:	89 04 24             	mov    %eax,(%esp)
c010a320:	e8 16 ff ff ff       	call   c010a23b <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a328:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a32c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32f:	89 04 24             	mov    %eax,(%esp)
c010a332:	e8 75 fd ff ff       	call   c010a0ac <wait_queue_next>
c010a337:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a33a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a33e:	75 c4                	jne    c010a304 <wakeup_queue+0x57>
        }
    }
}
c010a340:	c9                   	leave  
c010a341:	c3                   	ret    

c010a342 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a342:	55                   	push   %ebp
c010a343:	89 e5                	mov    %esp,%ebp
c010a345:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a348:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010a34d:	85 c0                	test   %eax,%eax
c010a34f:	75 24                	jne    c010a375 <wait_current_set+0x33>
c010a351:	c7 44 24 0c bd ff 10 	movl   $0xc010ffbd,0xc(%esp)
c010a358:	c0 
c010a359:	c7 44 24 08 59 ff 10 	movl   $0xc010ff59,0x8(%esp)
c010a360:	c0 
c010a361:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a368:	00 
c010a369:	c7 04 24 6e ff 10 c0 	movl   $0xc010ff6e,(%esp)
c010a370:	e8 7f 6a ff ff       	call   c0100df4 <__panic>
    wait_init(wait, current);
c010a375:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010a37a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a37e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a381:	89 04 24             	mov    %eax,(%esp)
c010a384:	e8 8b fb ff ff       	call   c0109f14 <wait_init>
    current->state = PROC_SLEEPING;
c010a389:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010a38e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a394:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010a399:	8b 55 10             	mov    0x10(%ebp),%edx
c010a39c:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a3a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a3a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ac:	89 04 24             	mov    %eax,(%esp)
c010a3af:	e8 b9 fb ff ff       	call   c0109f6d <wait_queue_add>
}
c010a3b4:	c9                   	leave  
c010a3b5:	c3                   	ret    
c010a3b6:	66 90                	xchg   %ax,%ax

c010a3b8 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a3b8:	55                   	push   %ebp
c010a3b9:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a3bb:	8b 55 08             	mov    0x8(%ebp),%edx
c010a3be:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c010a3c3:	89 d1                	mov    %edx,%ecx
c010a3c5:	29 c1                	sub    %eax,%ecx
c010a3c7:	89 c8                	mov    %ecx,%eax
c010a3c9:	c1 f8 05             	sar    $0x5,%eax
}
c010a3cc:	5d                   	pop    %ebp
c010a3cd:	c3                   	ret    

c010a3ce <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a3ce:	55                   	push   %ebp
c010a3cf:	89 e5                	mov    %esp,%ebp
c010a3d1:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a3d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3d7:	89 04 24             	mov    %eax,(%esp)
c010a3da:	e8 d9 ff ff ff       	call   c010a3b8 <page2ppn>
c010a3df:	c1 e0 0c             	shl    $0xc,%eax
}
c010a3e2:	c9                   	leave  
c010a3e3:	c3                   	ret    

c010a3e4 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a3e4:	55                   	push   %ebp
c010a3e5:	89 e5                	mov    %esp,%ebp
c010a3e7:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a3ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3ed:	89 04 24             	mov    %eax,(%esp)
c010a3f0:	e8 d9 ff ff ff       	call   c010a3ce <page2pa>
c010a3f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3fb:	c1 e8 0c             	shr    $0xc,%eax
c010a3fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a401:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c010a406:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a409:	72 23                	jb     c010a42e <page2kva+0x4a>
c010a40b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a40e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a412:	c7 44 24 08 d0 ff 10 	movl   $0xc010ffd0,0x8(%esp)
c010a419:	c0 
c010a41a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a421:	00 
c010a422:	c7 04 24 f3 ff 10 c0 	movl   $0xc010fff3,(%esp)
c010a429:	e8 c6 69 ff ff       	call   c0100df4 <__panic>
c010a42e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a431:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a436:	c9                   	leave  
c010a437:	c3                   	ret    

c010a438 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a438:	55                   	push   %ebp
c010a439:	89 e5                	mov    %esp,%ebp
c010a43b:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a43e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a445:	e8 be 77 ff ff       	call   c0101c08 <ide_device_valid>
c010a44a:	85 c0                	test   %eax,%eax
c010a44c:	75 1c                	jne    c010a46a <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a44e:	c7 44 24 08 01 00 11 	movl   $0xc0110001,0x8(%esp)
c010a455:	c0 
c010a456:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a45d:	00 
c010a45e:	c7 04 24 1b 00 11 c0 	movl   $0xc011001b,(%esp)
c010a465:	e8 8a 69 ff ff       	call   c0100df4 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a46a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a471:	e8 d1 77 ff ff       	call   c0101c47 <ide_device_size>
c010a476:	c1 e8 03             	shr    $0x3,%eax
c010a479:	a3 9c 65 1c c0       	mov    %eax,0xc01c659c
}
c010a47e:	c9                   	leave  
c010a47f:	c3                   	ret    

c010a480 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a480:	55                   	push   %ebp
c010a481:	89 e5                	mov    %esp,%ebp
c010a483:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a486:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a489:	89 04 24             	mov    %eax,(%esp)
c010a48c:	e8 53 ff ff ff       	call   c010a3e4 <page2kva>
c010a491:	8b 55 08             	mov    0x8(%ebp),%edx
c010a494:	c1 ea 08             	shr    $0x8,%edx
c010a497:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a49a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a49e:	74 0b                	je     c010a4ab <swapfs_read+0x2b>
c010a4a0:	8b 15 9c 65 1c c0    	mov    0xc01c659c,%edx
c010a4a6:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a4a9:	72 23                	jb     c010a4ce <swapfs_read+0x4e>
c010a4ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ae:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a4b2:	c7 44 24 08 2c 00 11 	movl   $0xc011002c,0x8(%esp)
c010a4b9:	c0 
c010a4ba:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a4c1:	00 
c010a4c2:	c7 04 24 1b 00 11 c0 	movl   $0xc011001b,(%esp)
c010a4c9:	e8 26 69 ff ff       	call   c0100df4 <__panic>
c010a4ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a4d1:	c1 e2 03             	shl    $0x3,%edx
c010a4d4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a4db:	00 
c010a4dc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a4e0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a4e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a4eb:	e8 96 77 ff ff       	call   c0101c86 <ide_read_secs>
}
c010a4f0:	c9                   	leave  
c010a4f1:	c3                   	ret    

c010a4f2 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a4f2:	55                   	push   %ebp
c010a4f3:	89 e5                	mov    %esp,%ebp
c010a4f5:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a4f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4fb:	89 04 24             	mov    %eax,(%esp)
c010a4fe:	e8 e1 fe ff ff       	call   c010a3e4 <page2kva>
c010a503:	8b 55 08             	mov    0x8(%ebp),%edx
c010a506:	c1 ea 08             	shr    $0x8,%edx
c010a509:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a50c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a510:	74 0b                	je     c010a51d <swapfs_write+0x2b>
c010a512:	8b 15 9c 65 1c c0    	mov    0xc01c659c,%edx
c010a518:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a51b:	72 23                	jb     c010a540 <swapfs_write+0x4e>
c010a51d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a520:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a524:	c7 44 24 08 2c 00 11 	movl   $0xc011002c,0x8(%esp)
c010a52b:	c0 
c010a52c:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a533:	00 
c010a534:	c7 04 24 1b 00 11 c0 	movl   $0xc011001b,(%esp)
c010a53b:	e8 b4 68 ff ff       	call   c0100df4 <__panic>
c010a540:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a543:	c1 e2 03             	shl    $0x3,%edx
c010a546:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a54d:	00 
c010a54e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a552:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a556:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a55d:	e8 6d 79 ff ff       	call   c0101ecf <ide_write_secs>
}
c010a562:	c9                   	leave  
c010a563:	c3                   	ret    

c010a564 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a564:	52                   	push   %edx
    call *%ebx              # call fn
c010a565:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a567:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a568:	e8 77 0c 00 00       	call   c010b1e4 <do_exit>
c010a56d:	66 90                	xchg   %ax,%ax
c010a56f:	90                   	nop

c010a570 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a570:	55                   	push   %ebp
c010a571:	89 e5                	mov    %esp,%ebp
c010a573:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a576:	8b 55 10             	mov    0x10(%ebp),%edx
c010a579:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57c:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a57e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a581:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a584:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a587:	8b 45 08             	mov    0x8(%ebp),%eax
c010a58a:	83 c0 08             	add    $0x8,%eax
c010a58d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a590:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a593:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a596:	89 50 04             	mov    %edx,0x4(%eax)
c010a599:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a59c:	8b 50 04             	mov    0x4(%eax),%edx
c010a59f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a5a2:	89 10                	mov    %edx,(%eax)
    return timer;
c010a5a4:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a5a7:	c9                   	leave  
c010a5a8:	c3                   	ret    

c010a5a9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a5a9:	55                   	push   %ebp
c010a5aa:	89 e5                	mov    %esp,%ebp
c010a5ac:	53                   	push   %ebx
c010a5ad:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a5b0:	9c                   	pushf  
c010a5b1:	5b                   	pop    %ebx
c010a5b2:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010a5b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a5b8:	25 00 02 00 00       	and    $0x200,%eax
c010a5bd:	85 c0                	test   %eax,%eax
c010a5bf:	74 0c                	je     c010a5cd <__intr_save+0x24>
        intr_disable();
c010a5c1:	e8 54 7b ff ff       	call   c010211a <intr_disable>
        return 1;
c010a5c6:	b8 01 00 00 00       	mov    $0x1,%eax
c010a5cb:	eb 05                	jmp    c010a5d2 <__intr_save+0x29>
    }
    return 0;
c010a5cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a5d2:	83 c4 14             	add    $0x14,%esp
c010a5d5:	5b                   	pop    %ebx
c010a5d6:	5d                   	pop    %ebp
c010a5d7:	c3                   	ret    

c010a5d8 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a5d8:	55                   	push   %ebp
c010a5d9:	89 e5                	mov    %esp,%ebp
c010a5db:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a5de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a5e2:	74 05                	je     c010a5e9 <__intr_restore+0x11>
        intr_enable();
c010a5e4:	e8 2b 7b ff ff       	call   c0102114 <intr_enable>
    }
}
c010a5e9:	c9                   	leave  
c010a5ea:	c3                   	ret    

c010a5eb <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a5eb:	55                   	push   %ebp
c010a5ec:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a5ee:	8b 55 08             	mov    0x8(%ebp),%edx
c010a5f1:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c010a5f6:	89 d1                	mov    %edx,%ecx
c010a5f8:	29 c1                	sub    %eax,%ecx
c010a5fa:	89 c8                	mov    %ecx,%eax
c010a5fc:	c1 f8 05             	sar    $0x5,%eax
}
c010a5ff:	5d                   	pop    %ebp
c010a600:	c3                   	ret    

c010a601 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a601:	55                   	push   %ebp
c010a602:	89 e5                	mov    %esp,%ebp
c010a604:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a607:	8b 45 08             	mov    0x8(%ebp),%eax
c010a60a:	89 04 24             	mov    %eax,(%esp)
c010a60d:	e8 d9 ff ff ff       	call   c010a5eb <page2ppn>
c010a612:	c1 e0 0c             	shl    $0xc,%eax
}
c010a615:	c9                   	leave  
c010a616:	c3                   	ret    

c010a617 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a617:	55                   	push   %ebp
c010a618:	89 e5                	mov    %esp,%ebp
c010a61a:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a61d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a620:	89 c2                	mov    %eax,%edx
c010a622:	c1 ea 0c             	shr    $0xc,%edx
c010a625:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c010a62a:	39 c2                	cmp    %eax,%edx
c010a62c:	72 1c                	jb     c010a64a <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a62e:	c7 44 24 08 4c 00 11 	movl   $0xc011004c,0x8(%esp)
c010a635:	c0 
c010a636:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a63d:	00 
c010a63e:	c7 04 24 6b 00 11 c0 	movl   $0xc011006b,(%esp)
c010a645:	e8 aa 67 ff ff       	call   c0100df4 <__panic>
    }
    return &pages[PPN(pa)];
c010a64a:	a1 f0 64 1c c0       	mov    0xc01c64f0,%eax
c010a64f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a652:	c1 ea 0c             	shr    $0xc,%edx
c010a655:	c1 e2 05             	shl    $0x5,%edx
c010a658:	01 d0                	add    %edx,%eax
}
c010a65a:	c9                   	leave  
c010a65b:	c3                   	ret    

c010a65c <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a65c:	55                   	push   %ebp
c010a65d:	89 e5                	mov    %esp,%ebp
c010a65f:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a662:	8b 45 08             	mov    0x8(%ebp),%eax
c010a665:	89 04 24             	mov    %eax,(%esp)
c010a668:	e8 94 ff ff ff       	call   c010a601 <page2pa>
c010a66d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a673:	c1 e8 0c             	shr    $0xc,%eax
c010a676:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a679:	a1 a0 43 1c c0       	mov    0xc01c43a0,%eax
c010a67e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a681:	72 23                	jb     c010a6a6 <page2kva+0x4a>
c010a683:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a686:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a68a:	c7 44 24 08 7c 00 11 	movl   $0xc011007c,0x8(%esp)
c010a691:	c0 
c010a692:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a699:	00 
c010a69a:	c7 04 24 6b 00 11 c0 	movl   $0xc011006b,(%esp)
c010a6a1:	e8 4e 67 ff ff       	call   c0100df4 <__panic>
c010a6a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6a9:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a6ae:	c9                   	leave  
c010a6af:	c3                   	ret    

c010a6b0 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a6b0:	55                   	push   %ebp
c010a6b1:	89 e5                	mov    %esp,%ebp
c010a6b3:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a6b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6bc:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a6c3:	77 23                	ja     c010a6e8 <kva2page+0x38>
c010a6c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a6cc:	c7 44 24 08 a0 00 11 	movl   $0xc01100a0,0x8(%esp)
c010a6d3:	c0 
c010a6d4:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a6db:	00 
c010a6dc:	c7 04 24 6b 00 11 c0 	movl   $0xc011006b,(%esp)
c010a6e3:	e8 0c 67 ff ff       	call   c0100df4 <__panic>
c010a6e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6eb:	05 00 00 00 40       	add    $0x40000000,%eax
c010a6f0:	89 04 24             	mov    %eax,(%esp)
c010a6f3:	e8 1f ff ff ff       	call   c010a617 <pa2page>
}
c010a6f8:	c9                   	leave  
c010a6f9:	c3                   	ret    

c010a6fa <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a6fa:	55                   	push   %ebp
c010a6fb:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a6fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a700:	8b 40 18             	mov    0x18(%eax),%eax
c010a703:	8d 50 01             	lea    0x1(%eax),%edx
c010a706:	8b 45 08             	mov    0x8(%ebp),%eax
c010a709:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a70c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a70f:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a712:	5d                   	pop    %ebp
c010a713:	c3                   	ret    

c010a714 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a714:	55                   	push   %ebp
c010a715:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a717:	8b 45 08             	mov    0x8(%ebp),%eax
c010a71a:	8b 40 18             	mov    0x18(%eax),%eax
c010a71d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a720:	8b 45 08             	mov    0x8(%ebp),%eax
c010a723:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a726:	8b 45 08             	mov    0x8(%ebp),%eax
c010a729:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a72c:	5d                   	pop    %ebp
c010a72d:	c3                   	ret    

c010a72e <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a72e:	55                   	push   %ebp
c010a72f:	89 e5                	mov    %esp,%ebp
c010a731:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a734:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a738:	74 25                	je     c010a75f <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a73a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a73d:	83 c0 1c             	add    $0x1c,%eax
c010a740:	89 04 24             	mov    %eax,(%esp)
c010a743:	e8 40 f7 ff ff       	call   c0109e88 <down>
        if (current != NULL) {
c010a748:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010a74d:	85 c0                	test   %eax,%eax
c010a74f:	74 0e                	je     c010a75f <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a751:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010a756:	8b 50 04             	mov    0x4(%eax),%edx
c010a759:	8b 45 08             	mov    0x8(%ebp),%eax
c010a75c:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a75f:	c9                   	leave  
c010a760:	c3                   	ret    

c010a761 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a761:	55                   	push   %ebp
c010a762:	89 e5                	mov    %esp,%ebp
c010a764:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a767:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a76b:	74 18                	je     c010a785 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a76d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a770:	83 c0 1c             	add    $0x1c,%eax
c010a773:	89 04 24             	mov    %eax,(%esp)
c010a776:	e8 f2 f6 ff ff       	call   c0109e6d <up>
        mm->locked_by = 0;
c010a77b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a77e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a785:	c9                   	leave  
c010a786:	c3                   	ret    

c010a787 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a787:	55                   	push   %ebp
c010a788:	89 e5                	mov    %esp,%ebp
c010a78a:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a78d:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a794:	e8 fc a5 ff ff       	call   c0104d95 <kmalloc>
c010a799:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a79c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a7a0:	0f 84 28 01 00 00    	je     c010a8ce <alloc_proc+0x147>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
       proc->state = PROC_UNINIT;
c010a7a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7a9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
       proc->pid = -1;
c010a7af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7b2:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
       proc->runs = 0;
c010a7b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7bc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
       proc->kstack = 0; 
c010a7c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7c6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
       proc->need_resched = 0;
c010a7cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7d0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
       proc->parent = NULL;
c010a7d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7da:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
       proc->mm = NULL;
c010a7e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
       memset(&(proc->context), 0, sizeof(struct context));
c010a7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ee:	83 c0 1c             	add    $0x1c,%eax
c010a7f1:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a7f8:	00 
c010a7f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a800:	00 
c010a801:	89 04 24             	mov    %eax,(%esp)
c010a804:	e8 fe 30 00 00       	call   c010d907 <memset>
       proc->tf = NULL;
c010a809:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a80c:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
       proc->cr3 = boot_cr3;
c010a813:	8b 15 ec 64 1c c0    	mov    0xc01c64ec,%edx
c010a819:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a81c:	89 50 40             	mov    %edx,0x40(%eax)
       proc->flags = 0;
c010a81f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a822:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
       memset(proc->name, 0, PROC_NAME_LEN);
c010a829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a82c:	83 c0 48             	add    $0x48,%eax
c010a82f:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a836:	00 
c010a837:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a83e:	00 
c010a83f:	89 04 24             	mov    %eax,(%esp)
c010a842:	e8 c0 30 00 00       	call   c010d907 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
       proc->wait_state = 0;
c010a847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a84a:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a851:	00 00 00 
       proc->cptr = NULL;
c010a854:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a857:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
c010a85e:	00 00 00 
       proc->yptr = NULL;
c010a861:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a864:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a86b:	00 00 00 
       proc->optr = NULL;
c010a86e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a871:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010a878:	00 00 00 
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
       proc->rq = NULL;
c010a87b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a87e:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a885:	00 00 00 
       list_init(&(proc->run_link));
c010a888:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a88b:	05 a4 00 00 00       	add    $0xa4,%eax
c010a890:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a893:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a896:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a899:	89 50 04             	mov    %edx,0x4(%eax)
c010a89c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a89f:	8b 50 04             	mov    0x4(%eax),%edx
c010a8a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8a5:	89 10                	mov    %edx,(%eax)
       proc->time_slice = 0;
c010a8a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8aa:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a8b1:	00 00 00 
       //proc->lab6_run_pool = NULL;
       proc->lab6_stride = 0;
c010a8b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8b7:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010a8be:	00 00 00 
       proc->lab6_priority = 1;
c010a8c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8c4:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010a8cb:	00 00 00 
    }
    return proc;
c010a8ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a8d1:	c9                   	leave  
c010a8d2:	c3                   	ret    

c010a8d3 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a8d3:	55                   	push   %ebp
c010a8d4:	89 e5                	mov    %esp,%ebp
c010a8d6:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a8d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8dc:	83 c0 48             	add    $0x48,%eax
c010a8df:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a8e6:	00 
c010a8e7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a8ee:	00 
c010a8ef:	89 04 24             	mov    %eax,(%esp)
c010a8f2:	e8 10 30 00 00       	call   c010d907 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a8f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8fa:	8d 50 48             	lea    0x48(%eax),%edx
c010a8fd:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a904:	00 
c010a905:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a908:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a90c:	89 14 24             	mov    %edx,(%esp)
c010a90f:	e8 f5 30 00 00       	call   c010da09 <memcpy>
}
c010a914:	c9                   	leave  
c010a915:	c3                   	ret    

c010a916 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a916:	55                   	push   %ebp
c010a917:	89 e5                	mov    %esp,%ebp
c010a919:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a91c:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a923:	00 
c010a924:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a92b:	00 
c010a92c:	c7 04 24 80 64 1c c0 	movl   $0xc01c6480,(%esp)
c010a933:	e8 cf 2f 00 00       	call   c010d907 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a938:	8b 45 08             	mov    0x8(%ebp),%eax
c010a93b:	83 c0 48             	add    $0x48,%eax
c010a93e:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a945:	00 
c010a946:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a94a:	c7 04 24 80 64 1c c0 	movl   $0xc01c6480,(%esp)
c010a951:	e8 b3 30 00 00       	call   c010da09 <memcpy>
}
c010a956:	c9                   	leave  
c010a957:	c3                   	ret    

c010a958 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a958:	55                   	push   %ebp
c010a959:	89 e5                	mov    %esp,%ebp
c010a95b:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a95e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a961:	83 c0 7c             	add    $0x7c,%eax
c010a964:	c7 45 fc 44 67 1c c0 	movl   $0xc01c6744,-0x4(%ebp)
c010a96b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a96e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a971:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a974:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a977:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a97a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a97d:	8b 40 04             	mov    0x4(%eax),%eax
c010a980:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a983:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a986:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a989:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a98c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a98f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a992:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a995:	89 10                	mov    %edx,(%eax)
c010a997:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a99a:	8b 10                	mov    (%eax),%edx
c010a99c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a99f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a9a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a9a8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a9ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9ae:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9b1:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a9b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b6:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a9bd:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a9c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9c3:	8b 40 14             	mov    0x14(%eax),%eax
c010a9c6:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a9cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9cf:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a9d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a9de:	85 c0                	test   %eax,%eax
c010a9e0:	74 12                	je     c010a9f4 <set_links+0x9c>
        proc->optr->yptr = proc;
c010a9e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9e5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a9eb:	8b 55 08             	mov    0x8(%ebp),%edx
c010a9ee:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a9f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9f7:	8b 40 14             	mov    0x14(%eax),%eax
c010a9fa:	8b 55 08             	mov    0x8(%ebp),%edx
c010a9fd:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010aa03:	a1 60 64 1c c0       	mov    0xc01c6460,%eax
c010aa08:	83 c0 01             	add    $0x1,%eax
c010aa0b:	a3 60 64 1c c0       	mov    %eax,0xc01c6460
}
c010aa10:	c9                   	leave  
c010aa11:	c3                   	ret    

c010aa12 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010aa12:	55                   	push   %ebp
c010aa13:	89 e5                	mov    %esp,%ebp
c010aa15:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010aa18:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa1b:	83 c0 7c             	add    $0x7c,%eax
c010aa1e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010aa21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aa24:	8b 40 04             	mov    0x4(%eax),%eax
c010aa27:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010aa2a:	8b 12                	mov    (%edx),%edx
c010aa2c:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010aa2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010aa32:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aa35:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa38:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010aa3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa3e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010aa41:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010aa43:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa46:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aa4c:	85 c0                	test   %eax,%eax
c010aa4e:	74 18                	je     c010aa68 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010aa50:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa53:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aa59:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa5c:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010aa62:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010aa68:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa6b:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010aa71:	85 c0                	test   %eax,%eax
c010aa73:	74 1a                	je     c010aa8f <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010aa75:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa78:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010aa7e:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa81:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010aa87:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010aa8d:	eb 15                	jmp    c010aaa4 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010aa8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa92:	8b 40 14             	mov    0x14(%eax),%eax
c010aa95:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa98:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010aa9e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010aaa4:	a1 60 64 1c c0       	mov    0xc01c6460,%eax
c010aaa9:	83 e8 01             	sub    $0x1,%eax
c010aaac:	a3 60 64 1c c0       	mov    %eax,0xc01c6460
}
c010aab1:	c9                   	leave  
c010aab2:	c3                   	ret    

c010aab3 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010aab3:	55                   	push   %ebp
c010aab4:	89 e5                	mov    %esp,%ebp
c010aab6:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010aab9:	c7 45 f8 44 67 1c c0 	movl   $0xc01c6744,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010aac0:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
c010aac5:	83 c0 01             	add    $0x1,%eax
c010aac8:	a3 8c 2a 13 c0       	mov    %eax,0xc0132a8c
c010aacd:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
c010aad2:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010aad7:	7e 0c                	jle    c010aae5 <get_pid+0x32>
        last_pid = 1;
c010aad9:	c7 05 8c 2a 13 c0 01 	movl   $0x1,0xc0132a8c
c010aae0:	00 00 00 
        goto inside;
c010aae3:	eb 13                	jmp    c010aaf8 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010aae5:	8b 15 8c 2a 13 c0    	mov    0xc0132a8c,%edx
c010aaeb:	a1 90 2a 13 c0       	mov    0xc0132a90,%eax
c010aaf0:	39 c2                	cmp    %eax,%edx
c010aaf2:	0f 8c ac 00 00 00    	jl     c010aba4 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010aaf8:	c7 05 90 2a 13 c0 00 	movl   $0x2000,0xc0132a90
c010aaff:	20 00 00 
    repeat:
        le = list;
c010ab02:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab05:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010ab08:	eb 7f                	jmp    c010ab89 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010ab0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab0d:	83 e8 7c             	sub    $0x7c,%eax
c010ab10:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010ab13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab16:	8b 50 04             	mov    0x4(%eax),%edx
c010ab19:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
c010ab1e:	39 c2                	cmp    %eax,%edx
c010ab20:	75 3e                	jne    c010ab60 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010ab22:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
c010ab27:	83 c0 01             	add    $0x1,%eax
c010ab2a:	a3 8c 2a 13 c0       	mov    %eax,0xc0132a8c
c010ab2f:	8b 15 8c 2a 13 c0    	mov    0xc0132a8c,%edx
c010ab35:	a1 90 2a 13 c0       	mov    0xc0132a90,%eax
c010ab3a:	39 c2                	cmp    %eax,%edx
c010ab3c:	7c 4b                	jl     c010ab89 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010ab3e:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
c010ab43:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ab48:	7e 0a                	jle    c010ab54 <get_pid+0xa1>
                        last_pid = 1;
c010ab4a:	c7 05 8c 2a 13 c0 01 	movl   $0x1,0xc0132a8c
c010ab51:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010ab54:	c7 05 90 2a 13 c0 00 	movl   $0x2000,0xc0132a90
c010ab5b:	20 00 00 
                    goto repeat;
c010ab5e:	eb a2                	jmp    c010ab02 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010ab60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab63:	8b 50 04             	mov    0x4(%eax),%edx
c010ab66:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
c010ab6b:	39 c2                	cmp    %eax,%edx
c010ab6d:	7e 1a                	jle    c010ab89 <get_pid+0xd6>
c010ab6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab72:	8b 50 04             	mov    0x4(%eax),%edx
c010ab75:	a1 90 2a 13 c0       	mov    0xc0132a90,%eax
c010ab7a:	39 c2                	cmp    %eax,%edx
c010ab7c:	7d 0b                	jge    c010ab89 <get_pid+0xd6>
                next_safe = proc->pid;
c010ab7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab81:	8b 40 04             	mov    0x4(%eax),%eax
c010ab84:	a3 90 2a 13 c0       	mov    %eax,0xc0132a90
c010ab89:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ab8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab92:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010ab95:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010ab98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab9b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010ab9e:	0f 85 66 ff ff ff    	jne    c010ab0a <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010aba4:	a1 8c 2a 13 c0       	mov    0xc0132a8c,%eax
}
c010aba9:	c9                   	leave  
c010abaa:	c3                   	ret    

c010abab <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010abab:	55                   	push   %ebp
c010abac:	89 e5                	mov    %esp,%ebp
c010abae:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010abb1:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010abb6:	39 45 08             	cmp    %eax,0x8(%ebp)
c010abb9:	74 63                	je     c010ac1e <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010abbb:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010abc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abc3:	8b 45 08             	mov    0x8(%ebp),%eax
c010abc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010abc9:	e8 db f9 ff ff       	call   c010a5a9 <__intr_save>
c010abce:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010abd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010abd4:	a3 48 44 1c c0       	mov    %eax,0xc01c4448
            load_esp0(next->kstack + KSTACKSIZE);
c010abd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abdc:	8b 40 0c             	mov    0xc(%eax),%eax
c010abdf:	05 00 20 00 00       	add    $0x2000,%eax
c010abe4:	89 04 24             	mov    %eax,(%esp)
c010abe7:	e8 e3 a4 ff ff       	call   c01050cf <load_esp0>
            lcr3(next->cr3);
c010abec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abef:	8b 40 40             	mov    0x40(%eax),%eax
c010abf2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010abf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abf8:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010abfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abfe:	8d 50 1c             	lea    0x1c(%eax),%edx
c010ac01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac04:	83 c0 1c             	add    $0x1c,%eax
c010ac07:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ac0b:	89 04 24             	mov    %eax,(%esp)
c010ac0e:	e8 55 16 00 00       	call   c010c268 <switch_to>
        }
        local_intr_restore(intr_flag);
c010ac13:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac16:	89 04 24             	mov    %eax,(%esp)
c010ac19:	e8 ba f9 ff ff       	call   c010a5d8 <__intr_restore>
    }
}
c010ac1e:	c9                   	leave  
c010ac1f:	c3                   	ret    

c010ac20 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010ac20:	55                   	push   %ebp
c010ac21:	89 e5                	mov    %esp,%ebp
c010ac23:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010ac26:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010ac2b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac2e:	89 04 24             	mov    %eax,(%esp)
c010ac31:	e8 f4 7e ff ff       	call   c0102b2a <forkrets>
}
c010ac36:	c9                   	leave  
c010ac37:	c3                   	ret    

c010ac38 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010ac38:	55                   	push   %ebp
c010ac39:	89 e5                	mov    %esp,%ebp
c010ac3b:	53                   	push   %ebx
c010ac3c:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010ac3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac42:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010ac48:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac4b:	8b 40 04             	mov    0x4(%eax),%eax
c010ac4e:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ac55:	00 
c010ac56:	89 04 24             	mov    %eax,(%esp)
c010ac59:	e8 72 21 00 00       	call   c010cdd0 <hash32>
c010ac5e:	c1 e0 03             	shl    $0x3,%eax
c010ac61:	05 60 44 1c c0       	add    $0xc01c4460,%eax
c010ac66:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac69:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ac6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac75:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ac78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac7b:	8b 40 04             	mov    0x4(%eax),%eax
c010ac7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ac81:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ac84:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ac87:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010ac8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ac8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ac90:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ac93:	89 10                	mov    %edx,(%eax)
c010ac95:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ac98:	8b 10                	mov    (%eax),%edx
c010ac9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ac9d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010aca0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aca3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010aca6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010aca9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010acac:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010acaf:	89 10                	mov    %edx,(%eax)
}
c010acb1:	83 c4 34             	add    $0x34,%esp
c010acb4:	5b                   	pop    %ebx
c010acb5:	5d                   	pop    %ebp
c010acb6:	c3                   	ret    

c010acb7 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010acb7:	55                   	push   %ebp
c010acb8:	89 e5                	mov    %esp,%ebp
c010acba:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010acbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010acc0:	05 84 00 00 00       	add    $0x84,%eax
c010acc5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010acc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010accb:	8b 40 04             	mov    0x4(%eax),%eax
c010acce:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010acd1:	8b 12                	mov    (%edx),%edx
c010acd3:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010acd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010acd9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010acdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010acdf:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ace2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ace5:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ace8:	89 10                	mov    %edx,(%eax)
}
c010acea:	c9                   	leave  
c010aceb:	c3                   	ret    

c010acec <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010acec:	55                   	push   %ebp
c010aced:	89 e5                	mov    %esp,%ebp
c010acef:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010acf2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010acf6:	7e 61                	jle    c010ad59 <find_proc+0x6d>
c010acf8:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010acff:	7f 58                	jg     c010ad59 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010ad01:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad04:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ad0b:	00 
c010ad0c:	89 04 24             	mov    %eax,(%esp)
c010ad0f:	e8 bc 20 00 00       	call   c010cdd0 <hash32>
c010ad14:	c1 e0 03             	shl    $0x3,%eax
c010ad17:	05 60 44 1c c0       	add    $0xc01c4460,%eax
c010ad1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad22:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010ad25:	eb 1b                	jmp    c010ad42 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010ad27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad2a:	2d 84 00 00 00       	sub    $0x84,%eax
c010ad2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010ad32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad35:	8b 40 04             	mov    0x4(%eax),%eax
c010ad38:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ad3b:	75 05                	jne    c010ad42 <find_proc+0x56>
                return proc;
c010ad3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad40:	eb 1c                	jmp    c010ad5e <find_proc+0x72>
c010ad42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad45:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ad48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad4b:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010ad4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad54:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ad57:	75 ce                	jne    c010ad27 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010ad59:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad5e:	c9                   	leave  
c010ad5f:	c3                   	ret    

c010ad60 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010ad60:	55                   	push   %ebp
c010ad61:	89 e5                	mov    %esp,%ebp
c010ad63:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010ad66:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010ad6d:	00 
c010ad6e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ad75:	00 
c010ad76:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ad79:	89 04 24             	mov    %eax,(%esp)
c010ad7c:	e8 86 2b 00 00       	call   c010d907 <memset>
    tf.tf_cs = KERNEL_CS;
c010ad81:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010ad87:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010ad8d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010ad91:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010ad95:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010ad99:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010ad9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada0:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010ada3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ada6:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010ada9:	b8 64 a5 10 c0       	mov    $0xc010a564,%eax
c010adae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010adb1:	8b 45 10             	mov    0x10(%ebp),%eax
c010adb4:	89 c2                	mov    %eax,%edx
c010adb6:	80 ce 01             	or     $0x1,%dh
c010adb9:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010adbc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010adc0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010adc7:	00 
c010adc8:	89 14 24             	mov    %edx,(%esp)
c010adcb:	e8 27 03 00 00       	call   c010b0f7 <do_fork>
}
c010add0:	c9                   	leave  
c010add1:	c3                   	ret    

c010add2 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010add2:	55                   	push   %ebp
c010add3:	89 e5                	mov    %esp,%ebp
c010add5:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010add8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010addf:	e8 39 a4 ff ff       	call   c010521d <alloc_pages>
c010ade4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010ade7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adeb:	74 1a                	je     c010ae07 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010aded:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adf0:	89 04 24             	mov    %eax,(%esp)
c010adf3:	e8 64 f8 ff ff       	call   c010a65c <page2kva>
c010adf8:	89 c2                	mov    %eax,%edx
c010adfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010adfd:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010ae00:	b8 00 00 00 00       	mov    $0x0,%eax
c010ae05:	eb 05                	jmp    c010ae0c <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010ae07:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010ae0c:	c9                   	leave  
c010ae0d:	c3                   	ret    

c010ae0e <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010ae0e:	55                   	push   %ebp
c010ae0f:	89 e5                	mov    %esp,%ebp
c010ae11:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010ae14:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae17:	8b 40 0c             	mov    0xc(%eax),%eax
c010ae1a:	89 04 24             	mov    %eax,(%esp)
c010ae1d:	e8 8e f8 ff ff       	call   c010a6b0 <kva2page>
c010ae22:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010ae29:	00 
c010ae2a:	89 04 24             	mov    %eax,(%esp)
c010ae2d:	e8 56 a4 ff ff       	call   c0105288 <free_pages>
}
c010ae32:	c9                   	leave  
c010ae33:	c3                   	ret    

c010ae34 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010ae34:	55                   	push   %ebp
c010ae35:	89 e5                	mov    %esp,%ebp
c010ae37:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010ae3a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ae41:	e8 d7 a3 ff ff       	call   c010521d <alloc_pages>
c010ae46:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae4d:	75 0a                	jne    c010ae59 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010ae4f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010ae54:	e9 80 00 00 00       	jmp    c010aed9 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010ae59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae5c:	89 04 24             	mov    %eax,(%esp)
c010ae5f:	e8 f8 f7 ff ff       	call   c010a65c <page2kva>
c010ae64:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010ae67:	a1 a4 43 1c c0       	mov    0xc01c43a4,%eax
c010ae6c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010ae73:	00 
c010ae74:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae7b:	89 04 24             	mov    %eax,(%esp)
c010ae7e:	e8 86 2b 00 00       	call   c010da09 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010ae83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae86:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010ae8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae92:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010ae99:	77 23                	ja     c010aebe <setup_pgdir+0x8a>
c010ae9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aea2:	c7 44 24 08 a0 00 11 	movl   $0xc01100a0,0x8(%esp)
c010aea9:	c0 
c010aeaa:	c7 44 24 04 40 01 00 	movl   $0x140,0x4(%esp)
c010aeb1:	00 
c010aeb2:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010aeb9:	e8 36 5f ff ff       	call   c0100df4 <__panic>
c010aebe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aec1:	05 00 00 00 40       	add    $0x40000000,%eax
c010aec6:	83 c8 03             	or     $0x3,%eax
c010aec9:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010aecb:	8b 45 08             	mov    0x8(%ebp),%eax
c010aece:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aed1:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010aed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aed9:	c9                   	leave  
c010aeda:	c3                   	ret    

c010aedb <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010aedb:	55                   	push   %ebp
c010aedc:	89 e5                	mov    %esp,%ebp
c010aede:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010aee1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aee4:	8b 40 0c             	mov    0xc(%eax),%eax
c010aee7:	89 04 24             	mov    %eax,(%esp)
c010aeea:	e8 c1 f7 ff ff       	call   c010a6b0 <kva2page>
c010aeef:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010aef6:	00 
c010aef7:	89 04 24             	mov    %eax,(%esp)
c010aefa:	e8 89 a3 ff ff       	call   c0105288 <free_pages>
}
c010aeff:	c9                   	leave  
c010af00:	c3                   	ret    

c010af01 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010af01:	55                   	push   %ebp
c010af02:	89 e5                	mov    %esp,%ebp
c010af04:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010af07:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010af0c:	8b 40 18             	mov    0x18(%eax),%eax
c010af0f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010af12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010af16:	75 0a                	jne    c010af22 <copy_mm+0x21>
        return 0;
c010af18:	b8 00 00 00 00       	mov    $0x0,%eax
c010af1d:	e9 fb 00 00 00       	jmp    c010b01d <copy_mm+0x11c>
    }
    if (clone_flags & CLONE_VM) {
c010af22:	8b 45 08             	mov    0x8(%ebp),%eax
c010af25:	25 00 01 00 00       	and    $0x100,%eax
c010af2a:	85 c0                	test   %eax,%eax
c010af2c:	74 08                	je     c010af36 <copy_mm+0x35>
        mm = oldmm;
c010af2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af31:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010af34:	eb 5d                	jmp    c010af93 <copy_mm+0x92>
    }

    int ret = -E_NO_MEM;
c010af36:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010af3d:	e8 74 d0 ff ff       	call   c0107fb6 <mm_create>
c010af42:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af49:	0f 84 ca 00 00 00    	je     c010b019 <copy_mm+0x118>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010af4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af52:	89 04 24             	mov    %eax,(%esp)
c010af55:	e8 da fe ff ff       	call   c010ae34 <setup_pgdir>
c010af5a:	85 c0                	test   %eax,%eax
c010af5c:	0f 85 a9 00 00 00    	jne    c010b00b <copy_mm+0x10a>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010af62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af65:	89 04 24             	mov    %eax,(%esp)
c010af68:	e8 c1 f7 ff ff       	call   c010a72e <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010af6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af77:	89 04 24             	mov    %eax,(%esp)
c010af7a:	e8 54 d5 ff ff       	call   c01084d3 <dup_mmap>
c010af7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010af82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af85:	89 04 24             	mov    %eax,(%esp)
c010af88:	e8 d4 f7 ff ff       	call   c010a761 <unlock_mm>

    if (ret != 0) {
c010af8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af91:	75 5f                	jne    c010aff2 <copy_mm+0xf1>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010af93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af96:	89 04 24             	mov    %eax,(%esp)
c010af99:	e8 5c f7 ff ff       	call   c010a6fa <mm_count_inc>
    proc->mm = mm;
c010af9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afa1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010afa4:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010afa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afaa:	8b 40 0c             	mov    0xc(%eax),%eax
c010afad:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010afb0:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010afb7:	77 23                	ja     c010afdc <copy_mm+0xdb>
c010afb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010afbc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010afc0:	c7 44 24 08 a0 00 11 	movl   $0xc01100a0,0x8(%esp)
c010afc7:	c0 
c010afc8:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c010afcf:	00 
c010afd0:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010afd7:	e8 18 5e ff ff       	call   c0100df4 <__panic>
c010afdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010afdf:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010afe5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afe8:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010afeb:	b8 00 00 00 00       	mov    $0x0,%eax
c010aff0:	eb 2b                	jmp    c010b01d <copy_mm+0x11c>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010aff2:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010aff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aff6:	89 04 24             	mov    %eax,(%esp)
c010aff9:	e8 d6 d5 ff ff       	call   c01085d4 <exit_mmap>
    put_pgdir(mm);
c010affe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b001:	89 04 24             	mov    %eax,(%esp)
c010b004:	e8 d2 fe ff ff       	call   c010aedb <put_pgdir>
c010b009:	eb 01                	jmp    c010b00c <copy_mm+0x10b>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010b00b:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b00c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b00f:	89 04 24             	mov    %eax,(%esp)
c010b012:	e8 fa d2 ff ff       	call   c0108311 <mm_destroy>
c010b017:	eb 01                	jmp    c010b01a <copy_mm+0x119>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010b019:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010b01a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b01d:	c9                   	leave  
c010b01e:	c3                   	ret    

c010b01f <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010b01f:	55                   	push   %ebp
c010b020:	89 e5                	mov    %esp,%ebp
c010b022:	57                   	push   %edi
c010b023:	56                   	push   %esi
c010b024:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010b025:	8b 45 08             	mov    0x8(%ebp),%eax
c010b028:	8b 40 0c             	mov    0xc(%eax),%eax
c010b02b:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010b030:	89 c2                	mov    %eax,%edx
c010b032:	8b 45 08             	mov    0x8(%ebp),%eax
c010b035:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010b038:	8b 45 08             	mov    0x8(%ebp),%eax
c010b03b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b03e:	8b 55 10             	mov    0x10(%ebp),%edx
c010b041:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010b046:	89 c1                	mov    %eax,%ecx
c010b048:	83 e1 01             	and    $0x1,%ecx
c010b04b:	85 c9                	test   %ecx,%ecx
c010b04d:	74 0e                	je     c010b05d <copy_thread+0x3e>
c010b04f:	0f b6 0a             	movzbl (%edx),%ecx
c010b052:	88 08                	mov    %cl,(%eax)
c010b054:	83 c0 01             	add    $0x1,%eax
c010b057:	83 c2 01             	add    $0x1,%edx
c010b05a:	83 eb 01             	sub    $0x1,%ebx
c010b05d:	89 c1                	mov    %eax,%ecx
c010b05f:	83 e1 02             	and    $0x2,%ecx
c010b062:	85 c9                	test   %ecx,%ecx
c010b064:	74 0f                	je     c010b075 <copy_thread+0x56>
c010b066:	0f b7 0a             	movzwl (%edx),%ecx
c010b069:	66 89 08             	mov    %cx,(%eax)
c010b06c:	83 c0 02             	add    $0x2,%eax
c010b06f:	83 c2 02             	add    $0x2,%edx
c010b072:	83 eb 02             	sub    $0x2,%ebx
c010b075:	89 d9                	mov    %ebx,%ecx
c010b077:	c1 e9 02             	shr    $0x2,%ecx
c010b07a:	89 c7                	mov    %eax,%edi
c010b07c:	89 d6                	mov    %edx,%esi
c010b07e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b080:	89 f2                	mov    %esi,%edx
c010b082:	89 f8                	mov    %edi,%eax
c010b084:	b9 00 00 00 00       	mov    $0x0,%ecx
c010b089:	89 de                	mov    %ebx,%esi
c010b08b:	83 e6 02             	and    $0x2,%esi
c010b08e:	85 f6                	test   %esi,%esi
c010b090:	74 0b                	je     c010b09d <copy_thread+0x7e>
c010b092:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010b096:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010b09a:	83 c1 02             	add    $0x2,%ecx
c010b09d:	83 e3 01             	and    $0x1,%ebx
c010b0a0:	85 db                	test   %ebx,%ebx
c010b0a2:	74 07                	je     c010b0ab <copy_thread+0x8c>
c010b0a4:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010b0a8:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010b0ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ae:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0b1:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010b0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0bb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0be:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0c1:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010b0c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0ca:	8b 55 08             	mov    0x8(%ebp),%edx
c010b0cd:	8b 52 3c             	mov    0x3c(%edx),%edx
c010b0d0:	8b 52 40             	mov    0x40(%edx),%edx
c010b0d3:	80 ce 02             	or     $0x2,%dh
c010b0d6:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010b0d9:	ba 20 ac 10 c0       	mov    $0xc010ac20,%edx
c010b0de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e1:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010b0e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0ea:	89 c2                	mov    %eax,%edx
c010b0ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ef:	89 50 20             	mov    %edx,0x20(%eax)
}
c010b0f2:	5b                   	pop    %ebx
c010b0f3:	5e                   	pop    %esi
c010b0f4:	5f                   	pop    %edi
c010b0f5:	5d                   	pop    %ebp
c010b0f6:	c3                   	ret    

c010b0f7 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010b0f7:	55                   	push   %ebp
c010b0f8:	89 e5                	mov    %esp,%ebp
c010b0fa:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010b0fd:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010b104:	a1 60 64 1c c0       	mov    0xc01c6460,%eax
c010b109:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010b10e:	0f 8f a9 00 00 00    	jg     c010b1bd <do_fork+0xc6>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010b114:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */

    if ((proc = alloc_proc()) == NULL)
c010b11b:	e8 67 f6 ff ff       	call   c010a787 <alloc_proc>
c010b120:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b123:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b127:	0f 84 93 00 00 00    	je     c010b1c0 <do_fork+0xc9>
        goto fork_out;
    current->wait_state = 0;
c010b12d:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b132:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010b139:	00 00 00 
    //if (current->wait_state != 0) 
    //   goto bad_fork_cleanup_proc;
    proc->parent = current;
c010b13c:	8b 15 48 44 1c c0    	mov    0xc01c4448,%edx
c010b142:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b145:	89 50 14             	mov    %edx,0x14(%eax)

    if (setup_kstack(proc) != 0)
c010b148:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b14b:	89 04 24             	mov    %eax,(%esp)
c010b14e:	e8 7f fc ff ff       	call   c010add2 <setup_kstack>
c010b153:	85 c0                	test   %eax,%eax
c010b155:	75 7d                	jne    c010b1d4 <do_fork+0xdd>
        goto bad_fork_cleanup_proc;

    if (copy_mm(clone_flags, proc) != 0)
c010b157:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b15a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b15e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b161:	89 04 24             	mov    %eax,(%esp)
c010b164:	e8 98 fd ff ff       	call   c010af01 <copy_mm>
c010b169:	85 c0                	test   %eax,%eax
c010b16b:	75 59                	jne    c010b1c6 <do_fork+0xcf>
        goto bad_fork_cleanup_kstack;

    copy_thread(proc, stack, tf);
c010b16d:	8b 45 10             	mov    0x10(%ebp),%eax
c010b170:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b174:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b177:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b17b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b17e:	89 04 24             	mov    %eax,(%esp)
c010b181:	e8 99 fe ff ff       	call   c010b01f <copy_thread>

    proc->pid = get_pid();
c010b186:	e8 28 f9 ff ff       	call   c010aab3 <get_pid>
c010b18b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b18e:	89 42 04             	mov    %eax,0x4(%edx)
    hash_proc(proc);
c010b191:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b194:	89 04 24             	mov    %eax,(%esp)
c010b197:	e8 9c fa ff ff       	call   c010ac38 <hash_proc>
    //nr_process++;
    //list_add_before(&proc_list, &proc->list_link);
    set_links(proc);
c010b19c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b19f:	89 04 24             	mov    %eax,(%esp)
c010b1a2:	e8 b1 f7 ff ff       	call   c010a958 <set_links>

    wakeup_proc(proc);
c010b1a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1aa:	89 04 24             	mov    %eax,(%esp)
c010b1ad:	e8 72 15 00 00       	call   c010c724 <wakeup_proc>

    ret = proc->pid;
c010b1b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1b5:	8b 40 04             	mov    0x4(%eax),%eax
c010b1b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1bb:	eb 04                	jmp    c010b1c1 <do_fork+0xca>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010b1bd:	90                   	nop
c010b1be:	eb 01                	jmp    c010b1c1 <do_fork+0xca>
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */

    if ((proc = alloc_proc()) == NULL)
        goto fork_out;
c010b1c0:	90                   	nop
    wakeup_proc(proc);

    ret = proc->pid;

fork_out:
    return ret;
c010b1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1c4:	eb 1c                	jmp    c010b1e2 <do_fork+0xeb>

    if (setup_kstack(proc) != 0)
        goto bad_fork_cleanup_proc;

    if (copy_mm(clone_flags, proc) != 0)
        goto bad_fork_cleanup_kstack;
c010b1c6:	90                   	nop

fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010b1c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1ca:	89 04 24             	mov    %eax,(%esp)
c010b1cd:	e8 3c fc ff ff       	call   c010ae0e <put_kstack>
c010b1d2:	eb 01                	jmp    c010b1d5 <do_fork+0xde>
    //if (current->wait_state != 0) 
    //   goto bad_fork_cleanup_proc;
    proc->parent = current;

    if (setup_kstack(proc) != 0)
        goto bad_fork_cleanup_proc;
c010b1d4:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010b1d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1d8:	89 04 24             	mov    %eax,(%esp)
c010b1db:	e8 d0 9b ff ff       	call   c0104db0 <kfree>
    goto fork_out;
c010b1e0:	eb df                	jmp    c010b1c1 <do_fork+0xca>
}
c010b1e2:	c9                   	leave  
c010b1e3:	c3                   	ret    

c010b1e4 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b1e4:	55                   	push   %ebp
c010b1e5:	89 e5                	mov    %esp,%ebp
c010b1e7:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010b1ea:	8b 15 48 44 1c c0    	mov    0xc01c4448,%edx
c010b1f0:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010b1f5:	39 c2                	cmp    %eax,%edx
c010b1f7:	75 1c                	jne    c010b215 <do_exit+0x31>
        panic("idleproc exit.\n");
c010b1f9:	c7 44 24 08 d8 00 11 	movl   $0xc01100d8,0x8(%esp)
c010b200:	c0 
c010b201:	c7 44 24 04 e1 01 00 	movl   $0x1e1,0x4(%esp)
c010b208:	00 
c010b209:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b210:	e8 df 5b ff ff       	call   c0100df4 <__panic>
    }
    if (current == initproc) {
c010b215:	8b 15 48 44 1c c0    	mov    0xc01c4448,%edx
c010b21b:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010b220:	39 c2                	cmp    %eax,%edx
c010b222:	75 1c                	jne    c010b240 <do_exit+0x5c>
        panic("initproc exit.\n");
c010b224:	c7 44 24 08 e8 00 11 	movl   $0xc01100e8,0x8(%esp)
c010b22b:	c0 
c010b22c:	c7 44 24 04 e4 01 00 	movl   $0x1e4,0x4(%esp)
c010b233:	00 
c010b234:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b23b:	e8 b4 5b ff ff       	call   c0100df4 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010b240:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b245:	8b 40 18             	mov    0x18(%eax),%eax
c010b248:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b24b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b24f:	74 4a                	je     c010b29b <do_exit+0xb7>
        lcr3(boot_cr3);
c010b251:	a1 ec 64 1c c0       	mov    0xc01c64ec,%eax
c010b256:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b259:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b25c:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b25f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b262:	89 04 24             	mov    %eax,(%esp)
c010b265:	e8 aa f4 ff ff       	call   c010a714 <mm_count_dec>
c010b26a:	85 c0                	test   %eax,%eax
c010b26c:	75 21                	jne    c010b28f <do_exit+0xab>
            exit_mmap(mm);
c010b26e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b271:	89 04 24             	mov    %eax,(%esp)
c010b274:	e8 5b d3 ff ff       	call   c01085d4 <exit_mmap>
            put_pgdir(mm);
c010b279:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b27c:	89 04 24             	mov    %eax,(%esp)
c010b27f:	e8 57 fc ff ff       	call   c010aedb <put_pgdir>
            mm_destroy(mm);
c010b284:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b287:	89 04 24             	mov    %eax,(%esp)
c010b28a:	e8 82 d0 ff ff       	call   c0108311 <mm_destroy>
        }
        current->mm = NULL;
c010b28f:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b294:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b29b:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b2a0:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b2a6:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b2ab:	8b 55 08             	mov    0x8(%ebp),%edx
c010b2ae:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b2b4:	e8 f0 f2 ff ff       	call   c010a5a9 <__intr_save>
c010b2b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b2bc:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b2c1:	8b 40 14             	mov    0x14(%eax),%eax
c010b2c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b2c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2ca:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b2d0:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b2d5:	0f 85 b9 00 00 00    	jne    c010b394 <do_exit+0x1b0>
            wakeup_proc(proc);
c010b2db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2de:	89 04 24             	mov    %eax,(%esp)
c010b2e1:	e8 3e 14 00 00       	call   c010c724 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b2e6:	e9 a9 00 00 00       	jmp    c010b394 <do_exit+0x1b0>
            proc = current->cptr;
c010b2eb:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b2f0:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b2f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b2f9:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b2fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b301:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b307:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010b30d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b310:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b317:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b31a:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010b31f:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b325:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b328:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b32e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b331:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b337:	85 c0                	test   %eax,%eax
c010b339:	74 14                	je     c010b34f <do_exit+0x16b>
                initproc->cptr->yptr = proc;
c010b33b:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010b340:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b346:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b349:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b34f:	8b 15 44 44 1c c0    	mov    0xc01c4444,%edx
c010b355:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b358:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b35b:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010b360:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b363:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b369:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b36c:	8b 00                	mov    (%eax),%eax
c010b36e:	83 f8 03             	cmp    $0x3,%eax
c010b371:	75 22                	jne    c010b395 <do_exit+0x1b1>
                if (initproc->wait_state == WT_CHILD) {
c010b373:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010b378:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b37e:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b383:	75 10                	jne    c010b395 <do_exit+0x1b1>
                    wakeup_proc(initproc);
c010b385:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010b38a:	89 04 24             	mov    %eax,(%esp)
c010b38d:	e8 92 13 00 00       	call   c010c724 <wakeup_proc>
c010b392:	eb 01                	jmp    c010b395 <do_exit+0x1b1>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b394:	90                   	nop
c010b395:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b39a:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b3a0:	85 c0                	test   %eax,%eax
c010b3a2:	0f 85 43 ff ff ff    	jne    c010b2eb <do_exit+0x107>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b3a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3ab:	89 04 24             	mov    %eax,(%esp)
c010b3ae:	e8 25 f2 ff ff       	call   c010a5d8 <__intr_restore>
    
    schedule();
c010b3b3:	e8 08 14 00 00       	call   c010c7c0 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b3b8:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b3bd:	8b 40 04             	mov    0x4(%eax),%eax
c010b3c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b3c4:	c7 44 24 08 f8 00 11 	movl   $0xc01100f8,0x8(%esp)
c010b3cb:	c0 
c010b3cc:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c010b3d3:	00 
c010b3d4:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b3db:	e8 14 5a ff ff       	call   c0100df4 <__panic>

c010b3e0 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b3e0:	55                   	push   %ebp
c010b3e1:	89 e5                	mov    %esp,%ebp
c010b3e3:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b3e6:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b3eb:	8b 40 18             	mov    0x18(%eax),%eax
c010b3ee:	85 c0                	test   %eax,%eax
c010b3f0:	74 1c                	je     c010b40e <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b3f2:	c7 44 24 08 18 01 11 	movl   $0xc0110118,0x8(%esp)
c010b3f9:	c0 
c010b3fa:	c7 44 24 04 1a 02 00 	movl   $0x21a,0x4(%esp)
c010b401:	00 
c010b402:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b409:	e8 e6 59 ff ff       	call   c0100df4 <__panic>
    }

    int ret = -E_NO_MEM;
c010b40e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b415:	e8 9c cb ff ff       	call   c0107fb6 <mm_create>
c010b41a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b41d:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b421:	0f 84 34 06 00 00    	je     c010ba5b <load_icode+0x67b>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b427:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b42a:	89 04 24             	mov    %eax,(%esp)
c010b42d:	e8 02 fa ff ff       	call   c010ae34 <setup_pgdir>
c010b432:	85 c0                	test   %eax,%eax
c010b434:	0f 85 13 06 00 00    	jne    c010ba4d <load_icode+0x66d>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b43a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b43d:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b440:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b443:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b446:	8b 45 08             	mov    0x8(%ebp),%eax
c010b449:	01 d0                	add    %edx,%eax
c010b44b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b44e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b451:	8b 00                	mov    (%eax),%eax
c010b453:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b458:	74 0c                	je     c010b466 <load_icode+0x86>
        ret = -E_INVAL_ELF;
c010b45a:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b461:	e9 da 05 00 00       	jmp    c010ba40 <load_icode+0x660>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b466:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b469:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b46d:	0f b7 c0             	movzwl %ax,%eax
c010b470:	89 c2                	mov    %eax,%edx
c010b472:	c1 e2 05             	shl    $0x5,%edx
c010b475:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b478:	01 d0                	add    %edx,%eax
c010b47a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b47d:	e9 25 03 00 00       	jmp    c010b7a7 <load_icode+0x3c7>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b482:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b485:	8b 00                	mov    (%eax),%eax
c010b487:	83 f8 01             	cmp    $0x1,%eax
c010b48a:	0f 85 0c 03 00 00    	jne    c010b79c <load_icode+0x3bc>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b490:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b493:	8b 50 10             	mov    0x10(%eax),%edx
c010b496:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b499:	8b 40 14             	mov    0x14(%eax),%eax
c010b49c:	39 c2                	cmp    %eax,%edx
c010b49e:	76 0c                	jbe    c010b4ac <load_icode+0xcc>
            ret = -E_INVAL_ELF;
c010b4a0:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b4a7:	e9 89 05 00 00       	jmp    c010ba35 <load_icode+0x655>
        }
        if (ph->p_filesz == 0) {
c010b4ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4af:	8b 40 10             	mov    0x10(%eax),%eax
c010b4b2:	85 c0                	test   %eax,%eax
c010b4b4:	0f 84 e5 02 00 00    	je     c010b79f <load_icode+0x3bf>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b4ba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b4c1:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b4c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4cb:	8b 40 18             	mov    0x18(%eax),%eax
c010b4ce:	83 e0 01             	and    $0x1,%eax
c010b4d1:	85 c0                	test   %eax,%eax
c010b4d3:	74 04                	je     c010b4d9 <load_icode+0xf9>
c010b4d5:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b4d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4dc:	8b 40 18             	mov    0x18(%eax),%eax
c010b4df:	83 e0 02             	and    $0x2,%eax
c010b4e2:	85 c0                	test   %eax,%eax
c010b4e4:	74 04                	je     c010b4ea <load_icode+0x10a>
c010b4e6:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b4ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4ed:	8b 40 18             	mov    0x18(%eax),%eax
c010b4f0:	83 e0 04             	and    $0x4,%eax
c010b4f3:	85 c0                	test   %eax,%eax
c010b4f5:	74 04                	je     c010b4fb <load_icode+0x11b>
c010b4f7:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b4fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4fe:	83 e0 02             	and    $0x2,%eax
c010b501:	85 c0                	test   %eax,%eax
c010b503:	74 04                	je     c010b509 <load_icode+0x129>
c010b505:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b509:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b50c:	8b 50 14             	mov    0x14(%eax),%edx
c010b50f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b512:	8b 40 08             	mov    0x8(%eax),%eax
c010b515:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b51c:	00 
c010b51d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b520:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b524:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b528:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b52c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b52f:	89 04 24             	mov    %eax,(%esp)
c010b532:	e8 7c ce ff ff       	call   c01083b3 <mm_map>
c010b537:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b53a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b53e:	0f 85 e7 04 00 00    	jne    c010ba2b <load_icode+0x64b>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010b544:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b547:	8b 50 04             	mov    0x4(%eax),%edx
c010b54a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b54d:	01 d0                	add    %edx,%eax
c010b54f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b552:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b555:	8b 40 08             	mov    0x8(%eax),%eax
c010b558:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b55b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b55e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b561:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b564:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b569:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b56c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b573:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b576:	8b 50 08             	mov    0x8(%eax),%edx
c010b579:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b57c:	8b 40 10             	mov    0x10(%eax),%eax
c010b57f:	01 d0                	add    %edx,%eax
c010b581:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b584:	e9 93 00 00 00       	jmp    c010b61c <load_icode+0x23c>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b589:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b58c:	8b 40 0c             	mov    0xc(%eax),%eax
c010b58f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b592:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b596:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b599:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b59d:	89 04 24             	mov    %eax,(%esp)
c010b5a0:	e8 80 ab ff ff       	call   c0106125 <pgdir_alloc_page>
c010b5a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b5ac:	0f 84 7c 04 00 00    	je     c010ba2e <load_icode+0x64e>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b5b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b5b5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b5b8:	89 d1                	mov    %edx,%ecx
c010b5ba:	29 c1                	sub    %eax,%ecx
c010b5bc:	89 c8                	mov    %ecx,%eax
c010b5be:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b5c1:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b5c6:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b5c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b5cc:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b5d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b5d6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b5d9:	73 0f                	jae    c010b5ea <load_icode+0x20a>
                size -= la - end;
c010b5db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b5de:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b5e1:	89 d1                	mov    %edx,%ecx
c010b5e3:	29 c1                	sub    %eax,%ecx
c010b5e5:	89 c8                	mov    %ecx,%eax
c010b5e7:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b5ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5ed:	89 04 24             	mov    %eax,(%esp)
c010b5f0:	e8 67 f0 ff ff       	call   c010a65c <page2kva>
c010b5f5:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b5f8:	01 c2                	add    %eax,%edx
c010b5fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b5fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b601:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b604:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b608:	89 14 24             	mov    %edx,(%esp)
c010b60b:	e8 f9 23 00 00       	call   c010da09 <memcpy>
            start += size, from += size;
c010b610:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b613:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b616:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b619:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b61c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b61f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b622:	0f 82 61 ff ff ff    	jb     c010b589 <load_icode+0x1a9>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b628:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b62b:	8b 50 08             	mov    0x8(%eax),%edx
c010b62e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b631:	8b 40 14             	mov    0x14(%eax),%eax
c010b634:	01 d0                	add    %edx,%eax
c010b636:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b639:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b63c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b63f:	0f 83 49 01 00 00    	jae    c010b78e <load_icode+0x3ae>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b645:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b648:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b64b:	0f 84 51 01 00 00    	je     c010b7a2 <load_icode+0x3c2>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b651:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b654:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b657:	89 d1                	mov    %edx,%ecx
c010b659:	29 c1                	sub    %eax,%ecx
c010b65b:	89 c8                	mov    %ecx,%eax
c010b65d:	05 00 10 00 00       	add    $0x1000,%eax
c010b662:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b665:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b66a:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b66d:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b670:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b673:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b676:	73 0f                	jae    c010b687 <load_icode+0x2a7>
                size -= la - end;
c010b678:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b67b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b67e:	89 d1                	mov    %edx,%ecx
c010b680:	29 c1                	sub    %eax,%ecx
c010b682:	89 c8                	mov    %ecx,%eax
c010b684:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b68a:	89 04 24             	mov    %eax,(%esp)
c010b68d:	e8 ca ef ff ff       	call   c010a65c <page2kva>
c010b692:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b695:	01 c2                	add    %eax,%edx
c010b697:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b69a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b69e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b6a5:	00 
c010b6a6:	89 14 24             	mov    %edx,(%esp)
c010b6a9:	e8 59 22 00 00       	call   c010d907 <memset>
            start += size;
c010b6ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b6b1:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b6b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b6b7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b6ba:	73 0c                	jae    c010b6c8 <load_icode+0x2e8>
c010b6bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b6bf:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b6c2:	0f 84 c6 00 00 00    	je     c010b78e <load_icode+0x3ae>
c010b6c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b6cb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b6ce:	72 0c                	jb     c010b6dc <load_icode+0x2fc>
c010b6d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b6d3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b6d6:	0f 84 b2 00 00 00    	je     c010b78e <load_icode+0x3ae>
c010b6dc:	c7 44 24 0c 40 01 11 	movl   $0xc0110140,0xc(%esp)
c010b6e3:	c0 
c010b6e4:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010b6eb:	c0 
c010b6ec:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c010b6f3:	00 
c010b6f4:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b6fb:	e8 f4 56 ff ff       	call   c0100df4 <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b700:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b703:	8b 40 0c             	mov    0xc(%eax),%eax
c010b706:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b709:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b70d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b710:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b714:	89 04 24             	mov    %eax,(%esp)
c010b717:	e8 09 aa ff ff       	call   c0106125 <pgdir_alloc_page>
c010b71c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b71f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b723:	0f 84 08 03 00 00    	je     c010ba31 <load_icode+0x651>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b729:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b72c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b72f:	89 d1                	mov    %edx,%ecx
c010b731:	29 c1                	sub    %eax,%ecx
c010b733:	89 c8                	mov    %ecx,%eax
c010b735:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b738:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b73d:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b740:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b743:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b74a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b74d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b750:	73 0f                	jae    c010b761 <load_icode+0x381>
                size -= la - end;
c010b752:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b755:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b758:	89 d1                	mov    %edx,%ecx
c010b75a:	29 c1                	sub    %eax,%ecx
c010b75c:	89 c8                	mov    %ecx,%eax
c010b75e:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b761:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b764:	89 04 24             	mov    %eax,(%esp)
c010b767:	e8 f0 ee ff ff       	call   c010a65c <page2kva>
c010b76c:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b76f:	01 c2                	add    %eax,%edx
c010b771:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b774:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b778:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b77f:	00 
c010b780:	89 14 24             	mov    %edx,(%esp)
c010b783:	e8 7f 21 00 00       	call   c010d907 <memset>
            start += size;
c010b788:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b78b:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b78e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b791:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b794:	0f 82 66 ff ff ff    	jb     c010b700 <load_icode+0x320>
c010b79a:	eb 07                	jmp    c010b7a3 <load_icode+0x3c3>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010b79c:	90                   	nop
c010b79d:	eb 04                	jmp    c010b7a3 <load_icode+0x3c3>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010b79f:	90                   	nop
c010b7a0:	eb 01                	jmp    c010b7a3 <load_icode+0x3c3>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010b7a2:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b7a3:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b7a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7aa:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b7ad:	0f 82 cf fc ff ff    	jb     c010b482 <load_icode+0xa2>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b7b3:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b7ba:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b7c1:	00 
c010b7c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7c5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7c9:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b7d0:	00 
c010b7d1:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b7d8:	af 
c010b7d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7dc:	89 04 24             	mov    %eax,(%esp)
c010b7df:	e8 cf cb ff ff       	call   c01083b3 <mm_map>
c010b7e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b7e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7eb:	0f 85 43 02 00 00    	jne    c010ba34 <load_icode+0x654>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b7f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7f4:	8b 40 0c             	mov    0xc(%eax),%eax
c010b7f7:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b7fe:	00 
c010b7ff:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b806:	af 
c010b807:	89 04 24             	mov    %eax,(%esp)
c010b80a:	e8 16 a9 ff ff       	call   c0106125 <pgdir_alloc_page>
c010b80f:	85 c0                	test   %eax,%eax
c010b811:	75 24                	jne    c010b837 <load_icode+0x457>
c010b813:	c7 44 24 0c 90 01 11 	movl   $0xc0110190,0xc(%esp)
c010b81a:	c0 
c010b81b:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010b822:	c0 
c010b823:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010b82a:	00 
c010b82b:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b832:	e8 bd 55 ff ff       	call   c0100df4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b837:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b83a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b83d:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b844:	00 
c010b845:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b84c:	af 
c010b84d:	89 04 24             	mov    %eax,(%esp)
c010b850:	e8 d0 a8 ff ff       	call   c0106125 <pgdir_alloc_page>
c010b855:	85 c0                	test   %eax,%eax
c010b857:	75 24                	jne    c010b87d <load_icode+0x49d>
c010b859:	c7 44 24 0c d4 01 11 	movl   $0xc01101d4,0xc(%esp)
c010b860:	c0 
c010b861:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010b868:	c0 
c010b869:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010b870:	00 
c010b871:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b878:	e8 77 55 ff ff       	call   c0100df4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b87d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b880:	8b 40 0c             	mov    0xc(%eax),%eax
c010b883:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b88a:	00 
c010b88b:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b892:	af 
c010b893:	89 04 24             	mov    %eax,(%esp)
c010b896:	e8 8a a8 ff ff       	call   c0106125 <pgdir_alloc_page>
c010b89b:	85 c0                	test   %eax,%eax
c010b89d:	75 24                	jne    c010b8c3 <load_icode+0x4e3>
c010b89f:	c7 44 24 0c 18 02 11 	movl   $0xc0110218,0xc(%esp)
c010b8a6:	c0 
c010b8a7:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010b8ae:	c0 
c010b8af:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010b8b6:	00 
c010b8b7:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b8be:	e8 31 55 ff ff       	call   c0100df4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b8c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8c6:	8b 40 0c             	mov    0xc(%eax),%eax
c010b8c9:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b8d0:	00 
c010b8d1:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b8d8:	af 
c010b8d9:	89 04 24             	mov    %eax,(%esp)
c010b8dc:	e8 44 a8 ff ff       	call   c0106125 <pgdir_alloc_page>
c010b8e1:	85 c0                	test   %eax,%eax
c010b8e3:	75 24                	jne    c010b909 <load_icode+0x529>
c010b8e5:	c7 44 24 0c 5c 02 11 	movl   $0xc011025c,0xc(%esp)
c010b8ec:	c0 
c010b8ed:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010b8f4:	c0 
c010b8f5:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010b8fc:	00 
c010b8fd:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b904:	e8 eb 54 ff ff       	call   c0100df4 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b909:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b90c:	89 04 24             	mov    %eax,(%esp)
c010b90f:	e8 e6 ed ff ff       	call   c010a6fa <mm_count_inc>
    current->mm = mm;
c010b914:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b919:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b91c:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b91f:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b924:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b927:	8b 52 0c             	mov    0xc(%edx),%edx
c010b92a:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b92d:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b934:	77 23                	ja     c010b959 <load_icode+0x579>
c010b936:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b939:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b93d:	c7 44 24 08 a0 00 11 	movl   $0xc01100a0,0x8(%esp)
c010b944:	c0 
c010b945:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c010b94c:	00 
c010b94d:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b954:	e8 9b 54 ff ff       	call   c0100df4 <__panic>
c010b959:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b95c:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b962:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b965:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b968:	8b 40 0c             	mov    0xc(%eax),%eax
c010b96b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b96e:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b975:	77 23                	ja     c010b99a <load_icode+0x5ba>
c010b977:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b97a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b97e:	c7 44 24 08 a0 00 11 	movl   $0xc01100a0,0x8(%esp)
c010b985:	c0 
c010b986:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010b98d:	00 
c010b98e:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010b995:	e8 5a 54 ff ff       	call   c0100df4 <__panic>
c010b99a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b99d:	05 00 00 00 40       	add    $0x40000000,%eax
c010b9a2:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b9a5:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b9a8:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b9ab:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010b9b0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b9b3:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b9b6:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b9bd:	00 
c010b9be:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b9c5:	00 
c010b9c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9c9:	89 04 24             	mov    %eax,(%esp)
c010b9cc:	e8 36 1f 00 00       	call   c010d907 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b9d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9d4:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b9da:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9dd:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b9e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9e6:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b9ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9ed:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b9f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9f4:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b9f8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b9fb:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b9ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba02:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010ba09:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ba0c:	8b 50 18             	mov    0x18(%eax),%edx
c010ba0f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba12:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010ba15:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba18:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)

    ret = 0;
c010ba1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010ba26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba29:	eb 33                	jmp    c010ba5e <load_icode+0x67e>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010ba2b:	90                   	nop
c010ba2c:	eb 07                	jmp    c010ba35 <load_icode+0x655>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010ba2e:	90                   	nop
c010ba2f:	eb 04                	jmp    c010ba35 <load_icode+0x655>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010ba31:	90                   	nop
c010ba32:	eb 01                	jmp    c010ba35 <load_icode+0x655>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010ba34:	90                   	nop

    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010ba35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba38:	89 04 24             	mov    %eax,(%esp)
c010ba3b:	e8 94 cb ff ff       	call   c01085d4 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010ba40:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba43:	89 04 24             	mov    %eax,(%esp)
c010ba46:	e8 90 f4 ff ff       	call   c010aedb <put_pgdir>
c010ba4b:	eb 01                	jmp    c010ba4e <load_icode+0x66e>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010ba4d:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ba4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba51:	89 04 24             	mov    %eax,(%esp)
c010ba54:	e8 b8 c8 ff ff       	call   c0108311 <mm_destroy>
bad_mm:
    goto out;
c010ba59:	eb cb                	jmp    c010ba26 <load_icode+0x646>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010ba5b:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010ba5c:	eb c8                	jmp    c010ba26 <load_icode+0x646>
}
c010ba5e:	c9                   	leave  
c010ba5f:	c3                   	ret    

c010ba60 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010ba60:	55                   	push   %ebp
c010ba61:	89 e5                	mov    %esp,%ebp
c010ba63:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010ba66:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010ba6b:	8b 40 18             	mov    0x18(%eax),%eax
c010ba6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010ba71:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba74:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010ba7b:	00 
c010ba7c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ba7f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ba83:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba8a:	89 04 24             	mov    %eax,(%esp)
c010ba8d:	e8 2f d4 ff ff       	call   c0108ec1 <user_mem_check>
c010ba92:	85 c0                	test   %eax,%eax
c010ba94:	75 0a                	jne    c010baa0 <do_execve+0x40>
        return -E_INVAL;
c010ba96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ba9b:	e9 f6 00 00 00       	jmp    c010bb96 <do_execve+0x136>
    }
    if (len > PROC_NAME_LEN) {
c010baa0:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010baa4:	76 07                	jbe    c010baad <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010baa6:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010baad:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bab4:	00 
c010bab5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010babc:	00 
c010babd:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010bac0:	89 04 24             	mov    %eax,(%esp)
c010bac3:	e8 3f 1e 00 00       	call   c010d907 <memset>
    memcpy(local_name, name, len);
c010bac8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bacb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bacf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bad2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bad6:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010bad9:	89 04 24             	mov    %eax,(%esp)
c010badc:	e8 28 1f 00 00       	call   c010da09 <memcpy>

    if (mm != NULL) {
c010bae1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bae5:	74 4a                	je     c010bb31 <do_execve+0xd1>
        lcr3(boot_cr3);
c010bae7:	a1 ec 64 1c c0       	mov    0xc01c64ec,%eax
c010baec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010baef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010baf2:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010baf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baf8:	89 04 24             	mov    %eax,(%esp)
c010bafb:	e8 14 ec ff ff       	call   c010a714 <mm_count_dec>
c010bb00:	85 c0                	test   %eax,%eax
c010bb02:	75 21                	jne    c010bb25 <do_execve+0xc5>
            exit_mmap(mm);
c010bb04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb07:	89 04 24             	mov    %eax,(%esp)
c010bb0a:	e8 c5 ca ff ff       	call   c01085d4 <exit_mmap>
            put_pgdir(mm);
c010bb0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb12:	89 04 24             	mov    %eax,(%esp)
c010bb15:	e8 c1 f3 ff ff       	call   c010aedb <put_pgdir>
            mm_destroy(mm);
c010bb1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb1d:	89 04 24             	mov    %eax,(%esp)
c010bb20:	e8 ec c7 ff ff       	call   c0108311 <mm_destroy>
        }
        current->mm = NULL;
c010bb25:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bb2a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010bb31:	8b 45 14             	mov    0x14(%ebp),%eax
c010bb34:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb38:	8b 45 10             	mov    0x10(%ebp),%eax
c010bb3b:	89 04 24             	mov    %eax,(%esp)
c010bb3e:	e8 9d f8 ff ff       	call   c010b3e0 <load_icode>
c010bb43:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bb46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bb4a:	75 1b                	jne    c010bb67 <do_execve+0x107>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010bb4c:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bb51:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010bb54:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb58:	89 04 24             	mov    %eax,(%esp)
c010bb5b:	e8 73 ed ff ff       	call   c010a8d3 <set_proc_name>
    return 0;
c010bb60:	b8 00 00 00 00       	mov    $0x0,%eax
c010bb65:	eb 2f                	jmp    c010bb96 <do_execve+0x136>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010bb67:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010bb68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb6b:	89 04 24             	mov    %eax,(%esp)
c010bb6e:	e8 71 f6 ff ff       	call   c010b1e4 <do_exit>
    panic("already exit: %e.\n", ret);
c010bb73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb76:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bb7a:	c7 44 24 08 9f 02 11 	movl   $0xc011029f,0x8(%esp)
c010bb81:	c0 
c010bb82:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c010bb89:	00 
c010bb8a:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bb91:	e8 5e 52 ff ff       	call   c0100df4 <__panic>
}
c010bb96:	c9                   	leave  
c010bb97:	c3                   	ret    

c010bb98 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010bb98:	55                   	push   %ebp
c010bb99:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010bb9b:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bba0:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010bba7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bbac:	5d                   	pop    %ebp
c010bbad:	c3                   	ret    

c010bbae <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010bbae:	55                   	push   %ebp
c010bbaf:	89 e5                	mov    %esp,%ebp
c010bbb1:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010bbb4:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bbb9:	8b 40 18             	mov    0x18(%eax),%eax
c010bbbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010bbbf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bbc3:	74 31                	je     c010bbf6 <do_wait+0x48>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010bbc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbc8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bbcf:	00 
c010bbd0:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010bbd7:	00 
c010bbd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbdf:	89 04 24             	mov    %eax,(%esp)
c010bbe2:	e8 da d2 ff ff       	call   c0108ec1 <user_mem_check>
c010bbe7:	85 c0                	test   %eax,%eax
c010bbe9:	75 0b                	jne    c010bbf6 <do_wait+0x48>
            return -E_INVAL;
c010bbeb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bbf0:	e9 56 01 00 00       	jmp    c010bd4b <do_wait+0x19d>
        current->wait_state = WT_CHILD;
        schedule();
        if (current->flags & PF_EXITING) {
            do_exit(-E_KILLED);
        }
        goto repeat;
c010bbf5:	90                   	nop
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010bbf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010bbfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bc01:	74 39                	je     c010bc3c <do_wait+0x8e>
        proc = find_proc(pid);
c010bc03:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc06:	89 04 24             	mov    %eax,(%esp)
c010bc09:	e8 de f0 ff ff       	call   c010acec <find_proc>
c010bc0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010bc11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc15:	74 58                	je     c010bc6f <do_wait+0xc1>
c010bc17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc1a:	8b 50 14             	mov    0x14(%eax),%edx
c010bc1d:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bc22:	39 c2                	cmp    %eax,%edx
c010bc24:	75 49                	jne    c010bc6f <do_wait+0xc1>
            haskid = 1;
c010bc26:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bc2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc30:	8b 00                	mov    (%eax),%eax
c010bc32:	83 f8 03             	cmp    $0x3,%eax
c010bc35:	75 38                	jne    c010bc6f <do_wait+0xc1>
                goto found;
c010bc37:	e9 87 00 00 00       	jmp    c010bcc3 <do_wait+0x115>
            }
        }
    }
    else {
        proc = current->cptr;
c010bc3c:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bc41:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bc47:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010bc4a:	eb 1d                	jmp    c010bc69 <do_wait+0xbb>
            haskid = 1;
c010bc4c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bc53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc56:	8b 00                	mov    (%eax),%eax
c010bc58:	83 f8 03             	cmp    $0x3,%eax
c010bc5b:	74 65                	je     c010bcc2 <do_wait+0x114>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010bc5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc60:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bc66:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc6d:	75 dd                	jne    c010bc4c <do_wait+0x9e>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010bc6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc73:	74 43                	je     c010bcb8 <do_wait+0x10a>
        current->state = PROC_SLEEPING;
c010bc75:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bc7a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010bc80:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bc85:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010bc8c:	00 00 80 
        schedule();
c010bc8f:	e8 2c 0b 00 00       	call   c010c7c0 <schedule>
        if (current->flags & PF_EXITING) {
c010bc94:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bc99:	8b 40 44             	mov    0x44(%eax),%eax
c010bc9c:	83 e0 01             	and    $0x1,%eax
c010bc9f:	85 c0                	test   %eax,%eax
c010bca1:	0f 84 4e ff ff ff    	je     c010bbf5 <do_wait+0x47>
            do_exit(-E_KILLED);
c010bca7:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010bcae:	e8 31 f5 ff ff       	call   c010b1e4 <do_exit>
        }
        goto repeat;
c010bcb3:	e9 3d ff ff ff       	jmp    c010bbf5 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010bcb8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010bcbd:	e9 89 00 00 00       	jmp    c010bd4b <do_wait+0x19d>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010bcc2:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010bcc3:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010bcc8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bccb:	74 0a                	je     c010bcd7 <do_wait+0x129>
c010bccd:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010bcd2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bcd5:	75 1c                	jne    c010bcf3 <do_wait+0x145>
        panic("wait idleproc or initproc.\n");
c010bcd7:	c7 44 24 08 b2 02 11 	movl   $0xc01102b2,0x8(%esp)
c010bcde:	c0 
c010bcdf:	c7 44 24 04 04 03 00 	movl   $0x304,0x4(%esp)
c010bce6:	00 
c010bce7:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bcee:	e8 01 51 ff ff       	call   c0100df4 <__panic>
    }
    if (code_store != NULL) {
c010bcf3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bcf7:	74 0e                	je     c010bd07 <do_wait+0x159>
        *code_store = proc->exit_code;
c010bcf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcfc:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010bd02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd05:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010bd07:	e8 9d e8 ff ff       	call   c010a5a9 <__intr_save>
c010bd0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010bd0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd12:	89 04 24             	mov    %eax,(%esp)
c010bd15:	e8 9d ef ff ff       	call   c010acb7 <unhash_proc>
        remove_links(proc);
c010bd1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd1d:	89 04 24             	mov    %eax,(%esp)
c010bd20:	e8 ed ec ff ff       	call   c010aa12 <remove_links>
    }
    local_intr_restore(intr_flag);
c010bd25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd28:	89 04 24             	mov    %eax,(%esp)
c010bd2b:	e8 a8 e8 ff ff       	call   c010a5d8 <__intr_restore>
    put_kstack(proc);
c010bd30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd33:	89 04 24             	mov    %eax,(%esp)
c010bd36:	e8 d3 f0 ff ff       	call   c010ae0e <put_kstack>
    kfree(proc);
c010bd3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd3e:	89 04 24             	mov    %eax,(%esp)
c010bd41:	e8 6a 90 ff ff       	call   c0104db0 <kfree>
    return 0;
c010bd46:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd4b:	c9                   	leave  
c010bd4c:	c3                   	ret    

c010bd4d <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bd4d:	55                   	push   %ebp
c010bd4e:	89 e5                	mov    %esp,%ebp
c010bd50:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010bd53:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd56:	89 04 24             	mov    %eax,(%esp)
c010bd59:	e8 8e ef ff ff       	call   c010acec <find_proc>
c010bd5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd65:	74 44                	je     c010bdab <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010bd67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd6a:	8b 40 44             	mov    0x44(%eax),%eax
c010bd6d:	83 e0 01             	and    $0x1,%eax
c010bd70:	85 c0                	test   %eax,%eax
c010bd72:	75 30                	jne    c010bda4 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010bd74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd77:	8b 40 44             	mov    0x44(%eax),%eax
c010bd7a:	89 c2                	mov    %eax,%edx
c010bd7c:	83 ca 01             	or     $0x1,%edx
c010bd7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd82:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010bd85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd88:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010bd8e:	85 c0                	test   %eax,%eax
c010bd90:	79 0b                	jns    c010bd9d <do_kill+0x50>
                wakeup_proc(proc);
c010bd92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd95:	89 04 24             	mov    %eax,(%esp)
c010bd98:	e8 87 09 00 00       	call   c010c724 <wakeup_proc>
            }
            return 0;
c010bd9d:	b8 00 00 00 00       	mov    $0x0,%eax
c010bda2:	eb 0c                	jmp    c010bdb0 <do_kill+0x63>
        }
        return -E_KILLED;
c010bda4:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bda9:	eb 05                	jmp    c010bdb0 <do_kill+0x63>
    }
    return -E_INVAL;
c010bdab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bdb0:	c9                   	leave  
c010bdb1:	c3                   	ret    

c010bdb2 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010bdb2:	55                   	push   %ebp
c010bdb3:	89 e5                	mov    %esp,%ebp
c010bdb5:	57                   	push   %edi
c010bdb6:	56                   	push   %esi
c010bdb7:	53                   	push   %ebx
c010bdb8:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bdbb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdbe:	89 04 24             	mov    %eax,(%esp)
c010bdc1:	e8 02 18 00 00       	call   c010d5c8 <strlen>
c010bdc6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bdc9:	b8 04 00 00 00       	mov    $0x4,%eax
c010bdce:	8b 55 08             	mov    0x8(%ebp),%edx
c010bdd1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010bdd4:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bdd7:	8b 7d 10             	mov    0x10(%ebp),%edi
c010bdda:	89 c6                	mov    %eax,%esi
c010bddc:	89 f0                	mov    %esi,%eax
c010bdde:	cd 80                	int    $0x80
c010bde0:	89 c6                	mov    %eax,%esi
c010bde2:	89 75 e0             	mov    %esi,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010bde5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010bde8:	83 c4 2c             	add    $0x2c,%esp
c010bdeb:	5b                   	pop    %ebx
c010bdec:	5e                   	pop    %esi
c010bded:	5f                   	pop    %edi
c010bdee:	5d                   	pop    %ebp
c010bdef:	c3                   	ret    

c010bdf0 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010bdf0:	55                   	push   %ebp
c010bdf1:	89 e5                	mov    %esp,%ebp
c010bdf3:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
#else
    KERNEL_EXECVE(exit);
c010bdf6:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010bdfb:	8b 40 04             	mov    0x4(%eax),%eax
c010bdfe:	c7 44 24 08 ce 02 11 	movl   $0xc01102ce,0x8(%esp)
c010be05:	c0 
c010be06:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be0a:	c7 04 24 d4 02 11 c0 	movl   $0xc01102d4,(%esp)
c010be11:	e8 4d 45 ff ff       	call   c0100363 <cprintf>
c010be16:	b8 76 79 00 00       	mov    $0x7976,%eax
c010be1b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010be1f:	c7 44 24 04 38 9b 14 	movl   $0xc0149b38,0x4(%esp)
c010be26:	c0 
c010be27:	c7 04 24 ce 02 11 c0 	movl   $0xc01102ce,(%esp)
c010be2e:	e8 7f ff ff ff       	call   c010bdb2 <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010be33:	c7 44 24 08 fb 02 11 	movl   $0xc01102fb,0x8(%esp)
c010be3a:	c0 
c010be3b:	c7 44 24 04 4d 03 00 	movl   $0x34d,0x4(%esp)
c010be42:	00 
c010be43:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010be4a:	e8 a5 4f ff ff       	call   c0100df4 <__panic>

c010be4f <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010be4f:	55                   	push   %ebp
c010be50:	89 e5                	mov    %esp,%ebp
c010be52:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010be55:	e8 60 94 ff ff       	call   c01052ba <nr_free_pages>
c010be5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010be5d:	e8 16 8e ff ff       	call   c0104c78 <kallocated>
c010be62:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010be65:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010be6c:	00 
c010be6d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010be74:	00 
c010be75:	c7 04 24 f0 bd 10 c0 	movl   $0xc010bdf0,(%esp)
c010be7c:	e8 df ee ff ff       	call   c010ad60 <kernel_thread>
c010be81:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010be84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010be88:	7f 1c                	jg     c010bea6 <init_main+0x57>
        panic("create user_main failed.\n");
c010be8a:	c7 44 24 08 15 03 11 	movl   $0xc0110315,0x8(%esp)
c010be91:	c0 
c010be92:	c7 44 24 04 58 03 00 	movl   $0x358,0x4(%esp)
c010be99:	00 
c010be9a:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bea1:	e8 4e 4f ff ff       	call   c0100df4 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bea6:	e8 e4 d7 ff ff       	call   c010968f <check_sync>

    while (do_wait(0, NULL) == 0) {
c010beab:	eb 05                	jmp    c010beb2 <init_main+0x63>
        schedule();
c010bead:	e8 0e 09 00 00       	call   c010c7c0 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010beb2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010beb9:	00 
c010beba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bec1:	e8 e8 fc ff ff       	call   c010bbae <do_wait>
c010bec6:	85 c0                	test   %eax,%eax
c010bec8:	74 e3                	je     c010bead <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010beca:	c7 04 24 30 03 11 c0 	movl   $0xc0110330,(%esp)
c010bed1:	e8 8d 44 ff ff       	call   c0100363 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bed6:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010bedb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bee1:	85 c0                	test   %eax,%eax
c010bee3:	75 1e                	jne    c010bf03 <init_main+0xb4>
c010bee5:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010beea:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bef0:	85 c0                	test   %eax,%eax
c010bef2:	75 0f                	jne    c010bf03 <init_main+0xb4>
c010bef4:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010bef9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010beff:	85 c0                	test   %eax,%eax
c010bf01:	74 24                	je     c010bf27 <init_main+0xd8>
c010bf03:	c7 44 24 0c 54 03 11 	movl   $0xc0110354,0xc(%esp)
c010bf0a:	c0 
c010bf0b:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010bf12:	c0 
c010bf13:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c010bf1a:	00 
c010bf1b:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bf22:	e8 cd 4e ff ff       	call   c0100df4 <__panic>
    assert(nr_process == 2);
c010bf27:	a1 60 64 1c c0       	mov    0xc01c6460,%eax
c010bf2c:	83 f8 02             	cmp    $0x2,%eax
c010bf2f:	74 24                	je     c010bf55 <init_main+0x106>
c010bf31:	c7 44 24 0c 9f 03 11 	movl   $0xc011039f,0xc(%esp)
c010bf38:	c0 
c010bf39:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010bf40:	c0 
c010bf41:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
c010bf48:	00 
c010bf49:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bf50:	e8 9f 4e ff ff       	call   c0100df4 <__panic>
c010bf55:	c7 45 e8 44 67 1c c0 	movl   $0xc01c6744,-0x18(%ebp)
c010bf5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bf5f:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bf62:	8b 15 44 44 1c c0    	mov    0xc01c4444,%edx
c010bf68:	83 c2 7c             	add    $0x7c,%edx
c010bf6b:	39 d0                	cmp    %edx,%eax
c010bf6d:	74 24                	je     c010bf93 <init_main+0x144>
c010bf6f:	c7 44 24 0c b0 03 11 	movl   $0xc01103b0,0xc(%esp)
c010bf76:	c0 
c010bf77:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010bf7e:	c0 
c010bf7f:	c7 44 24 04 64 03 00 	movl   $0x364,0x4(%esp)
c010bf86:	00 
c010bf87:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bf8e:	e8 61 4e ff ff       	call   c0100df4 <__panic>
c010bf93:	c7 45 e4 44 67 1c c0 	movl   $0xc01c6744,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010bf9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bf9d:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010bf9f:	8b 15 44 44 1c c0    	mov    0xc01c4444,%edx
c010bfa5:	83 c2 7c             	add    $0x7c,%edx
c010bfa8:	39 d0                	cmp    %edx,%eax
c010bfaa:	74 24                	je     c010bfd0 <init_main+0x181>
c010bfac:	c7 44 24 0c e0 03 11 	movl   $0xc01103e0,0xc(%esp)
c010bfb3:	c0 
c010bfb4:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010bfbb:	c0 
c010bfbc:	c7 44 24 04 65 03 00 	movl   $0x365,0x4(%esp)
c010bfc3:	00 
c010bfc4:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010bfcb:	e8 24 4e ff ff       	call   c0100df4 <__panic>

    cprintf("init check memory pass.\n");
c010bfd0:	c7 04 24 10 04 11 c0 	movl   $0xc0110410,(%esp)
c010bfd7:	e8 87 43 ff ff       	call   c0100363 <cprintf>
    return 0;
c010bfdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bfe1:	c9                   	leave  
c010bfe2:	c3                   	ret    

c010bfe3 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010bfe3:	55                   	push   %ebp
c010bfe4:	89 e5                	mov    %esp,%ebp
c010bfe6:	83 ec 28             	sub    $0x28,%esp
c010bfe9:	c7 45 ec 44 67 1c c0 	movl   $0xc01c6744,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bff0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bff3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bff6:	89 50 04             	mov    %edx,0x4(%eax)
c010bff9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bffc:	8b 50 04             	mov    0x4(%eax),%edx
c010bfff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c002:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c004:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c00b:	eb 26                	jmp    c010c033 <proc_init+0x50>
        list_init(hash_list + i);
c010c00d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c010:	c1 e0 03             	shl    $0x3,%eax
c010c013:	05 60 44 1c c0       	add    $0xc01c4460,%eax
c010c018:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c01b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c01e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c021:	89 50 04             	mov    %edx,0x4(%eax)
c010c024:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c027:	8b 50 04             	mov    0x4(%eax),%edx
c010c02a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c02d:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c02f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010c033:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010c03a:	7e d1                	jle    c010c00d <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010c03c:	e8 46 e7 ff ff       	call   c010a787 <alloc_proc>
c010c041:	a3 40 44 1c c0       	mov    %eax,0xc01c4440
c010c046:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c04b:	85 c0                	test   %eax,%eax
c010c04d:	75 1c                	jne    c010c06b <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010c04f:	c7 44 24 08 29 04 11 	movl   $0xc0110429,0x8(%esp)
c010c056:	c0 
c010c057:	c7 44 24 04 77 03 00 	movl   $0x377,0x4(%esp)
c010c05e:	00 
c010c05f:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010c066:	e8 89 4d ff ff       	call   c0100df4 <__panic>
    }

    idleproc->pid = 0;
c010c06b:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c070:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010c077:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c07c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010c082:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c087:	ba 00 00 13 c0       	mov    $0xc0130000,%edx
c010c08c:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010c08f:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c094:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010c09b:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c0a0:	c7 44 24 04 41 04 11 	movl   $0xc0110441,0x4(%esp)
c010c0a7:	c0 
c010c0a8:	89 04 24             	mov    %eax,(%esp)
c010c0ab:	e8 23 e8 ff ff       	call   c010a8d3 <set_proc_name>
    nr_process ++;
c010c0b0:	a1 60 64 1c c0       	mov    0xc01c6460,%eax
c010c0b5:	83 c0 01             	add    $0x1,%eax
c010c0b8:	a3 60 64 1c c0       	mov    %eax,0xc01c6460

    current = idleproc;
c010c0bd:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c0c2:	a3 48 44 1c c0       	mov    %eax,0xc01c4448

    int pid = kernel_thread(init_main, NULL, 0);
c010c0c7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c0ce:	00 
c010c0cf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0d6:	00 
c010c0d7:	c7 04 24 4f be 10 c0 	movl   $0xc010be4f,(%esp)
c010c0de:	e8 7d ec ff ff       	call   c010ad60 <kernel_thread>
c010c0e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010c0e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c0ea:	7f 1c                	jg     c010c108 <proc_init+0x125>
        panic("create init_main failed.\n");
c010c0ec:	c7 44 24 08 46 04 11 	movl   $0xc0110446,0x8(%esp)
c010c0f3:	c0 
c010c0f4:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c010c0fb:	00 
c010c0fc:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010c103:	e8 ec 4c ff ff       	call   c0100df4 <__panic>
    }

    initproc = find_proc(pid);
c010c108:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c10b:	89 04 24             	mov    %eax,(%esp)
c010c10e:	e8 d9 eb ff ff       	call   c010acec <find_proc>
c010c113:	a3 44 44 1c c0       	mov    %eax,0xc01c4444
    set_proc_name(initproc, "init");
c010c118:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010c11d:	c7 44 24 04 60 04 11 	movl   $0xc0110460,0x4(%esp)
c010c124:	c0 
c010c125:	89 04 24             	mov    %eax,(%esp)
c010c128:	e8 a6 e7 ff ff       	call   c010a8d3 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010c12d:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c132:	85 c0                	test   %eax,%eax
c010c134:	74 0c                	je     c010c142 <proc_init+0x15f>
c010c136:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c13b:	8b 40 04             	mov    0x4(%eax),%eax
c010c13e:	85 c0                	test   %eax,%eax
c010c140:	74 24                	je     c010c166 <proc_init+0x183>
c010c142:	c7 44 24 0c 68 04 11 	movl   $0xc0110468,0xc(%esp)
c010c149:	c0 
c010c14a:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010c151:	c0 
c010c152:	c7 44 24 04 8b 03 00 	movl   $0x38b,0x4(%esp)
c010c159:	00 
c010c15a:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010c161:	e8 8e 4c ff ff       	call   c0100df4 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010c166:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010c16b:	85 c0                	test   %eax,%eax
c010c16d:	74 0d                	je     c010c17c <proc_init+0x199>
c010c16f:	a1 44 44 1c c0       	mov    0xc01c4444,%eax
c010c174:	8b 40 04             	mov    0x4(%eax),%eax
c010c177:	83 f8 01             	cmp    $0x1,%eax
c010c17a:	74 24                	je     c010c1a0 <proc_init+0x1bd>
c010c17c:	c7 44 24 0c 90 04 11 	movl   $0xc0110490,0xc(%esp)
c010c183:	c0 
c010c184:	c7 44 24 08 79 01 11 	movl   $0xc0110179,0x8(%esp)
c010c18b:	c0 
c010c18c:	c7 44 24 04 8c 03 00 	movl   $0x38c,0x4(%esp)
c010c193:	00 
c010c194:	c7 04 24 c4 00 11 c0 	movl   $0xc01100c4,(%esp)
c010c19b:	e8 54 4c ff ff       	call   c0100df4 <__panic>
}
c010c1a0:	c9                   	leave  
c010c1a1:	c3                   	ret    

c010c1a2 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c1a2:	55                   	push   %ebp
c010c1a3:	89 e5                	mov    %esp,%ebp
c010c1a5:	83 ec 08             	sub    $0x8,%esp
c010c1a8:	eb 01                	jmp    c010c1ab <cpu_idle+0x9>
    while (1) {
        if (current->need_resched) {
            schedule();
        }
    }
c010c1aa:	90                   	nop

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
    while (1) {
        if (current->need_resched) {
c010c1ab:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c1b0:	8b 40 10             	mov    0x10(%eax),%eax
c010c1b3:	85 c0                	test   %eax,%eax
c010c1b5:	74 f3                	je     c010c1aa <cpu_idle+0x8>
            schedule();
c010c1b7:	e8 04 06 00 00       	call   c010c7c0 <schedule>
        }
    }
c010c1bc:	eb ec                	jmp    c010c1aa <cpu_idle+0x8>

c010c1be <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010c1be:	55                   	push   %ebp
c010c1bf:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010c1c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c1c5:	75 11                	jne    c010c1d8 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010c1c7:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c1cc:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010c1d3:	00 00 00 
c010c1d6:	eb 0e                	jmp    c010c1e6 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010c1d8:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c1dd:	8b 55 08             	mov    0x8(%ebp),%edx
c010c1e0:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010c1e6:	5d                   	pop    %ebp
c010c1e7:	c3                   	ret    

c010c1e8 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010c1e8:	55                   	push   %ebp
c010c1e9:	89 e5                	mov    %esp,%ebp
c010c1eb:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010c1ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c1f2:	75 07                	jne    c010c1fb <do_sleep+0x13>
        return 0;
c010c1f4:	b8 00 00 00 00       	mov    $0x0,%eax
c010c1f9:	eb 6b                	jmp    c010c266 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010c1fb:	e8 a9 e3 ff ff       	call   c010a5a9 <__intr_save>
c010c200:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010c203:	8b 55 08             	mov    0x8(%ebp),%edx
c010c206:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c20b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c20f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c213:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010c216:	89 04 24             	mov    %eax,(%esp)
c010c219:	e8 52 e3 ff ff       	call   c010a570 <timer_init>
c010c21e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010c221:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c226:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010c22c:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c231:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010c238:	00 00 80 
    add_timer(timer);
c010c23b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c23e:	89 04 24             	mov    %eax,(%esp)
c010c241:	e8 05 06 00 00       	call   c010c84b <add_timer>
    local_intr_restore(intr_flag);
c010c246:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c249:	89 04 24             	mov    %eax,(%esp)
c010c24c:	e8 87 e3 ff ff       	call   c010a5d8 <__intr_restore>

    schedule();
c010c251:	e8 6a 05 00 00       	call   c010c7c0 <schedule>

    del_timer(timer);
c010c256:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c259:	89 04 24             	mov    %eax,(%esp)
c010c25c:	e8 28 07 00 00       	call   c010c989 <del_timer>
    return 0;
c010c261:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c266:	c9                   	leave  
c010c267:	c3                   	ret    

c010c268 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010c268:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010c26c:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010c26e:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010c271:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010c274:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010c277:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010c27a:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010c27d:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c280:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c283:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c287:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c28a:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c28d:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c290:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c293:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c296:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c299:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c29c:	ff 30                	pushl  (%eax)

    ret
c010c29e:	c3                   	ret    
c010c29f:	90                   	nop

c010c2a0 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010c2a0:	55                   	push   %ebp
c010c2a1:	89 e5                	mov    %esp,%ebp
c010c2a3:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010c2a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c2aa:	75 08                	jne    c010c2b4 <skew_heap_merge+0x14>
c010c2ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2af:	e9 bd 00 00 00       	jmp    c010c371 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010c2b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c2b8:	75 08                	jne    c010c2c2 <skew_heap_merge+0x22>
c010c2ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2bd:	e9 af 00 00 00       	jmp    c010c371 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010c2c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2cc:	89 04 24             	mov    %eax,(%esp)
c010c2cf:	8b 45 10             	mov    0x10(%ebp),%eax
c010c2d2:	ff d0                	call   *%eax
c010c2d4:	83 f8 ff             	cmp    $0xffffffff,%eax
c010c2d7:	75 4d                	jne    c010c326 <skew_heap_merge+0x86>
     {
          r = a->left;
c010c2d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2dc:	8b 40 04             	mov    0x4(%eax),%eax
c010c2df:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010c2e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e5:	8b 40 08             	mov    0x8(%eax),%eax
c010c2e8:	8b 55 10             	mov    0x10(%ebp),%edx
c010c2eb:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c2ef:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c2f2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c2f6:	89 04 24             	mov    %eax,(%esp)
c010c2f9:	e8 a2 ff ff ff       	call   c010c2a0 <skew_heap_merge>
c010c2fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010c301:	8b 45 08             	mov    0x8(%ebp),%eax
c010c304:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c307:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010c30a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c30d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c310:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010c313:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c317:	74 08                	je     c010c321 <skew_heap_merge+0x81>
c010c319:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c31c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c31f:	89 10                	mov    %edx,(%eax)

          return a;
c010c321:	8b 45 08             	mov    0x8(%ebp),%eax
c010c324:	eb 4b                	jmp    c010c371 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010c326:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c329:	8b 40 04             	mov    0x4(%eax),%eax
c010c32c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010c32f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c332:	8b 40 08             	mov    0x8(%eax),%eax
c010c335:	8b 55 10             	mov    0x10(%ebp),%edx
c010c338:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c33c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c340:	8b 45 08             	mov    0x8(%ebp),%eax
c010c343:	89 04 24             	mov    %eax,(%esp)
c010c346:	e8 55 ff ff ff       	call   c010c2a0 <skew_heap_merge>
c010c34b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010c34e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c351:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c354:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010c357:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c35a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c35d:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010c360:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c364:	74 08                	je     c010c36e <skew_heap_merge+0xce>
c010c366:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c369:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c36c:	89 10                	mov    %edx,(%eax)

          return b;
c010c36e:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010c371:	c9                   	leave  
c010c372:	c3                   	ret    

c010c373 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c373:	55                   	push   %ebp
c010c374:	89 e5                	mov    %esp,%ebp
c010c376:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c379:	8b 45 08             	mov    0x8(%ebp),%eax
c010c37c:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c381:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c384:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c387:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c38c:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c38f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c392:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c398:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c39b:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c3a1:	89 d1                	mov    %edx,%ecx
c010c3a3:	29 c1                	sub    %eax,%ecx
c010c3a5:	89 c8                	mov    %ecx,%eax
c010c3a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c3aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c3ae:	7e 07                	jle    c010c3b7 <proc_stride_comp_f+0x44>
c010c3b0:	b8 01 00 00 00       	mov    $0x1,%eax
c010c3b5:	eb 12                	jmp    c010c3c9 <proc_stride_comp_f+0x56>
     else if (c == 0) return 0;
c010c3b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c3bb:	75 07                	jne    c010c3c4 <proc_stride_comp_f+0x51>
c010c3bd:	b8 00 00 00 00       	mov    $0x0,%eax
c010c3c2:	eb 05                	jmp    c010c3c9 <proc_stride_comp_f+0x56>
     else return -1;
c010c3c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c3c9:	c9                   	leave  
c010c3ca:	c3                   	ret    

c010c3cb <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c3cb:	55                   	push   %ebp
c010c3cc:	89 e5                	mov    %esp,%ebp
c010c3ce:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2010011351 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list));
c010c3d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c3d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3da:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c3dd:	89 50 04             	mov    %edx,0x4(%eax)
c010c3e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3e3:	8b 50 04             	mov    0x4(%eax),%edx
c010c3e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3e9:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010c3eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ee:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010c3f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c3ff:	c9                   	leave  
c010c400:	c3                   	ret    

c010c401 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c401:	55                   	push   %ebp
c010c402:	89 e5                	mov    %esp,%ebp
c010c404:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
     proc->time_slice = rq->max_time_slice;
c010c407:	8b 45 08             	mov    0x8(%ebp),%eax
c010c40a:	8b 50 0c             	mov    0xc(%eax),%edx
c010c40d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c410:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
c010c416:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c419:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c41f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c422:	8b 40 10             	mov    0x10(%eax),%eax
c010c425:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c428:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c42b:	c7 45 ec 73 c3 10 c0 	movl   $0xc010c373,-0x14(%ebp)
c010c432:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c435:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010c438:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c43b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c441:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c444:	8b 10                	mov    (%eax),%edx
c010c446:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c449:	89 50 08             	mov    %edx,0x8(%eax)
c010c44c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c44f:	8b 50 08             	mov    0x8(%eax),%edx
c010c452:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c455:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c458:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c45b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c45f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c462:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c466:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c469:	89 04 24             	mov    %eax,(%esp)
c010c46c:	e8 2f fe ff ff       	call   c010c2a0 <skew_heap_merge>
c010c471:	89 c2                	mov    %eax,%edx
c010c473:	8b 45 08             	mov    0x8(%ebp),%eax
c010c476:	89 50 10             	mov    %edx,0x10(%eax)
     proc->rq = rq;
c010c479:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c47c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c47f:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num++;
c010c485:	8b 45 08             	mov    0x8(%ebp),%eax
c010c488:	8b 40 08             	mov    0x8(%eax),%eax
c010c48b:	8d 50 01             	lea    0x1(%eax),%edx
c010c48e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c491:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c494:	c9                   	leave  
c010c495:	c3                   	ret    

c010c496 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c496:	55                   	push   %ebp
c010c497:	89 e5                	mov    %esp,%ebp
c010c499:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
     rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
c010c49c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c49f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c4a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4a8:	8b 40 10             	mov    0x10(%eax),%eax
c010c4ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4ae:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c4b1:	c7 45 ec 73 c3 10 c0 	movl   $0xc010c373,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c4b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4bb:	8b 00                	mov    (%eax),%eax
c010c4bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c4c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4c3:	8b 50 08             	mov    0x8(%eax),%edx
c010c4c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4c9:	8b 40 04             	mov    0x4(%eax),%eax
c010c4cc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c4cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c4d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c4d7:	89 04 24             	mov    %eax,(%esp)
c010c4da:	e8 c1 fd ff ff       	call   c010c2a0 <skew_heap_merge>
c010c4df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c4e2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c4e6:	74 08                	je     c010c4f0 <stride_dequeue+0x5a>
c010c4e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c4eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c4ee:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c4f0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c4f4:	74 24                	je     c010c51a <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c4f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4f9:	8b 40 04             	mov    0x4(%eax),%eax
c010c4fc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c4ff:	75 0b                	jne    c010c50c <stride_dequeue+0x76>
               p->left = rep;
c010c501:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c504:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c507:	89 50 04             	mov    %edx,0x4(%eax)
c010c50a:	eb 09                	jmp    c010c515 <stride_dequeue+0x7f>
          else p->right = rep;
c010c50c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c50f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c512:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c515:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c518:	eb 03                	jmp    c010c51d <stride_dequeue+0x87>
     }
     else return rep;
c010c51a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c51d:	89 c2                	mov    %eax,%edx
c010c51f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c522:	89 50 10             	mov    %edx,0x10(%eax)
     //proc->rq = NULL;
     rq->proc_num--;
c010c525:	8b 45 08             	mov    0x8(%ebp),%eax
c010c528:	8b 40 08             	mov    0x8(%eax),%eax
c010c52b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c52e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c531:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c534:	c9                   	leave  
c010c535:	c3                   	ret    

c010c536 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c536:	55                   	push   %ebp
c010c537:	89 e5                	mov    %esp,%ebp
c010c539:	53                   	push   %ebx
c010c53a:	83 ec 14             	sub    $0x14,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
     if (rq->lab6_run_pool == NULL) return NULL;
c010c53d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c540:	8b 40 10             	mov    0x10(%eax),%eax
c010c543:	85 c0                	test   %eax,%eax
c010c545:	75 07                	jne    c010c54e <stride_pick_next+0x18>
c010c547:	b8 00 00 00 00       	mov    $0x0,%eax
c010c54c:	eb 3f                	jmp    c010c58d <stride_pick_next+0x57>
     struct proc_struct *proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010c54e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c551:	8b 40 10             	mov    0x10(%eax),%eax
c010c554:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c559:	89 45 f8             	mov    %eax,-0x8(%ebp)
     proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
c010c55c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c55f:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c565:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c568:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c56e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c571:	b8 64 00 00 00       	mov    $0x64,%eax
c010c576:	ba 00 00 00 00       	mov    $0x0,%edx
c010c57b:	f7 75 e8             	divl   -0x18(%ebp)
c010c57e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c581:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c584:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return proc;
c010c58a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c58d:	83 c4 14             	add    $0x14,%esp
c010c590:	5b                   	pop    %ebx
c010c591:	5d                   	pop    %ebp
c010c592:	c3                   	ret    

c010c593 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c593:	55                   	push   %ebp
c010c594:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2010011351 */
     if (proc->time_slice > 0) proc->time_slice--;
c010c596:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c599:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c59f:	85 c0                	test   %eax,%eax
c010c5a1:	7e 15                	jle    c010c5b8 <stride_proc_tick+0x25>
c010c5a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5a6:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c5ac:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c5af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5b2:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     if (proc->time_slice == 0) proc->need_resched = 1;
c010c5b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5bb:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c5c1:	85 c0                	test   %eax,%eax
c010c5c3:	75 0a                	jne    c010c5cf <stride_proc_tick+0x3c>
c010c5c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5c8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010c5cf:	5d                   	pop    %ebp
c010c5d0:	c3                   	ret    
c010c5d1:	66 90                	xchg   %ax,%ax
c010c5d3:	90                   	nop

c010c5d4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c5d4:	55                   	push   %ebp
c010c5d5:	89 e5                	mov    %esp,%ebp
c010c5d7:	53                   	push   %ebx
c010c5d8:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c5db:	9c                   	pushf  
c010c5dc:	5b                   	pop    %ebx
c010c5dd:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010c5e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c5e3:	25 00 02 00 00       	and    $0x200,%eax
c010c5e8:	85 c0                	test   %eax,%eax
c010c5ea:	74 0c                	je     c010c5f8 <__intr_save+0x24>
        intr_disable();
c010c5ec:	e8 29 5b ff ff       	call   c010211a <intr_disable>
        return 1;
c010c5f1:	b8 01 00 00 00       	mov    $0x1,%eax
c010c5f6:	eb 05                	jmp    c010c5fd <__intr_save+0x29>
    }
    return 0;
c010c5f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c5fd:	83 c4 14             	add    $0x14,%esp
c010c600:	5b                   	pop    %ebx
c010c601:	5d                   	pop    %ebp
c010c602:	c3                   	ret    

c010c603 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c603:	55                   	push   %ebp
c010c604:	89 e5                	mov    %esp,%ebp
c010c606:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c609:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c60d:	74 05                	je     c010c614 <__intr_restore+0x11>
        intr_enable();
c010c60f:	e8 00 5b ff ff       	call   c0102114 <intr_enable>
    }
}
c010c614:	c9                   	leave  
c010c615:	c3                   	ret    

c010c616 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c616:	55                   	push   %ebp
c010c617:	89 e5                	mov    %esp,%ebp
c010c619:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c61c:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c621:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c624:	74 1a                	je     c010c640 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c626:	a1 bc 64 1c c0       	mov    0xc01c64bc,%eax
c010c62b:	8b 40 08             	mov    0x8(%eax),%eax
c010c62e:	8b 15 c0 64 1c c0    	mov    0xc01c64c0,%edx
c010c634:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c637:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c63b:	89 14 24             	mov    %edx,(%esp)
c010c63e:	ff d0                	call   *%eax
    }
}
c010c640:	c9                   	leave  
c010c641:	c3                   	ret    

c010c642 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c642:	55                   	push   %ebp
c010c643:	89 e5                	mov    %esp,%ebp
c010c645:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c648:	a1 bc 64 1c c0       	mov    0xc01c64bc,%eax
c010c64d:	8b 40 0c             	mov    0xc(%eax),%eax
c010c650:	8b 15 c0 64 1c c0    	mov    0xc01c64c0,%edx
c010c656:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c659:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c65d:	89 14 24             	mov    %edx,(%esp)
c010c660:	ff d0                	call   *%eax
}
c010c662:	c9                   	leave  
c010c663:	c3                   	ret    

c010c664 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c664:	55                   	push   %ebp
c010c665:	89 e5                	mov    %esp,%ebp
c010c667:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c66a:	a1 bc 64 1c c0       	mov    0xc01c64bc,%eax
c010c66f:	8b 40 10             	mov    0x10(%eax),%eax
c010c672:	8b 15 c0 64 1c c0    	mov    0xc01c64c0,%edx
c010c678:	89 14 24             	mov    %edx,(%esp)
c010c67b:	ff d0                	call   *%eax
}
c010c67d:	c9                   	leave  
c010c67e:	c3                   	ret    

c010c67f <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c67f:	55                   	push   %ebp
c010c680:	89 e5                	mov    %esp,%ebp
c010c682:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c685:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c68a:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c68d:	74 1c                	je     c010c6ab <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010c68f:	a1 bc 64 1c c0       	mov    0xc01c64bc,%eax
c010c694:	8b 40 14             	mov    0x14(%eax),%eax
c010c697:	8b 15 c0 64 1c c0    	mov    0xc01c64c0,%edx
c010c69d:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c6a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c6a4:	89 14 24             	mov    %edx,(%esp)
c010c6a7:	ff d0                	call   *%eax
c010c6a9:	eb 0a                	jmp    c010c6b5 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010c6ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6ae:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c6b5:	c9                   	leave  
c010c6b6:	c3                   	ret    

c010c6b7 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c6b7:	55                   	push   %ebp
c010c6b8:	89 e5                	mov    %esp,%ebp
c010c6ba:	83 ec 28             	sub    $0x28,%esp
c010c6bd:	c7 45 f4 b4 64 1c c0 	movl   $0xc01c64b4,-0xc(%ebp)
c010c6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c6ca:	89 50 04             	mov    %edx,0x4(%eax)
c010c6cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6d0:	8b 50 04             	mov    0x4(%eax),%edx
c010c6d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6d6:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c6d8:	c7 05 bc 64 1c c0 94 	movl   $0xc0132a94,0xc01c64bc
c010c6df:	2a 13 c0 

    rq = &__rq;
c010c6e2:	c7 05 c0 64 1c c0 c4 	movl   $0xc01c64c4,0xc01c64c0
c010c6e9:	64 1c c0 
    rq->max_time_slice = 20;
c010c6ec:	a1 c0 64 1c c0       	mov    0xc01c64c0,%eax
c010c6f1:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010c6f8:	a1 bc 64 1c c0       	mov    0xc01c64bc,%eax
c010c6fd:	8b 40 04             	mov    0x4(%eax),%eax
c010c700:	8b 15 c0 64 1c c0    	mov    0xc01c64c0,%edx
c010c706:	89 14 24             	mov    %edx,(%esp)
c010c709:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010c70b:	a1 bc 64 1c c0       	mov    0xc01c64bc,%eax
c010c710:	8b 00                	mov    (%eax),%eax
c010c712:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c716:	c7 04 24 c8 04 11 c0 	movl   $0xc01104c8,(%esp)
c010c71d:	e8 41 3c ff ff       	call   c0100363 <cprintf>
}
c010c722:	c9                   	leave  
c010c723:	c3                   	ret    

c010c724 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c724:	55                   	push   %ebp
c010c725:	89 e5                	mov    %esp,%ebp
c010c727:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c72a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c72d:	8b 00                	mov    (%eax),%eax
c010c72f:	83 f8 03             	cmp    $0x3,%eax
c010c732:	75 24                	jne    c010c758 <wakeup_proc+0x34>
c010c734:	c7 44 24 0c d9 04 11 	movl   $0xc01104d9,0xc(%esp)
c010c73b:	c0 
c010c73c:	c7 44 24 08 f4 04 11 	movl   $0xc01104f4,0x8(%esp)
c010c743:	c0 
c010c744:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c74b:	00 
c010c74c:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010c753:	e8 9c 46 ff ff       	call   c0100df4 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c758:	e8 77 fe ff ff       	call   c010c5d4 <__intr_save>
c010c75d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c760:	8b 45 08             	mov    0x8(%ebp),%eax
c010c763:	8b 00                	mov    (%eax),%eax
c010c765:	83 f8 02             	cmp    $0x2,%eax
c010c768:	74 2d                	je     c010c797 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c76a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c76d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c773:	8b 45 08             	mov    0x8(%ebp),%eax
c010c776:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c77d:	00 00 00 
            if (proc != current) {
c010c780:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c785:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c788:	74 29                	je     c010c7b3 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c78a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c78d:	89 04 24             	mov    %eax,(%esp)
c010c790:	e8 81 fe ff ff       	call   c010c616 <sched_class_enqueue>
c010c795:	eb 1c                	jmp    c010c7b3 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c797:	c7 44 24 08 1f 05 11 	movl   $0xc011051f,0x8(%esp)
c010c79e:	c0 
c010c79f:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c7a6:	00 
c010c7a7:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010c7ae:	e8 ae 46 ff ff       	call   c0100e61 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7b6:	89 04 24             	mov    %eax,(%esp)
c010c7b9:	e8 45 fe ff ff       	call   c010c603 <__intr_restore>
}
c010c7be:	c9                   	leave  
c010c7bf:	c3                   	ret    

c010c7c0 <schedule>:

void
schedule(void) {
c010c7c0:	55                   	push   %ebp
c010c7c1:	89 e5                	mov    %esp,%ebp
c010c7c3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c7c6:	e8 09 fe ff ff       	call   c010c5d4 <__intr_save>
c010c7cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c7ce:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c7d3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c7da:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c7df:	8b 00                	mov    (%eax),%eax
c010c7e1:	83 f8 02             	cmp    $0x2,%eax
c010c7e4:	75 0d                	jne    c010c7f3 <schedule+0x33>
            sched_class_enqueue(current);
c010c7e6:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c7eb:	89 04 24             	mov    %eax,(%esp)
c010c7ee:	e8 23 fe ff ff       	call   c010c616 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c7f3:	e8 6c fe ff ff       	call   c010c664 <sched_class_pick_next>
c010c7f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c7fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c7ff:	74 0b                	je     c010c80c <schedule+0x4c>
            sched_class_dequeue(next);
c010c801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c804:	89 04 24             	mov    %eax,(%esp)
c010c807:	e8 36 fe ff ff       	call   c010c642 <sched_class_dequeue>
        }
        if (next == NULL) {
c010c80c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c810:	75 08                	jne    c010c81a <schedule+0x5a>
            next = idleproc;
c010c812:	a1 40 44 1c c0       	mov    0xc01c4440,%eax
c010c817:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c81a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c81d:	8b 40 08             	mov    0x8(%eax),%eax
c010c820:	8d 50 01             	lea    0x1(%eax),%edx
c010c823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c826:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c829:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010c82e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c831:	74 0b                	je     c010c83e <schedule+0x7e>
            proc_run(next);
c010c833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c836:	89 04 24             	mov    %eax,(%esp)
c010c839:	e8 6d e3 ff ff       	call   c010abab <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c83e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c841:	89 04 24             	mov    %eax,(%esp)
c010c844:	e8 ba fd ff ff       	call   c010c603 <__intr_restore>
}
c010c849:	c9                   	leave  
c010c84a:	c3                   	ret    

c010c84b <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c84b:	55                   	push   %ebp
c010c84c:	89 e5                	mov    %esp,%ebp
c010c84e:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c851:	e8 7e fd ff ff       	call   c010c5d4 <__intr_save>
c010c856:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c859:	8b 45 08             	mov    0x8(%ebp),%eax
c010c85c:	8b 00                	mov    (%eax),%eax
c010c85e:	85 c0                	test   %eax,%eax
c010c860:	74 0a                	je     c010c86c <add_timer+0x21>
c010c862:	8b 45 08             	mov    0x8(%ebp),%eax
c010c865:	8b 40 04             	mov    0x4(%eax),%eax
c010c868:	85 c0                	test   %eax,%eax
c010c86a:	75 24                	jne    c010c890 <add_timer+0x45>
c010c86c:	c7 44 24 0c 3c 05 11 	movl   $0xc011053c,0xc(%esp)
c010c873:	c0 
c010c874:	c7 44 24 08 f4 04 11 	movl   $0xc01104f4,0x8(%esp)
c010c87b:	c0 
c010c87c:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c883:	00 
c010c884:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010c88b:	e8 64 45 ff ff       	call   c0100df4 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c890:	8b 45 08             	mov    0x8(%ebp),%eax
c010c893:	83 c0 08             	add    $0x8,%eax
c010c896:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c899:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c89c:	8b 40 04             	mov    0x4(%eax),%eax
c010c89f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c8a2:	0f 94 c0             	sete   %al
c010c8a5:	0f b6 c0             	movzbl %al,%eax
c010c8a8:	85 c0                	test   %eax,%eax
c010c8aa:	75 24                	jne    c010c8d0 <add_timer+0x85>
c010c8ac:	c7 44 24 0c 68 05 11 	movl   $0xc0110568,0xc(%esp)
c010c8b3:	c0 
c010c8b4:	c7 44 24 08 f4 04 11 	movl   $0xc01104f4,0x8(%esp)
c010c8bb:	c0 
c010c8bc:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c8c3:	00 
c010c8c4:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010c8cb:	e8 24 45 ff ff       	call   c0100df4 <__panic>
c010c8d0:	c7 45 e4 b4 64 1c c0 	movl   $0xc01c64b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c8d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c8da:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c8e0:	eb 4a                	jmp    c010c92c <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8e5:	83 e8 08             	sub    $0x8,%eax
c010c8e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c8eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ee:	8b 10                	mov    (%eax),%edx
c010c8f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8f3:	8b 00                	mov    (%eax),%eax
c010c8f5:	39 c2                	cmp    %eax,%edx
c010c8f7:	73 13                	jae    c010c90c <add_timer+0xc1>
                next->expires -= timer->expires;
c010c8f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8fc:	8b 10                	mov    (%eax),%edx
c010c8fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010c901:	8b 00                	mov    (%eax),%eax
c010c903:	29 c2                	sub    %eax,%edx
c010c905:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c908:	89 10                	mov    %edx,(%eax)
                break;
c010c90a:	eb 29                	jmp    c010c935 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c90c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c90f:	8b 10                	mov    (%eax),%edx
c010c911:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c914:	8b 00                	mov    (%eax),%eax
c010c916:	29 c2                	sub    %eax,%edx
c010c918:	8b 45 08             	mov    0x8(%ebp),%eax
c010c91b:	89 10                	mov    %edx,(%eax)
c010c91d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c920:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c923:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c926:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c929:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c92c:	81 7d f4 b4 64 1c c0 	cmpl   $0xc01c64b4,-0xc(%ebp)
c010c933:	75 ad                	jne    c010c8e2 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c935:	8b 45 08             	mov    0x8(%ebp),%eax
c010c938:	8d 50 08             	lea    0x8(%eax),%edx
c010c93b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c93e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c941:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c944:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c947:	8b 00                	mov    (%eax),%eax
c010c949:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c94c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c94f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c952:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c955:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c958:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c95b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c95e:	89 10                	mov    %edx,(%eax)
c010c960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c963:	8b 10                	mov    (%eax),%edx
c010c965:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c968:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c96b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c96e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c971:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c974:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c977:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c97a:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c97c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c97f:	89 04 24             	mov    %eax,(%esp)
c010c982:	e8 7c fc ff ff       	call   c010c603 <__intr_restore>
}
c010c987:	c9                   	leave  
c010c988:	c3                   	ret    

c010c989 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c989:	55                   	push   %ebp
c010c98a:	89 e5                	mov    %esp,%ebp
c010c98c:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c98f:	e8 40 fc ff ff       	call   c010c5d4 <__intr_save>
c010c994:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c997:	8b 45 08             	mov    0x8(%ebp),%eax
c010c99a:	83 c0 08             	add    $0x8,%eax
c010c99d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c9a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9a3:	8b 40 04             	mov    0x4(%eax),%eax
c010c9a6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c9a9:	0f 94 c0             	sete   %al
c010c9ac:	0f b6 c0             	movzbl %al,%eax
c010c9af:	85 c0                	test   %eax,%eax
c010c9b1:	0f 85 89 00 00 00    	jne    c010ca40 <del_timer+0xb7>
            if (timer->expires != 0) {
c010c9b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ba:	8b 00                	mov    (%eax),%eax
c010c9bc:	85 c0                	test   %eax,%eax
c010c9be:	74 35                	je     c010c9f5 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c9c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9c3:	83 c0 08             	add    $0x8,%eax
c010c9c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c9c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c9cc:	8b 40 04             	mov    0x4(%eax),%eax
c010c9cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c9d2:	81 7d f0 b4 64 1c c0 	cmpl   $0xc01c64b4,-0x10(%ebp)
c010c9d9:	74 1a                	je     c010c9f5 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c9db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9de:	83 e8 08             	sub    $0x8,%eax
c010c9e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c9e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9e7:	8b 10                	mov    (%eax),%edx
c010c9e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ec:	8b 00                	mov    (%eax),%eax
c010c9ee:	01 c2                	add    %eax,%edx
c010c9f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9f3:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c9f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9f8:	83 c0 08             	add    $0x8,%eax
c010c9fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c9fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ca01:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ca04:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ca07:	8b 40 04             	mov    0x4(%eax),%eax
c010ca0a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ca0d:	8b 12                	mov    (%edx),%edx
c010ca0f:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010ca12:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ca15:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ca18:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ca1b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ca1e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ca21:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ca24:	89 10                	mov    %edx,(%eax)
c010ca26:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ca29:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ca2c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca2f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ca32:	89 50 04             	mov    %edx,0x4(%eax)
c010ca35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca38:	8b 50 04             	mov    0x4(%eax),%edx
c010ca3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca3e:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010ca40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca43:	89 04 24             	mov    %eax,(%esp)
c010ca46:	e8 b8 fb ff ff       	call   c010c603 <__intr_restore>
}
c010ca4b:	c9                   	leave  
c010ca4c:	c3                   	ret    

c010ca4d <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010ca4d:	55                   	push   %ebp
c010ca4e:	89 e5                	mov    %esp,%ebp
c010ca50:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ca53:	e8 7c fb ff ff       	call   c010c5d4 <__intr_save>
c010ca58:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ca5b:	c7 45 e4 b4 64 1c c0 	movl   $0xc01c64b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ca62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ca65:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010ca68:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010ca6b:	81 7d f4 b4 64 1c c0 	cmpl   $0xc01c64b4,-0xc(%ebp)
c010ca72:	0f 84 fc 00 00 00    	je     c010cb74 <run_timer_list+0x127>
            timer_t *timer = le2timer(le, timer_link);
c010ca78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca7b:	83 e8 08             	sub    $0x8,%eax
c010ca7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010ca81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca84:	8b 00                	mov    (%eax),%eax
c010ca86:	85 c0                	test   %eax,%eax
c010ca88:	75 24                	jne    c010caae <run_timer_list+0x61>
c010ca8a:	c7 44 24 0c 89 05 11 	movl   $0xc0110589,0xc(%esp)
c010ca91:	c0 
c010ca92:	c7 44 24 08 f4 04 11 	movl   $0xc01104f4,0x8(%esp)
c010ca99:	c0 
c010ca9a:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010caa1:	00 
c010caa2:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010caa9:	e8 46 43 ff ff       	call   c0100df4 <__panic>
            timer->expires --;
c010caae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cab1:	8b 00                	mov    (%eax),%eax
c010cab3:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cab9:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010cabb:	e9 a4 00 00 00       	jmp    c010cb64 <run_timer_list+0x117>
c010cac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cac3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cac6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cac9:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010cacc:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010cacf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cad2:	8b 40 04             	mov    0x4(%eax),%eax
c010cad5:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010cad8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cadb:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cae1:	85 c0                	test   %eax,%eax
c010cae3:	74 31                	je     c010cb16 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010cae5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cae8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010caee:	85 c0                	test   %eax,%eax
c010caf0:	78 4a                	js     c010cb3c <run_timer_list+0xef>
c010caf2:	c7 44 24 0c a0 05 11 	movl   $0xc01105a0,0xc(%esp)
c010caf9:	c0 
c010cafa:	c7 44 24 08 f4 04 11 	movl   $0xc01104f4,0x8(%esp)
c010cb01:	c0 
c010cb02:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010cb09:	00 
c010cb0a:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010cb11:	e8 de 42 ff ff       	call   c0100df4 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010cb16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cb19:	8b 40 04             	mov    0x4(%eax),%eax
c010cb1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cb20:	c7 44 24 08 c4 05 11 	movl   $0xc01105c4,0x8(%esp)
c010cb27:	c0 
c010cb28:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010cb2f:	00 
c010cb30:	c7 04 24 09 05 11 c0 	movl   $0xc0110509,(%esp)
c010cb37:	e8 25 43 ff ff       	call   c0100e61 <__warn>
                }
                wakeup_proc(proc);
c010cb3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cb3f:	89 04 24             	mov    %eax,(%esp)
c010cb42:	e8 dd fb ff ff       	call   c010c724 <wakeup_proc>
                del_timer(timer);
c010cb47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb4a:	89 04 24             	mov    %eax,(%esp)
c010cb4d:	e8 37 fe ff ff       	call   c010c989 <del_timer>
                if (le == &timer_list) {
c010cb52:	81 7d f4 b4 64 1c c0 	cmpl   $0xc01c64b4,-0xc(%ebp)
c010cb59:	74 18                	je     c010cb73 <run_timer_list+0x126>
                    break;
                }
                timer = le2timer(le, timer_link);
c010cb5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb5e:	83 e8 08             	sub    $0x8,%eax
c010cb61:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010cb64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb67:	8b 00                	mov    (%eax),%eax
c010cb69:	85 c0                	test   %eax,%eax
c010cb6b:	0f 84 4f ff ff ff    	je     c010cac0 <run_timer_list+0x73>
c010cb71:	eb 01                	jmp    c010cb74 <run_timer_list+0x127>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010cb73:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010cb74:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010cb79:	89 04 24             	mov    %eax,(%esp)
c010cb7c:	e8 fe fa ff ff       	call   c010c67f <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010cb81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb84:	89 04 24             	mov    %eax,(%esp)
c010cb87:	e8 77 fa ff ff       	call   c010c603 <__intr_restore>
}
c010cb8c:	c9                   	leave  
c010cb8d:	c3                   	ret    
c010cb8e:	66 90                	xchg   %ax,%ax

c010cb90 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010cb90:	55                   	push   %ebp
c010cb91:	89 e5                	mov    %esp,%ebp
c010cb93:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010cb96:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb99:	8b 00                	mov    (%eax),%eax
c010cb9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010cb9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cba1:	89 04 24             	mov    %eax,(%esp)
c010cba4:	e8 3b e6 ff ff       	call   c010b1e4 <do_exit>
}
c010cba9:	c9                   	leave  
c010cbaa:	c3                   	ret    

c010cbab <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010cbab:	55                   	push   %ebp
c010cbac:	89 e5                	mov    %esp,%ebp
c010cbae:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010cbb1:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010cbb6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cbb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010cbbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbbf:	8b 40 44             	mov    0x44(%eax),%eax
c010cbc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010cbc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbc8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cbcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbd3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010cbda:	e8 18 e5 ff ff       	call   c010b0f7 <do_fork>
}
c010cbdf:	c9                   	leave  
c010cbe0:	c3                   	ret    

c010cbe1 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010cbe1:	55                   	push   %ebp
c010cbe2:	89 e5                	mov    %esp,%ebp
c010cbe4:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010cbe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbea:	8b 00                	mov    (%eax),%eax
c010cbec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010cbef:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbf2:	83 c0 04             	add    $0x4,%eax
c010cbf5:	8b 00                	mov    (%eax),%eax
c010cbf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010cbfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbfd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc04:	89 04 24             	mov    %eax,(%esp)
c010cc07:	e8 a2 ef ff ff       	call   c010bbae <do_wait>
}
c010cc0c:	c9                   	leave  
c010cc0d:	c3                   	ret    

c010cc0e <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010cc0e:	55                   	push   %ebp
c010cc0f:	89 e5                	mov    %esp,%ebp
c010cc11:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010cc14:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc17:	8b 00                	mov    (%eax),%eax
c010cc19:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010cc1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc1f:	8b 40 04             	mov    0x4(%eax),%eax
c010cc22:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010cc25:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc28:	83 c0 08             	add    $0x8,%eax
c010cc2b:	8b 00                	mov    (%eax),%eax
c010cc2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010cc30:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc33:	8b 40 0c             	mov    0xc(%eax),%eax
c010cc36:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010cc39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc3c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc43:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc51:	89 04 24             	mov    %eax,(%esp)
c010cc54:	e8 07 ee ff ff       	call   c010ba60 <do_execve>
}
c010cc59:	c9                   	leave  
c010cc5a:	c3                   	ret    

c010cc5b <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010cc5b:	55                   	push   %ebp
c010cc5c:	89 e5                	mov    %esp,%ebp
c010cc5e:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010cc61:	e8 32 ef ff ff       	call   c010bb98 <do_yield>
}
c010cc66:	c9                   	leave  
c010cc67:	c3                   	ret    

c010cc68 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010cc68:	55                   	push   %ebp
c010cc69:	89 e5                	mov    %esp,%ebp
c010cc6b:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010cc6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc71:	8b 00                	mov    (%eax),%eax
c010cc73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010cc76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc79:	89 04 24             	mov    %eax,(%esp)
c010cc7c:	e8 cc f0 ff ff       	call   c010bd4d <do_kill>
}
c010cc81:	c9                   	leave  
c010cc82:	c3                   	ret    

c010cc83 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010cc83:	55                   	push   %ebp
c010cc84:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010cc86:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010cc8b:	8b 40 04             	mov    0x4(%eax),%eax
}
c010cc8e:	5d                   	pop    %ebp
c010cc8f:	c3                   	ret    

c010cc90 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010cc90:	55                   	push   %ebp
c010cc91:	89 e5                	mov    %esp,%ebp
c010cc93:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010cc96:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc99:	8b 00                	mov    (%eax),%eax
c010cc9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010cc9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cca1:	89 04 24             	mov    %eax,(%esp)
c010cca4:	e8 e0 36 ff ff       	call   c0100389 <cputchar>
    return 0;
c010cca9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ccae:	c9                   	leave  
c010ccaf:	c3                   	ret    

c010ccb0 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ccb0:	55                   	push   %ebp
c010ccb1:	89 e5                	mov    %esp,%ebp
c010ccb3:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ccb6:	e8 87 a0 ff ff       	call   c0106d42 <print_pgdir>
    return 0;
c010ccbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ccc0:	c9                   	leave  
c010ccc1:	c3                   	ret    

c010ccc2 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ccc2:	55                   	push   %ebp
c010ccc3:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ccc5:	a1 d8 64 1c c0       	mov    0xc01c64d8,%eax
}
c010ccca:	5d                   	pop    %ebp
c010cccb:	c3                   	ret    

c010cccc <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010cccc:	55                   	push   %ebp
c010cccd:	89 e5                	mov    %esp,%ebp
c010cccf:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ccd2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccd5:	8b 00                	mov    (%eax),%eax
c010ccd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ccda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccdd:	89 04 24             	mov    %eax,(%esp)
c010cce0:	e8 d9 f4 ff ff       	call   c010c1be <lab6_set_priority>
    return 0;
c010cce5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ccea:	c9                   	leave  
c010cceb:	c3                   	ret    

c010ccec <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ccec:	55                   	push   %ebp
c010cced:	89 e5                	mov    %esp,%ebp
c010ccef:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ccf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccf5:	8b 00                	mov    (%eax),%eax
c010ccf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ccfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccfd:	89 04 24             	mov    %eax,(%esp)
c010cd00:	e8 e3 f4 ff ff       	call   c010c1e8 <do_sleep>
}
c010cd05:	c9                   	leave  
c010cd06:	c3                   	ret    

c010cd07 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010cd07:	55                   	push   %ebp
c010cd08:	89 e5                	mov    %esp,%ebp
c010cd0a:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010cd0d:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010cd12:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cd15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010cd18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd1b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cd1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010cd21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cd25:	78 60                	js     c010cd87 <syscall+0x80>
c010cd27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd2a:	3d ff 00 00 00       	cmp    $0xff,%eax
c010cd2f:	77 56                	ja     c010cd87 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010cd31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd34:	8b 04 85 c0 2a 13 c0 	mov    -0x3fecd540(,%eax,4),%eax
c010cd3b:	85 c0                	test   %eax,%eax
c010cd3d:	74 48                	je     c010cd87 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010cd3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd42:	8b 40 14             	mov    0x14(%eax),%eax
c010cd45:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010cd48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd4b:	8b 40 18             	mov    0x18(%eax),%eax
c010cd4e:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010cd51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd54:	8b 40 10             	mov    0x10(%eax),%eax
c010cd57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010cd5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd5d:	8b 00                	mov    (%eax),%eax
c010cd5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010cd62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd65:	8b 40 04             	mov    0x4(%eax),%eax
c010cd68:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010cd6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd6e:	8b 04 85 c0 2a 13 c0 	mov    -0x3fecd540(,%eax,4),%eax
c010cd75:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010cd78:	89 14 24             	mov    %edx,(%esp)
c010cd7b:	ff d0                	call   *%eax
c010cd7d:	89 c2                	mov    %eax,%edx
c010cd7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd82:	89 50 1c             	mov    %edx,0x1c(%eax)
c010cd85:	eb 46                	jmp    c010cdcd <syscall+0xc6>
            return ;
        }
    }
    print_trapframe(tf);
c010cd87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd8a:	89 04 24             	mov    %eax,(%esp)
c010cd8d:	e8 24 57 ff ff       	call   c01024b6 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010cd92:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010cd97:	8d 50 48             	lea    0x48(%eax),%edx
c010cd9a:	a1 48 44 1c c0       	mov    0xc01c4448,%eax
c010cd9f:	8b 40 04             	mov    0x4(%eax),%eax
c010cda2:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cda6:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cdaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cdad:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cdb1:	c7 44 24 08 e4 05 11 	movl   $0xc01105e4,0x8(%esp)
c010cdb8:	c0 
c010cdb9:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010cdc0:	00 
c010cdc1:	c7 04 24 10 06 11 c0 	movl   $0xc0110610,(%esp)
c010cdc8:	e8 27 40 ff ff       	call   c0100df4 <__panic>
            num, current->pid, current->name);
}
c010cdcd:	c9                   	leave  
c010cdce:	c3                   	ret    
c010cdcf:	90                   	nop

c010cdd0 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010cdd0:	55                   	push   %ebp
c010cdd1:	89 e5                	mov    %esp,%ebp
c010cdd3:	53                   	push   %ebx
c010cdd4:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cdd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdda:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cde0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return (hash >> (32 - bits));
c010cde3:	b8 20 00 00 00       	mov    $0x20,%eax
c010cde8:	2b 45 0c             	sub    0xc(%ebp),%eax
c010cdeb:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010cdee:	89 d3                	mov    %edx,%ebx
c010cdf0:	89 c1                	mov    %eax,%ecx
c010cdf2:	d3 eb                	shr    %cl,%ebx
c010cdf4:	89 d8                	mov    %ebx,%eax
}
c010cdf6:	83 c4 10             	add    $0x10,%esp
c010cdf9:	5b                   	pop    %ebx
c010cdfa:	5d                   	pop    %ebp
c010cdfb:	c3                   	ret    

c010cdfc <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010cdfc:	55                   	push   %ebp
c010cdfd:	89 e5                	mov    %esp,%ebp
c010cdff:	56                   	push   %esi
c010ce00:	53                   	push   %ebx
c010ce01:	83 ec 60             	sub    $0x60,%esp
c010ce04:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce07:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ce0a:	8b 45 14             	mov    0x14(%ebp),%eax
c010ce0d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010ce10:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ce13:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ce16:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ce19:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010ce1c:	8b 45 18             	mov    0x18(%ebp),%eax
c010ce1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ce22:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce25:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce28:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ce2b:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010ce2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ce31:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010ce34:	89 d3                	mov    %edx,%ebx
c010ce36:	89 c6                	mov    %eax,%esi
c010ce38:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010ce3b:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ce3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce41:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ce48:	74 1c                	je     c010ce66 <printnum+0x6a>
c010ce4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce4d:	ba 00 00 00 00       	mov    $0x0,%edx
c010ce52:	f7 75 e4             	divl   -0x1c(%ebp)
c010ce55:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ce58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce5b:	ba 00 00 00 00       	mov    $0x0,%edx
c010ce60:	f7 75 e4             	divl   -0x1c(%ebp)
c010ce63:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ce66:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ce69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce6c:	89 d6                	mov    %edx,%esi
c010ce6e:	89 c3                	mov    %eax,%ebx
c010ce70:	89 f0                	mov    %esi,%eax
c010ce72:	89 da                	mov    %ebx,%edx
c010ce74:	f7 75 e4             	divl   -0x1c(%ebp)
c010ce77:	89 d3                	mov    %edx,%ebx
c010ce79:	89 c6                	mov    %eax,%esi
c010ce7b:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010ce7e:	89 5d dc             	mov    %ebx,-0x24(%ebp)
c010ce81:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ce84:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ce87:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce8a:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010ce8d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ce90:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010ce93:	89 c3                	mov    %eax,%ebx
c010ce95:	89 d6                	mov    %edx,%esi
c010ce97:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c010ce9a:	89 75 ec             	mov    %esi,-0x14(%ebp)
c010ce9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cea0:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010cea3:	8b 45 18             	mov    0x18(%ebp),%eax
c010cea6:	ba 00 00 00 00       	mov    $0x0,%edx
c010ceab:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010ceae:	77 56                	ja     c010cf06 <printnum+0x10a>
c010ceb0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010ceb3:	72 05                	jb     c010ceba <printnum+0xbe>
c010ceb5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010ceb8:	77 4c                	ja     c010cf06 <printnum+0x10a>
        printnum(putch, putdat, result, base, width - 1, padc);
c010ceba:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010cebd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cec0:	8b 45 20             	mov    0x20(%ebp),%eax
c010cec3:	89 44 24 18          	mov    %eax,0x18(%esp)
c010cec7:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cecb:	8b 45 18             	mov    0x18(%ebp),%eax
c010cece:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ced2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ced5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ced8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cedc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cee0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cee3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cee7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ceea:	89 04 24             	mov    %eax,(%esp)
c010ceed:	e8 0a ff ff ff       	call   c010cdfc <printnum>
c010cef2:	eb 1c                	jmp    c010cf10 <printnum+0x114>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010cef4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cef7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cefb:	8b 45 20             	mov    0x20(%ebp),%eax
c010cefe:	89 04 24             	mov    %eax,(%esp)
c010cf01:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf04:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010cf06:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cf0a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cf0e:	7f e4                	jg     c010cef4 <printnum+0xf8>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cf10:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cf13:	05 44 07 11 c0       	add    $0xc0110744,%eax
c010cf18:	0f b6 00             	movzbl (%eax),%eax
c010cf1b:	0f be c0             	movsbl %al,%eax
c010cf1e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cf21:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf25:	89 04 24             	mov    %eax,(%esp)
c010cf28:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf2b:	ff d0                	call   *%eax
}
c010cf2d:	83 c4 60             	add    $0x60,%esp
c010cf30:	5b                   	pop    %ebx
c010cf31:	5e                   	pop    %esi
c010cf32:	5d                   	pop    %ebp
c010cf33:	c3                   	ret    

c010cf34 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010cf34:	55                   	push   %ebp
c010cf35:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cf37:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cf3b:	7e 14                	jle    c010cf51 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010cf3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf40:	8b 00                	mov    (%eax),%eax
c010cf42:	8d 48 08             	lea    0x8(%eax),%ecx
c010cf45:	8b 55 08             	mov    0x8(%ebp),%edx
c010cf48:	89 0a                	mov    %ecx,(%edx)
c010cf4a:	8b 50 04             	mov    0x4(%eax),%edx
c010cf4d:	8b 00                	mov    (%eax),%eax
c010cf4f:	eb 30                	jmp    c010cf81 <getuint+0x4d>
    }
    else if (lflag) {
c010cf51:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cf55:	74 16                	je     c010cf6d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010cf57:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf5a:	8b 00                	mov    (%eax),%eax
c010cf5c:	8d 48 04             	lea    0x4(%eax),%ecx
c010cf5f:	8b 55 08             	mov    0x8(%ebp),%edx
c010cf62:	89 0a                	mov    %ecx,(%edx)
c010cf64:	8b 00                	mov    (%eax),%eax
c010cf66:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf6b:	eb 14                	jmp    c010cf81 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010cf6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf70:	8b 00                	mov    (%eax),%eax
c010cf72:	8d 48 04             	lea    0x4(%eax),%ecx
c010cf75:	8b 55 08             	mov    0x8(%ebp),%edx
c010cf78:	89 0a                	mov    %ecx,(%edx)
c010cf7a:	8b 00                	mov    (%eax),%eax
c010cf7c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010cf81:	5d                   	pop    %ebp
c010cf82:	c3                   	ret    

c010cf83 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010cf83:	55                   	push   %ebp
c010cf84:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cf86:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cf8a:	7e 14                	jle    c010cfa0 <getint+0x1d>
        return va_arg(*ap, long long);
c010cf8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf8f:	8b 00                	mov    (%eax),%eax
c010cf91:	8d 48 08             	lea    0x8(%eax),%ecx
c010cf94:	8b 55 08             	mov    0x8(%ebp),%edx
c010cf97:	89 0a                	mov    %ecx,(%edx)
c010cf99:	8b 50 04             	mov    0x4(%eax),%edx
c010cf9c:	8b 00                	mov    (%eax),%eax
c010cf9e:	eb 30                	jmp    c010cfd0 <getint+0x4d>
    }
    else if (lflag) {
c010cfa0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cfa4:	74 16                	je     c010cfbc <getint+0x39>
        return va_arg(*ap, long);
c010cfa6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfa9:	8b 00                	mov    (%eax),%eax
c010cfab:	8d 48 04             	lea    0x4(%eax),%ecx
c010cfae:	8b 55 08             	mov    0x8(%ebp),%edx
c010cfb1:	89 0a                	mov    %ecx,(%edx)
c010cfb3:	8b 00                	mov    (%eax),%eax
c010cfb5:	89 c2                	mov    %eax,%edx
c010cfb7:	c1 fa 1f             	sar    $0x1f,%edx
c010cfba:	eb 14                	jmp    c010cfd0 <getint+0x4d>
    }
    else {
        return va_arg(*ap, int);
c010cfbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfbf:	8b 00                	mov    (%eax),%eax
c010cfc1:	8d 48 04             	lea    0x4(%eax),%ecx
c010cfc4:	8b 55 08             	mov    0x8(%ebp),%edx
c010cfc7:	89 0a                	mov    %ecx,(%edx)
c010cfc9:	8b 00                	mov    (%eax),%eax
c010cfcb:	89 c2                	mov    %eax,%edx
c010cfcd:	c1 fa 1f             	sar    $0x1f,%edx
    }
}
c010cfd0:	5d                   	pop    %ebp
c010cfd1:	c3                   	ret    

c010cfd2 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010cfd2:	55                   	push   %ebp
c010cfd3:	89 e5                	mov    %esp,%ebp
c010cfd5:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010cfd8:	8d 45 14             	lea    0x14(%ebp),%eax
c010cfdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010cfde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfe1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cfe5:	8b 45 10             	mov    0x10(%ebp),%eax
c010cfe8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cfec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfef:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cff3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cff6:	89 04 24             	mov    %eax,(%esp)
c010cff9:	e8 02 00 00 00       	call   c010d000 <vprintfmt>
    va_end(ap);
}
c010cffe:	c9                   	leave  
c010cfff:	c3                   	ret    

c010d000 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010d000:	55                   	push   %ebp
c010d001:	89 e5                	mov    %esp,%ebp
c010d003:	56                   	push   %esi
c010d004:	53                   	push   %ebx
c010d005:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d008:	eb 17                	jmp    c010d021 <vprintfmt+0x21>
            if (ch == '\0') {
c010d00a:	85 db                	test   %ebx,%ebx
c010d00c:	0f 84 db 03 00 00    	je     c010d3ed <vprintfmt+0x3ed>
                return;
            }
            putch(ch, putdat);
c010d012:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d015:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d019:	89 1c 24             	mov    %ebx,(%esp)
c010d01c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d01f:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d021:	8b 45 10             	mov    0x10(%ebp),%eax
c010d024:	0f b6 00             	movzbl (%eax),%eax
c010d027:	0f b6 d8             	movzbl %al,%ebx
c010d02a:	83 fb 25             	cmp    $0x25,%ebx
c010d02d:	0f 95 c0             	setne  %al
c010d030:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c010d034:	84 c0                	test   %al,%al
c010d036:	75 d2                	jne    c010d00a <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010d038:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010d03c:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010d043:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d046:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010d049:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010d050:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d053:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d056:	eb 04                	jmp    c010d05c <vprintfmt+0x5c>
            goto process_precision;

        case '.':
            if (width < 0)
                width = 0;
            goto reswitch;
c010d058:	90                   	nop
c010d059:	eb 01                	jmp    c010d05c <vprintfmt+0x5c>
            goto reswitch;

        process_precision:
            if (width < 0)
                width = precision, precision = -1;
            goto reswitch;
c010d05b:	90                   	nop
        char padc = ' ';
        width = precision = -1;
        lflag = altflag = 0;

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010d05c:	8b 45 10             	mov    0x10(%ebp),%eax
c010d05f:	0f b6 00             	movzbl (%eax),%eax
c010d062:	0f b6 d8             	movzbl %al,%ebx
c010d065:	89 d8                	mov    %ebx,%eax
c010d067:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c010d06b:	83 e8 23             	sub    $0x23,%eax
c010d06e:	83 f8 55             	cmp    $0x55,%eax
c010d071:	0f 87 45 03 00 00    	ja     c010d3bc <vprintfmt+0x3bc>
c010d077:	8b 04 85 68 07 11 c0 	mov    -0x3feef898(,%eax,4),%eax
c010d07e:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010d080:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010d084:	eb d6                	jmp    c010d05c <vprintfmt+0x5c>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010d086:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010d08a:	eb d0                	jmp    c010d05c <vprintfmt+0x5c>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010d08c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010d093:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d096:	89 d0                	mov    %edx,%eax
c010d098:	c1 e0 02             	shl    $0x2,%eax
c010d09b:	01 d0                	add    %edx,%eax
c010d09d:	01 c0                	add    %eax,%eax
c010d09f:	01 d8                	add    %ebx,%eax
c010d0a1:	83 e8 30             	sub    $0x30,%eax
c010d0a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010d0a7:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0aa:	0f b6 00             	movzbl (%eax),%eax
c010d0ad:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010d0b0:	83 fb 2f             	cmp    $0x2f,%ebx
c010d0b3:	7e 39                	jle    c010d0ee <vprintfmt+0xee>
c010d0b5:	83 fb 39             	cmp    $0x39,%ebx
c010d0b8:	7f 34                	jg     c010d0ee <vprintfmt+0xee>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010d0ba:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010d0be:	eb d3                	jmp    c010d093 <vprintfmt+0x93>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010d0c0:	8b 45 14             	mov    0x14(%ebp),%eax
c010d0c3:	8d 50 04             	lea    0x4(%eax),%edx
c010d0c6:	89 55 14             	mov    %edx,0x14(%ebp)
c010d0c9:	8b 00                	mov    (%eax),%eax
c010d0cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010d0ce:	eb 1f                	jmp    c010d0ef <vprintfmt+0xef>

        case '.':
            if (width < 0)
c010d0d0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d0d4:	79 82                	jns    c010d058 <vprintfmt+0x58>
                width = 0;
c010d0d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010d0dd:	e9 76 ff ff ff       	jmp    c010d058 <vprintfmt+0x58>

        case '#':
            altflag = 1;
c010d0e2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010d0e9:	e9 6e ff ff ff       	jmp    c010d05c <vprintfmt+0x5c>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010d0ee:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010d0ef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d0f3:	0f 89 62 ff ff ff    	jns    c010d05b <vprintfmt+0x5b>
                width = precision, precision = -1;
c010d0f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d0fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d0ff:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010d106:	e9 50 ff ff ff       	jmp    c010d05b <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010d10b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010d10f:	e9 48 ff ff ff       	jmp    c010d05c <vprintfmt+0x5c>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010d114:	8b 45 14             	mov    0x14(%ebp),%eax
c010d117:	8d 50 04             	lea    0x4(%eax),%edx
c010d11a:	89 55 14             	mov    %edx,0x14(%ebp)
c010d11d:	8b 00                	mov    (%eax),%eax
c010d11f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d122:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d126:	89 04 24             	mov    %eax,(%esp)
c010d129:	8b 45 08             	mov    0x8(%ebp),%eax
c010d12c:	ff d0                	call   *%eax
            break;
c010d12e:	e9 b4 02 00 00       	jmp    c010d3e7 <vprintfmt+0x3e7>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010d133:	8b 45 14             	mov    0x14(%ebp),%eax
c010d136:	8d 50 04             	lea    0x4(%eax),%edx
c010d139:	89 55 14             	mov    %edx,0x14(%ebp)
c010d13c:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010d13e:	85 db                	test   %ebx,%ebx
c010d140:	79 02                	jns    c010d144 <vprintfmt+0x144>
                err = -err;
c010d142:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010d144:	83 fb 18             	cmp    $0x18,%ebx
c010d147:	7f 0b                	jg     c010d154 <vprintfmt+0x154>
c010d149:	8b 34 9d e0 06 11 c0 	mov    -0x3feef920(,%ebx,4),%esi
c010d150:	85 f6                	test   %esi,%esi
c010d152:	75 23                	jne    c010d177 <vprintfmt+0x177>
                printfmt(putch, putdat, "error %d", err);
c010d154:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010d158:	c7 44 24 08 55 07 11 	movl   $0xc0110755,0x8(%esp)
c010d15f:	c0 
c010d160:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d163:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d167:	8b 45 08             	mov    0x8(%ebp),%eax
c010d16a:	89 04 24             	mov    %eax,(%esp)
c010d16d:	e8 60 fe ff ff       	call   c010cfd2 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010d172:	e9 70 02 00 00       	jmp    c010d3e7 <vprintfmt+0x3e7>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010d177:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d17b:	c7 44 24 08 5e 07 11 	movl   $0xc011075e,0x8(%esp)
c010d182:	c0 
c010d183:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d186:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d18a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d18d:	89 04 24             	mov    %eax,(%esp)
c010d190:	e8 3d fe ff ff       	call   c010cfd2 <printfmt>
            }
            break;
c010d195:	e9 4d 02 00 00       	jmp    c010d3e7 <vprintfmt+0x3e7>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010d19a:	8b 45 14             	mov    0x14(%ebp),%eax
c010d19d:	8d 50 04             	lea    0x4(%eax),%edx
c010d1a0:	89 55 14             	mov    %edx,0x14(%ebp)
c010d1a3:	8b 30                	mov    (%eax),%esi
c010d1a5:	85 f6                	test   %esi,%esi
c010d1a7:	75 05                	jne    c010d1ae <vprintfmt+0x1ae>
                p = "(null)";
c010d1a9:	be 61 07 11 c0       	mov    $0xc0110761,%esi
            }
            if (width > 0 && padc != '-') {
c010d1ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d1b2:	7e 7c                	jle    c010d230 <vprintfmt+0x230>
c010d1b4:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010d1b8:	74 76                	je     c010d230 <vprintfmt+0x230>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d1ba:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010d1bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d1c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1c4:	89 34 24             	mov    %esi,(%esp)
c010d1c7:	e8 27 04 00 00       	call   c010d5f3 <strnlen>
c010d1cc:	89 da                	mov    %ebx,%edx
c010d1ce:	29 c2                	sub    %eax,%edx
c010d1d0:	89 d0                	mov    %edx,%eax
c010d1d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d1d5:	eb 17                	jmp    c010d1ee <vprintfmt+0x1ee>
                    putch(padc, putdat);
c010d1d7:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010d1db:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d1de:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d1e2:	89 04 24             	mov    %eax,(%esp)
c010d1e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1e8:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d1ea:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d1ee:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d1f2:	7f e3                	jg     c010d1d7 <vprintfmt+0x1d7>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d1f4:	eb 3a                	jmp    c010d230 <vprintfmt+0x230>
                if (altflag && (ch < ' ' || ch > '~')) {
c010d1f6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010d1fa:	74 1f                	je     c010d21b <vprintfmt+0x21b>
c010d1fc:	83 fb 1f             	cmp    $0x1f,%ebx
c010d1ff:	7e 05                	jle    c010d206 <vprintfmt+0x206>
c010d201:	83 fb 7e             	cmp    $0x7e,%ebx
c010d204:	7e 15                	jle    c010d21b <vprintfmt+0x21b>
                    putch('?', putdat);
c010d206:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d209:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d20d:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010d214:	8b 45 08             	mov    0x8(%ebp),%eax
c010d217:	ff d0                	call   *%eax
c010d219:	eb 0f                	jmp    c010d22a <vprintfmt+0x22a>
                }
                else {
                    putch(ch, putdat);
c010d21b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d21e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d222:	89 1c 24             	mov    %ebx,(%esp)
c010d225:	8b 45 08             	mov    0x8(%ebp),%eax
c010d228:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d22a:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d22e:	eb 01                	jmp    c010d231 <vprintfmt+0x231>
c010d230:	90                   	nop
c010d231:	0f b6 06             	movzbl (%esi),%eax
c010d234:	0f be d8             	movsbl %al,%ebx
c010d237:	85 db                	test   %ebx,%ebx
c010d239:	0f 95 c0             	setne  %al
c010d23c:	83 c6 01             	add    $0x1,%esi
c010d23f:	84 c0                	test   %al,%al
c010d241:	74 29                	je     c010d26c <vprintfmt+0x26c>
c010d243:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d247:	78 ad                	js     c010d1f6 <vprintfmt+0x1f6>
c010d249:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010d24d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d251:	79 a3                	jns    c010d1f6 <vprintfmt+0x1f6>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010d253:	eb 17                	jmp    c010d26c <vprintfmt+0x26c>
                putch(' ', putdat);
c010d255:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d258:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d25c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010d263:	8b 45 08             	mov    0x8(%ebp),%eax
c010d266:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010d268:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d26c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d270:	7f e3                	jg     c010d255 <vprintfmt+0x255>
                putch(' ', putdat);
            }
            break;
c010d272:	e9 70 01 00 00       	jmp    c010d3e7 <vprintfmt+0x3e7>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010d277:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d27a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d27e:	8d 45 14             	lea    0x14(%ebp),%eax
c010d281:	89 04 24             	mov    %eax,(%esp)
c010d284:	e8 fa fc ff ff       	call   c010cf83 <getint>
c010d289:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d28c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010d28f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d292:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d295:	85 d2                	test   %edx,%edx
c010d297:	79 26                	jns    c010d2bf <vprintfmt+0x2bf>
                putch('-', putdat);
c010d299:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d29c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2a0:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010d2a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2aa:	ff d0                	call   *%eax
                num = -(long long)num;
c010d2ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d2b2:	f7 d8                	neg    %eax
c010d2b4:	83 d2 00             	adc    $0x0,%edx
c010d2b7:	f7 da                	neg    %edx
c010d2b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d2bc:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010d2bf:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d2c6:	e9 a8 00 00 00       	jmp    c010d373 <vprintfmt+0x373>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010d2cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d2ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2d2:	8d 45 14             	lea    0x14(%ebp),%eax
c010d2d5:	89 04 24             	mov    %eax,(%esp)
c010d2d8:	e8 57 fc ff ff       	call   c010cf34 <getuint>
c010d2dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d2e0:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010d2e3:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d2ea:	e9 84 00 00 00       	jmp    c010d373 <vprintfmt+0x373>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010d2ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d2f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2f6:	8d 45 14             	lea    0x14(%ebp),%eax
c010d2f9:	89 04 24             	mov    %eax,(%esp)
c010d2fc:	e8 33 fc ff ff       	call   c010cf34 <getuint>
c010d301:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d304:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010d307:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010d30e:	eb 63                	jmp    c010d373 <vprintfmt+0x373>

        // pointer
        case 'p':
            putch('0', putdat);
c010d310:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d313:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d317:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010d31e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d321:	ff d0                	call   *%eax
            putch('x', putdat);
c010d323:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d326:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d32a:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010d331:	8b 45 08             	mov    0x8(%ebp),%eax
c010d334:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010d336:	8b 45 14             	mov    0x14(%ebp),%eax
c010d339:	8d 50 04             	lea    0x4(%eax),%edx
c010d33c:	89 55 14             	mov    %edx,0x14(%ebp)
c010d33f:	8b 00                	mov    (%eax),%eax
c010d341:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d344:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010d34b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010d352:	eb 1f                	jmp    c010d373 <vprintfmt+0x373>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010d354:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d357:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d35b:	8d 45 14             	lea    0x14(%ebp),%eax
c010d35e:	89 04 24             	mov    %eax,(%esp)
c010d361:	e8 ce fb ff ff       	call   c010cf34 <getuint>
c010d366:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d369:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010d36c:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010d373:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010d377:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d37a:	89 54 24 18          	mov    %edx,0x18(%esp)
c010d37e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d381:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d385:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d389:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d38c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d38f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d393:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d39a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d39e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3a1:	89 04 24             	mov    %eax,(%esp)
c010d3a4:	e8 53 fa ff ff       	call   c010cdfc <printnum>
            break;
c010d3a9:	eb 3c                	jmp    c010d3e7 <vprintfmt+0x3e7>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d3ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3b2:	89 1c 24             	mov    %ebx,(%esp)
c010d3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3b8:	ff d0                	call   *%eax
            break;
c010d3ba:	eb 2b                	jmp    c010d3e7 <vprintfmt+0x3e7>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d3bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3c3:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d3ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3cd:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d3cf:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d3d3:	eb 04                	jmp    c010d3d9 <vprintfmt+0x3d9>
c010d3d5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d3d9:	8b 45 10             	mov    0x10(%ebp),%eax
c010d3dc:	83 e8 01             	sub    $0x1,%eax
c010d3df:	0f b6 00             	movzbl (%eax),%eax
c010d3e2:	3c 25                	cmp    $0x25,%al
c010d3e4:	75 ef                	jne    c010d3d5 <vprintfmt+0x3d5>
                /* do nothing */;
            break;
c010d3e6:	90                   	nop
        }
    }
c010d3e7:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d3e8:	e9 34 fc ff ff       	jmp    c010d021 <vprintfmt+0x21>
            if (ch == '\0') {
                return;
c010d3ed:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010d3ee:	83 c4 40             	add    $0x40,%esp
c010d3f1:	5b                   	pop    %ebx
c010d3f2:	5e                   	pop    %esi
c010d3f3:	5d                   	pop    %ebp
c010d3f4:	c3                   	ret    

c010d3f5 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d3f5:	55                   	push   %ebp
c010d3f6:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d3f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3fb:	8b 40 08             	mov    0x8(%eax),%eax
c010d3fe:	8d 50 01             	lea    0x1(%eax),%edx
c010d401:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d404:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d407:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d40a:	8b 10                	mov    (%eax),%edx
c010d40c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d40f:	8b 40 04             	mov    0x4(%eax),%eax
c010d412:	39 c2                	cmp    %eax,%edx
c010d414:	73 12                	jae    c010d428 <sprintputch+0x33>
        *b->buf ++ = ch;
c010d416:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d419:	8b 00                	mov    (%eax),%eax
c010d41b:	8b 55 08             	mov    0x8(%ebp),%edx
c010d41e:	88 10                	mov    %dl,(%eax)
c010d420:	8d 50 01             	lea    0x1(%eax),%edx
c010d423:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d426:	89 10                	mov    %edx,(%eax)
    }
}
c010d428:	5d                   	pop    %ebp
c010d429:	c3                   	ret    

c010d42a <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d42a:	55                   	push   %ebp
c010d42b:	89 e5                	mov    %esp,%ebp
c010d42d:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d430:	8d 45 14             	lea    0x14(%ebp),%eax
c010d433:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010d436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d439:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d43d:	8b 45 10             	mov    0x10(%ebp),%eax
c010d440:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d444:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d447:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d44b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d44e:	89 04 24             	mov    %eax,(%esp)
c010d451:	e8 08 00 00 00       	call   c010d45e <vsnprintf>
c010d456:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d459:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d45c:	c9                   	leave  
c010d45d:	c3                   	ret    

c010d45e <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d45e:	55                   	push   %ebp
c010d45f:	89 e5                	mov    %esp,%ebp
c010d461:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d464:	8b 45 08             	mov    0x8(%ebp),%eax
c010d467:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d46a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d46d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d470:	8b 45 08             	mov    0x8(%ebp),%eax
c010d473:	01 d0                	add    %edx,%eax
c010d475:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d478:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d47f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d483:	74 0a                	je     c010d48f <vsnprintf+0x31>
c010d485:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d488:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d48b:	39 c2                	cmp    %eax,%edx
c010d48d:	76 07                	jbe    c010d496 <vsnprintf+0x38>
        return -E_INVAL;
c010d48f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d494:	eb 2a                	jmp    c010d4c0 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d496:	8b 45 14             	mov    0x14(%ebp),%eax
c010d499:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d49d:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4a0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d4a4:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d4a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d4ab:	c7 04 24 f5 d3 10 c0 	movl   $0xc010d3f5,(%esp)
c010d4b2:	e8 49 fb ff ff       	call   c010d000 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d4b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d4ba:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d4bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d4c0:	c9                   	leave  
c010d4c1:	c3                   	ret    
c010d4c2:	66 90                	xchg   %ax,%ax

c010d4c4 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d4c4:	55                   	push   %ebp
c010d4c5:	89 e5                	mov    %esp,%ebp
c010d4c7:	57                   	push   %edi
c010d4c8:	56                   	push   %esi
c010d4c9:	53                   	push   %ebx
c010d4ca:	83 ec 34             	sub    $0x34,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d4cd:	a1 c0 2e 13 c0       	mov    0xc0132ec0,%eax
c010d4d2:	8b 15 c4 2e 13 c0    	mov    0xc0132ec4,%edx
c010d4d8:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d4de:	6b f0 05             	imul   $0x5,%eax,%esi
c010d4e1:	01 f7                	add    %esi,%edi
c010d4e3:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010d4e8:	f7 e6                	mul    %esi
c010d4ea:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010d4ed:	89 f2                	mov    %esi,%edx
c010d4ef:	83 c0 0b             	add    $0xb,%eax
c010d4f2:	83 d2 00             	adc    $0x0,%edx
c010d4f5:	89 c1                	mov    %eax,%ecx
c010d4f7:	80 e5 ff             	and    $0xff,%ch
c010d4fa:	0f b7 da             	movzwl %dx,%ebx
c010d4fd:	89 0d c0 2e 13 c0    	mov    %ecx,0xc0132ec0
c010d503:	89 1d c4 2e 13 c0    	mov    %ebx,0xc0132ec4
    unsigned long long result = (next >> 12);
c010d509:	a1 c0 2e 13 c0       	mov    0xc0132ec0,%eax
c010d50e:	8b 15 c4 2e 13 c0    	mov    0xc0132ec4,%edx
c010d514:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d518:	c1 ea 0c             	shr    $0xc,%edx
c010d51b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d51e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d521:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d528:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d52b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d52e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010d531:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010d534:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d537:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010d53a:	89 d3                	mov    %edx,%ebx
c010d53c:	89 c6                	mov    %eax,%esi
c010d53e:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010d541:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c010d544:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d547:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d54a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d54e:	74 1c                	je     c010d56c <rand+0xa8>
c010d550:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d553:	ba 00 00 00 00       	mov    $0x0,%edx
c010d558:	f7 75 dc             	divl   -0x24(%ebp)
c010d55b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d55e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d561:	ba 00 00 00 00       	mov    $0x0,%edx
c010d566:	f7 75 dc             	divl   -0x24(%ebp)
c010d569:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d56c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d56f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d572:	89 d6                	mov    %edx,%esi
c010d574:	89 c3                	mov    %eax,%ebx
c010d576:	89 f0                	mov    %esi,%eax
c010d578:	89 da                	mov    %ebx,%edx
c010d57a:	f7 75 dc             	divl   -0x24(%ebp)
c010d57d:	89 d3                	mov    %edx,%ebx
c010d57f:	89 c6                	mov    %eax,%esi
c010d581:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010d584:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c010d587:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d58a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010d58d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d590:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010d593:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d596:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010d599:	89 c3                	mov    %eax,%ebx
c010d59b:	89 d6                	mov    %edx,%esi
c010d59d:	89 5d e0             	mov    %ebx,-0x20(%ebp)
c010d5a0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010d5a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d5a6:	83 c4 34             	add    $0x34,%esp
c010d5a9:	5b                   	pop    %ebx
c010d5aa:	5e                   	pop    %esi
c010d5ab:	5f                   	pop    %edi
c010d5ac:	5d                   	pop    %ebp
c010d5ad:	c3                   	ret    

c010d5ae <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d5ae:	55                   	push   %ebp
c010d5af:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d5b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5b4:	ba 00 00 00 00       	mov    $0x0,%edx
c010d5b9:	a3 c0 2e 13 c0       	mov    %eax,0xc0132ec0
c010d5be:	89 15 c4 2e 13 c0    	mov    %edx,0xc0132ec4
}
c010d5c4:	5d                   	pop    %ebp
c010d5c5:	c3                   	ret    
c010d5c6:	66 90                	xchg   %ax,%ax

c010d5c8 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d5c8:	55                   	push   %ebp
c010d5c9:	89 e5                	mov    %esp,%ebp
c010d5cb:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d5ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d5d5:	eb 04                	jmp    c010d5db <strlen+0x13>
        cnt ++;
c010d5d7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d5db:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5de:	0f b6 00             	movzbl (%eax),%eax
c010d5e1:	84 c0                	test   %al,%al
c010d5e3:	0f 95 c0             	setne  %al
c010d5e6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d5ea:	84 c0                	test   %al,%al
c010d5ec:	75 e9                	jne    c010d5d7 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d5ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d5f1:	c9                   	leave  
c010d5f2:	c3                   	ret    

c010d5f3 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d5f3:	55                   	push   %ebp
c010d5f4:	89 e5                	mov    %esp,%ebp
c010d5f6:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d5f9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d600:	eb 04                	jmp    c010d606 <strnlen+0x13>
        cnt ++;
c010d602:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d606:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d609:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d60c:	73 13                	jae    c010d621 <strnlen+0x2e>
c010d60e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d611:	0f b6 00             	movzbl (%eax),%eax
c010d614:	84 c0                	test   %al,%al
c010d616:	0f 95 c0             	setne  %al
c010d619:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d61d:	84 c0                	test   %al,%al
c010d61f:	75 e1                	jne    c010d602 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d621:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d624:	c9                   	leave  
c010d625:	c3                   	ret    

c010d626 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d626:	55                   	push   %ebp
c010d627:	89 e5                	mov    %esp,%ebp
c010d629:	57                   	push   %edi
c010d62a:	56                   	push   %esi
c010d62b:	53                   	push   %ebx
c010d62c:	83 ec 24             	sub    $0x24,%esp
c010d62f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d632:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d635:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d638:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d63b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d63e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d641:	89 d6                	mov    %edx,%esi
c010d643:	89 c3                	mov    %eax,%ebx
c010d645:	89 df                	mov    %ebx,%edi
c010d647:	ac                   	lods   %ds:(%esi),%al
c010d648:	aa                   	stos   %al,%es:(%edi)
c010d649:	84 c0                	test   %al,%al
c010d64b:	75 fa                	jne    c010d647 <strcpy+0x21>
c010d64d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d650:	89 fb                	mov    %edi,%ebx
c010d652:	89 75 e8             	mov    %esi,-0x18(%ebp)
c010d655:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
c010d658:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d65b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d65e:	8b 45 f0             	mov    -0x10(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d661:	83 c4 24             	add    $0x24,%esp
c010d664:	5b                   	pop    %ebx
c010d665:	5e                   	pop    %esi
c010d666:	5f                   	pop    %edi
c010d667:	5d                   	pop    %ebp
c010d668:	c3                   	ret    

c010d669 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d669:	55                   	push   %ebp
c010d66a:	89 e5                	mov    %esp,%ebp
c010d66c:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d66f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d672:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d675:	eb 21                	jmp    c010d698 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d677:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d67a:	0f b6 10             	movzbl (%eax),%edx
c010d67d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d680:	88 10                	mov    %dl,(%eax)
c010d682:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d685:	0f b6 00             	movzbl (%eax),%eax
c010d688:	84 c0                	test   %al,%al
c010d68a:	74 04                	je     c010d690 <strncpy+0x27>
            src ++;
c010d68c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d690:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d694:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d698:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d69c:	75 d9                	jne    c010d677 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d69e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d6a1:	c9                   	leave  
c010d6a2:	c3                   	ret    

c010d6a3 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d6a3:	55                   	push   %ebp
c010d6a4:	89 e5                	mov    %esp,%ebp
c010d6a6:	57                   	push   %edi
c010d6a7:	56                   	push   %esi
c010d6a8:	53                   	push   %ebx
c010d6a9:	83 ec 24             	sub    $0x24,%esp
c010d6ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6af:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d6b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d6b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d6bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6be:	89 d6                	mov    %edx,%esi
c010d6c0:	89 c3                	mov    %eax,%ebx
c010d6c2:	89 df                	mov    %ebx,%edi
c010d6c4:	ac                   	lods   %ds:(%esi),%al
c010d6c5:	ae                   	scas   %es:(%edi),%al
c010d6c6:	75 08                	jne    c010d6d0 <strcmp+0x2d>
c010d6c8:	84 c0                	test   %al,%al
c010d6ca:	75 f8                	jne    c010d6c4 <strcmp+0x21>
c010d6cc:	31 c0                	xor    %eax,%eax
c010d6ce:	eb 04                	jmp    c010d6d4 <strcmp+0x31>
c010d6d0:	19 c0                	sbb    %eax,%eax
c010d6d2:	0c 01                	or     $0x1,%al
c010d6d4:	89 fb                	mov    %edi,%ebx
c010d6d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d6d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d6dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d6df:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010d6e2:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d6e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d6e8:	83 c4 24             	add    $0x24,%esp
c010d6eb:	5b                   	pop    %ebx
c010d6ec:	5e                   	pop    %esi
c010d6ed:	5f                   	pop    %edi
c010d6ee:	5d                   	pop    %ebp
c010d6ef:	c3                   	ret    

c010d6f0 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d6f0:	55                   	push   %ebp
c010d6f1:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d6f3:	eb 0c                	jmp    c010d701 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d6f5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d6f9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d6fd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d701:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d705:	74 1a                	je     c010d721 <strncmp+0x31>
c010d707:	8b 45 08             	mov    0x8(%ebp),%eax
c010d70a:	0f b6 00             	movzbl (%eax),%eax
c010d70d:	84 c0                	test   %al,%al
c010d70f:	74 10                	je     c010d721 <strncmp+0x31>
c010d711:	8b 45 08             	mov    0x8(%ebp),%eax
c010d714:	0f b6 10             	movzbl (%eax),%edx
c010d717:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d71a:	0f b6 00             	movzbl (%eax),%eax
c010d71d:	38 c2                	cmp    %al,%dl
c010d71f:	74 d4                	je     c010d6f5 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d721:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d725:	74 1a                	je     c010d741 <strncmp+0x51>
c010d727:	8b 45 08             	mov    0x8(%ebp),%eax
c010d72a:	0f b6 00             	movzbl (%eax),%eax
c010d72d:	0f b6 d0             	movzbl %al,%edx
c010d730:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d733:	0f b6 00             	movzbl (%eax),%eax
c010d736:	0f b6 c0             	movzbl %al,%eax
c010d739:	89 d1                	mov    %edx,%ecx
c010d73b:	29 c1                	sub    %eax,%ecx
c010d73d:	89 c8                	mov    %ecx,%eax
c010d73f:	eb 05                	jmp    c010d746 <strncmp+0x56>
c010d741:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d746:	5d                   	pop    %ebp
c010d747:	c3                   	ret    

c010d748 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d748:	55                   	push   %ebp
c010d749:	89 e5                	mov    %esp,%ebp
c010d74b:	83 ec 04             	sub    $0x4,%esp
c010d74e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d751:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d754:	eb 14                	jmp    c010d76a <strchr+0x22>
        if (*s == c) {
c010d756:	8b 45 08             	mov    0x8(%ebp),%eax
c010d759:	0f b6 00             	movzbl (%eax),%eax
c010d75c:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d75f:	75 05                	jne    c010d766 <strchr+0x1e>
            return (char *)s;
c010d761:	8b 45 08             	mov    0x8(%ebp),%eax
c010d764:	eb 13                	jmp    c010d779 <strchr+0x31>
        }
        s ++;
c010d766:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d76a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d76d:	0f b6 00             	movzbl (%eax),%eax
c010d770:	84 c0                	test   %al,%al
c010d772:	75 e2                	jne    c010d756 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d774:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d779:	c9                   	leave  
c010d77a:	c3                   	ret    

c010d77b <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d77b:	55                   	push   %ebp
c010d77c:	89 e5                	mov    %esp,%ebp
c010d77e:	83 ec 04             	sub    $0x4,%esp
c010d781:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d784:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d787:	eb 0f                	jmp    c010d798 <strfind+0x1d>
        if (*s == c) {
c010d789:	8b 45 08             	mov    0x8(%ebp),%eax
c010d78c:	0f b6 00             	movzbl (%eax),%eax
c010d78f:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d792:	74 10                	je     c010d7a4 <strfind+0x29>
            break;
        }
        s ++;
c010d794:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d798:	8b 45 08             	mov    0x8(%ebp),%eax
c010d79b:	0f b6 00             	movzbl (%eax),%eax
c010d79e:	84 c0                	test   %al,%al
c010d7a0:	75 e7                	jne    c010d789 <strfind+0xe>
c010d7a2:	eb 01                	jmp    c010d7a5 <strfind+0x2a>
        if (*s == c) {
            break;
c010d7a4:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010d7a5:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d7a8:	c9                   	leave  
c010d7a9:	c3                   	ret    

c010d7aa <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d7aa:	55                   	push   %ebp
c010d7ab:	89 e5                	mov    %esp,%ebp
c010d7ad:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d7b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d7b7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d7be:	eb 04                	jmp    c010d7c4 <strtol+0x1a>
        s ++;
c010d7c0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d7c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7c7:	0f b6 00             	movzbl (%eax),%eax
c010d7ca:	3c 20                	cmp    $0x20,%al
c010d7cc:	74 f2                	je     c010d7c0 <strtol+0x16>
c010d7ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7d1:	0f b6 00             	movzbl (%eax),%eax
c010d7d4:	3c 09                	cmp    $0x9,%al
c010d7d6:	74 e8                	je     c010d7c0 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d7d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7db:	0f b6 00             	movzbl (%eax),%eax
c010d7de:	3c 2b                	cmp    $0x2b,%al
c010d7e0:	75 06                	jne    c010d7e8 <strtol+0x3e>
        s ++;
c010d7e2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d7e6:	eb 15                	jmp    c010d7fd <strtol+0x53>
    }
    else if (*s == '-') {
c010d7e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7eb:	0f b6 00             	movzbl (%eax),%eax
c010d7ee:	3c 2d                	cmp    $0x2d,%al
c010d7f0:	75 0b                	jne    c010d7fd <strtol+0x53>
        s ++, neg = 1;
c010d7f2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d7f6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d7fd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d801:	74 06                	je     c010d809 <strtol+0x5f>
c010d803:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d807:	75 24                	jne    c010d82d <strtol+0x83>
c010d809:	8b 45 08             	mov    0x8(%ebp),%eax
c010d80c:	0f b6 00             	movzbl (%eax),%eax
c010d80f:	3c 30                	cmp    $0x30,%al
c010d811:	75 1a                	jne    c010d82d <strtol+0x83>
c010d813:	8b 45 08             	mov    0x8(%ebp),%eax
c010d816:	83 c0 01             	add    $0x1,%eax
c010d819:	0f b6 00             	movzbl (%eax),%eax
c010d81c:	3c 78                	cmp    $0x78,%al
c010d81e:	75 0d                	jne    c010d82d <strtol+0x83>
        s += 2, base = 16;
c010d820:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d824:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d82b:	eb 2a                	jmp    c010d857 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d82d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d831:	75 17                	jne    c010d84a <strtol+0xa0>
c010d833:	8b 45 08             	mov    0x8(%ebp),%eax
c010d836:	0f b6 00             	movzbl (%eax),%eax
c010d839:	3c 30                	cmp    $0x30,%al
c010d83b:	75 0d                	jne    c010d84a <strtol+0xa0>
        s ++, base = 8;
c010d83d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d841:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d848:	eb 0d                	jmp    c010d857 <strtol+0xad>
    }
    else if (base == 0) {
c010d84a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d84e:	75 07                	jne    c010d857 <strtol+0xad>
        base = 10;
c010d850:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d857:	8b 45 08             	mov    0x8(%ebp),%eax
c010d85a:	0f b6 00             	movzbl (%eax),%eax
c010d85d:	3c 2f                	cmp    $0x2f,%al
c010d85f:	7e 1b                	jle    c010d87c <strtol+0xd2>
c010d861:	8b 45 08             	mov    0x8(%ebp),%eax
c010d864:	0f b6 00             	movzbl (%eax),%eax
c010d867:	3c 39                	cmp    $0x39,%al
c010d869:	7f 11                	jg     c010d87c <strtol+0xd2>
            dig = *s - '0';
c010d86b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d86e:	0f b6 00             	movzbl (%eax),%eax
c010d871:	0f be c0             	movsbl %al,%eax
c010d874:	83 e8 30             	sub    $0x30,%eax
c010d877:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d87a:	eb 48                	jmp    c010d8c4 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d87c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d87f:	0f b6 00             	movzbl (%eax),%eax
c010d882:	3c 60                	cmp    $0x60,%al
c010d884:	7e 1b                	jle    c010d8a1 <strtol+0xf7>
c010d886:	8b 45 08             	mov    0x8(%ebp),%eax
c010d889:	0f b6 00             	movzbl (%eax),%eax
c010d88c:	3c 7a                	cmp    $0x7a,%al
c010d88e:	7f 11                	jg     c010d8a1 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d890:	8b 45 08             	mov    0x8(%ebp),%eax
c010d893:	0f b6 00             	movzbl (%eax),%eax
c010d896:	0f be c0             	movsbl %al,%eax
c010d899:	83 e8 57             	sub    $0x57,%eax
c010d89c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d89f:	eb 23                	jmp    c010d8c4 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d8a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8a4:	0f b6 00             	movzbl (%eax),%eax
c010d8a7:	3c 40                	cmp    $0x40,%al
c010d8a9:	7e 3c                	jle    c010d8e7 <strtol+0x13d>
c010d8ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8ae:	0f b6 00             	movzbl (%eax),%eax
c010d8b1:	3c 5a                	cmp    $0x5a,%al
c010d8b3:	7f 32                	jg     c010d8e7 <strtol+0x13d>
            dig = *s - 'A' + 10;
c010d8b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8b8:	0f b6 00             	movzbl (%eax),%eax
c010d8bb:	0f be c0             	movsbl %al,%eax
c010d8be:	83 e8 37             	sub    $0x37,%eax
c010d8c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d8c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8c7:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d8ca:	7d 1a                	jge    c010d8e6 <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010d8cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d8d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d8d3:	89 c2                	mov    %eax,%edx
c010d8d5:	0f af 55 10          	imul   0x10(%ebp),%edx
c010d8d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8dc:	01 d0                	add    %edx,%eax
c010d8de:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d8e1:	e9 71 ff ff ff       	jmp    c010d857 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010d8e6:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010d8e7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d8eb:	74 08                	je     c010d8f5 <strtol+0x14b>
        *endptr = (char *) s;
c010d8ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8f0:	8b 55 08             	mov    0x8(%ebp),%edx
c010d8f3:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d8f5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d8f9:	74 07                	je     c010d902 <strtol+0x158>
c010d8fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d8fe:	f7 d8                	neg    %eax
c010d900:	eb 03                	jmp    c010d905 <strtol+0x15b>
c010d902:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d905:	c9                   	leave  
c010d906:	c3                   	ret    

c010d907 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d907:	55                   	push   %ebp
c010d908:	89 e5                	mov    %esp,%ebp
c010d90a:	57                   	push   %edi
c010d90b:	56                   	push   %esi
c010d90c:	53                   	push   %ebx
c010d90d:	83 ec 24             	sub    $0x24,%esp
c010d910:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d913:	88 45 d0             	mov    %al,-0x30(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d916:	0f be 45 d0          	movsbl -0x30(%ebp),%eax
c010d91a:	8b 55 08             	mov    0x8(%ebp),%edx
c010d91d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010d920:	88 45 ef             	mov    %al,-0x11(%ebp)
c010d923:	8b 45 10             	mov    0x10(%ebp),%eax
c010d926:	89 45 e8             	mov    %eax,-0x18(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d929:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010d92c:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c010d930:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d933:	89 ce                	mov    %ecx,%esi
c010d935:	89 d3                	mov    %edx,%ebx
c010d937:	89 f1                	mov    %esi,%ecx
c010d939:	89 df                	mov    %ebx,%edi
c010d93b:	f3 aa                	rep stos %al,%es:(%edi)
c010d93d:	89 fb                	mov    %edi,%ebx
c010d93f:	89 ce                	mov    %ecx,%esi
c010d941:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010d944:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d947:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d94a:	83 c4 24             	add    $0x24,%esp
c010d94d:	5b                   	pop    %ebx
c010d94e:	5e                   	pop    %esi
c010d94f:	5f                   	pop    %edi
c010d950:	5d                   	pop    %ebp
c010d951:	c3                   	ret    

c010d952 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d952:	55                   	push   %ebp
c010d953:	89 e5                	mov    %esp,%ebp
c010d955:	57                   	push   %edi
c010d956:	56                   	push   %esi
c010d957:	53                   	push   %ebx
c010d958:	83 ec 38             	sub    $0x38,%esp
c010d95b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d95e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d961:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d964:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d967:	8b 45 10             	mov    0x10(%ebp),%eax
c010d96a:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d96d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d970:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d973:	73 4e                	jae    c010d9c3 <memmove+0x71>
c010d975:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d978:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d97b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d97e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d981:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d984:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d987:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d98a:	89 c1                	mov    %eax,%ecx
c010d98c:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d98f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d992:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d995:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010d998:	89 d7                	mov    %edx,%edi
c010d99a:	89 c3                	mov    %eax,%ebx
c010d99c:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010d99f:	89 de                	mov    %ebx,%esi
c010d9a1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d9a3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d9a6:	83 e1 03             	and    $0x3,%ecx
c010d9a9:	74 02                	je     c010d9ad <memmove+0x5b>
c010d9ab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d9ad:	89 f3                	mov    %esi,%ebx
c010d9af:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010d9b2:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010d9b5:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d9b8:	89 7d d4             	mov    %edi,-0x2c(%ebp)
c010d9bb:	89 5d d0             	mov    %ebx,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d9be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d9c1:	eb 3e                	jmp    c010da01 <memmove+0xaf>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d9c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9c6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d9c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d9cc:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c010d9cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9d2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d9d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9d8:	01 c2                	add    %eax,%edx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d9da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9dd:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010d9e0:	89 ce                	mov    %ecx,%esi
c010d9e2:	89 d3                	mov    %edx,%ebx
c010d9e4:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010d9e7:	89 df                	mov    %ebx,%edi
c010d9e9:	fd                   	std    
c010d9ea:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d9ec:	fc                   	cld    
c010d9ed:	89 fb                	mov    %edi,%ebx
c010d9ef:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010d9f2:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010d9f5:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d9f8:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010d9fb:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d9fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010da01:	83 c4 38             	add    $0x38,%esp
c010da04:	5b                   	pop    %ebx
c010da05:	5e                   	pop    %esi
c010da06:	5f                   	pop    %edi
c010da07:	5d                   	pop    %ebp
c010da08:	c3                   	ret    

c010da09 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010da09:	55                   	push   %ebp
c010da0a:	89 e5                	mov    %esp,%ebp
c010da0c:	57                   	push   %edi
c010da0d:	56                   	push   %esi
c010da0e:	53                   	push   %ebx
c010da0f:	83 ec 24             	sub    $0x24,%esp
c010da12:	8b 45 08             	mov    0x8(%ebp),%eax
c010da15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010da18:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010da1e:	8b 45 10             	mov    0x10(%ebp),%eax
c010da21:	89 45 e8             	mov    %eax,-0x18(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010da24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da27:	89 c1                	mov    %eax,%ecx
c010da29:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010da2c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010da2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da32:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010da35:	89 d7                	mov    %edx,%edi
c010da37:	89 c3                	mov    %eax,%ebx
c010da39:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010da3c:	89 de                	mov    %ebx,%esi
c010da3e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010da40:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010da43:	83 e1 03             	and    $0x3,%ecx
c010da46:	74 02                	je     c010da4a <memcpy+0x41>
c010da48:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010da4a:	89 f3                	mov    %esi,%ebx
c010da4c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010da4f:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010da52:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010da55:	89 7d e0             	mov    %edi,-0x20(%ebp)
c010da58:	89 5d dc             	mov    %ebx,-0x24(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010da5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010da5e:	83 c4 24             	add    $0x24,%esp
c010da61:	5b                   	pop    %ebx
c010da62:	5e                   	pop    %esi
c010da63:	5f                   	pop    %edi
c010da64:	5d                   	pop    %ebp
c010da65:	c3                   	ret    

c010da66 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010da66:	55                   	push   %ebp
c010da67:	89 e5                	mov    %esp,%ebp
c010da69:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010da6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010da6f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010da72:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da75:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010da78:	eb 32                	jmp    c010daac <memcmp+0x46>
        if (*s1 != *s2) {
c010da7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010da7d:	0f b6 10             	movzbl (%eax),%edx
c010da80:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010da83:	0f b6 00             	movzbl (%eax),%eax
c010da86:	38 c2                	cmp    %al,%dl
c010da88:	74 1a                	je     c010daa4 <memcmp+0x3e>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010da8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010da8d:	0f b6 00             	movzbl (%eax),%eax
c010da90:	0f b6 d0             	movzbl %al,%edx
c010da93:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010da96:	0f b6 00             	movzbl (%eax),%eax
c010da99:	0f b6 c0             	movzbl %al,%eax
c010da9c:	89 d1                	mov    %edx,%ecx
c010da9e:	29 c1                	sub    %eax,%ecx
c010daa0:	89 c8                	mov    %ecx,%eax
c010daa2:	eb 1c                	jmp    c010dac0 <memcmp+0x5a>
        }
        s1 ++, s2 ++;
c010daa4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010daa8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010daac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010dab0:	0f 95 c0             	setne  %al
c010dab3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010dab7:	84 c0                	test   %al,%al
c010dab9:	75 bf                	jne    c010da7a <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010dabb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dac0:	c9                   	leave  
c010dac1:	c3                   	ret    
